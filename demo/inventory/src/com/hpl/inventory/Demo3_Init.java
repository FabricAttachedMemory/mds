/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


package com.hpl.inventory;

import java.util.concurrent.ThreadLocalRandom;

import org.apache.log4j.Logger;

import com.hpl.erk.config.ConfigParam;
import com.hpl.erk.config.RunConfig;
import com.hpl.erk.config.RunContext;
import com.hpl.erk.config.ex.ConfigErrorsSeen;


public class Demo3_Init extends Demo3Base {
	static final Logger log = Logger.getLogger(Demo3_Init.class);
	static final RunContext rc = demo3rc.subContext("init").activate();
	static final ConfigParam<Integer> maxProdNoParam = rc.param(int.class, "max_prod_no")
			.help("Maximum product number")
			.defaultVal(100);
	static final ConfigParam<Integer> gapSizeParam = rc.param(int.class, "gap_size")
			.help("Size of gaps between created products")
			.defaultVal(2);
	static final ConfigParam<Integer> minValParam = rc.param(int.class, "min_val")
			.help("Minimum value (in dollars)")
			.defaultVal(1);
	static final ConfigParam<Integer> maxValParam = rc.param(int.class, "max_val")
			.help("Maximum value (in dollars)")
			.defaultVal(100);
	static final ConfigParam<Integer> minQuantParam = rc.param(int.class, "min_quant")
			.help("Minimum quantity")
			.defaultVal(100);
	static final ConfigParam<Integer> maxQuantParam = rc.param(int.class, "max_quant")
			.help("Maximum quantity)")
			.defaultVal(1_000);

    
    public static void main(String[] args) throws ConfigErrorsSeen {
    	args = RunConfig.process(Demo3_Init.class, args);

    	String inventoryName = invNameParam.v();

    	Inventory inventory = Inventory.create.record().bindName(inventoryName);

    	ThreadLocalRandom r = ThreadLocalRandom.current();
    	for (int i=1; i < maxProdNoParam.v(); i += gapSizeParam.v()+1) {
    		
    		String pname = String.format("P%06d", i);
    		int q = r.nextInt(minQuantParam.v(), maxQuantParam.v()+1);
    		int v = 100*r.nextInt(minValParam.v(), maxValParam.v()+1);
    		log.fatal(String.format("%s: %,d @ %s", pname, q, Formatting.formatCurrency(v)));

    		Product p = Product.create.record(pname, q, v);
    		inventory.append(p);
    	}
    }

} // end class Demo3_Init
