/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.lazy;

import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.UnaryFunc;

public abstract class Lazy<T> implements NullaryFunc<T> {
  private volatile boolean computed = false;
  private T value;

  protected abstract T compute();
  
  public final T value() {
    if (!computed) {
      synchronized (this) {
        if (!computed) {
          value = compute();
          computed = true;
        }
      }
    }
    return value;
  }
  
  @Override
  public T call() {
    return value();
  }
  
  public static <T> Lazy<T> call(final NullaryFunc<? extends T> creator) {
    return new Lazy<T>() {
      @Override
      protected T compute() {
        return creator.call();
      }
    };
  }
  
  public static <X,T> Lazy<T> apply(final X obj, final UnaryFunc<? super X, ? extends T> transformer) {
    return new Lazy<T>() {
      @Override
      protected T compute() {
        return transformer.call(obj);
      }};
  }
}
