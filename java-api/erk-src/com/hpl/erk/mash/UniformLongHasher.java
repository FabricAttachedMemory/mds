/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.mash;

import java.util.Random;

import com.hpl.erk.BitField;
import com.hpl.erk.BitField.Justification;

public class UniformLongHasher {
  private static final int N_WORDS = Long.SIZE/Byte.SIZE;
  private static final ThreadLocal<long[]> tlFields = new ThreadLocal<long[]>() {
    protected long[] initialValue() {
      return new long[N_WORDS];
    };
  };
  private static final int[] widths = { 8, 8, 8, 8, 8, 8, 8, 8 };
  @SuppressWarnings("unused")
  private final long seed;
  private final long[] table = new long[1<<Byte.SIZE];

  public UniformLongHasher(long seed) {
    this.seed = seed;
    Random rnd = new Random(seed);
    for (int i=0; i<N_WORDS; i++) {
      table[i] = rnd.nextLong();
    }
  }
  
  public UniformLongHasher(String seedPhrase) {
    this(seedPhrase.hashCode());
  }
  
  public long hash(long n) {
    final long[] fields = tlFields.get();
    BitField.fromLong(n, Justification.RIGHT, widths, fields);
    long hash = 0;
    for (long field : fields) {
      hash = Long.rotateLeft(hash, 1);
      hash ^= table[(int)field];
    }
    return hash;
  }
  
  

}
