/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.mash;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Set;

import com.hpl.erk.mash.UniformTableTitleMatcher.Match;

/**
 * Test program used by the simple webMonitor.pl demo
 * @author George.Forman@hp.com  (gforman)
 */
public class TestInputs {
	
	static boolean verbose;
	static boolean beep;
	static UniformTableTitleMatcher matcher;
	
	public static void main(String[] args) throws IOException {

		if (args.length == 0) {
			System.err.println("Usage: [-Dverbose] [-Dbeep] TestInputs matcherFilename [filename[utf8] or stdin]");
			System.exit(1); // Exit from main is okay.
		}
		verbose = System.getProperty("verbose", null) != null;
		beep    = System.getProperty("beep", null) != null;
		
		UniformTableTitleMatcher.TRACE = false;
		matcher = UniformTableTitleMatcher.fromDumpFile(new File(args[0]));

		if (args.length == 1) {
			doInput(new InputStreamReader(System.in));
		} else for (int i = 1; i < args.length; i++) {
			File input = new File(args[i]);
			boolean utf8 = input.getName().toLowerCase().contains("utf8");
			doInput(utf8 ? new InputStreamReader(new FileInputStream(input), "UTF-8") : new FileReader(input));
		}
	}
	
	public static void doInput(InputStreamReader in) throws IOException {
		BufferedReader rdr = new BufferedReader(in);
		int nlines = 0;
		for (String line; (line = rdr.readLine()) != null; ) {
			nlines++;
			if (verbose) System.out.format("Checking '%s'%n", line);
			Set<Match> matches = matcher.check(line);

			////    only print longest match
			if (matches.size() > 0) {
				Match m = matches.iterator().next();
				final int nWords = m.getLength();
				if (nWords < 3) continue;
				
				System.out.printf("%d\t%s%n", nWords, m.getString());
				if (beep) {// beep for the demo
					System.out.flush();// flush before the beep
					Toolkit.getDefaultToolkit().beep();
				}
			}

		}
		if (nlines > 100)  System.err.printf("%,d lines checked", nlines);
	}

}
