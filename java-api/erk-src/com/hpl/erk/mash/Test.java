/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.mash;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Set;

import com.hpl.erk.mash.UniformTableTitleMatcher.Match;



public class Test {

  /**
   * @param args
   * @throws IOException 
   */
  public static void main(String[] args) throws IOException {
    File dump = new File(args[0]);
//    UniformTableTitleMatcher.TRACE = true;
    UniformTableTitleMatcher matcher = UniformTableTitleMatcher.fromDumpFile(dump);
    
    BufferedReader rdr = null;
    if (args.length == 2) {
    	File input = new File(args[1]);
    	boolean utf8 = input.getName().toLowerCase().indexOf("utf8") >= 0;
    	rdr = new BufferedReader(utf8 
    			? new InputStreamReader(new FileInputStream(input),"UTF-8") 
    			: new FileReader(input));
    } else {
    	rdr = new BufferedReader(new InputStreamReader(System.in,"UTF-8"));
    }
//    int nlines = 0;
    String line;
    while ((line = rdr.readLine()) != null) {
//       nlines++;
       System.out.format("Checking '%s'%n", line);
      Set<Match> matches = matcher.check(line);

////    only print longest match
//      if (matches.size() > 0) {
//    	  Match m = matches.iterator().next();
//    	  final int nWords = m.getLength();
//    	  if (nWords > 2) 
//    		  System.out.printf("%d\t%s%n", nWords, m.getString());
//      }
      
////      print all matches
      for (Match m : matches) {
        System.out.format("  -- matched '%s'%n", m);
      }
      
//      beep for the demo
//      System.out.flush();// flush before the beep
//      if (matches.size()>0) Toolkit.getDefaultToolkit().beep();
    }
    
//    System.err.printf("%,d lines checked", nlines);
  }


}
