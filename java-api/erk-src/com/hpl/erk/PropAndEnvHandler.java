/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk;

import org.apache.log4j.Logger;

import com.hpl.erk.config.ReadDelayedVal;
import com.hpl.erk.config.ex.ReadError;

public abstract class PropAndEnvHandler {
  private static final Logger logger = Logger.getLogger(PropAndEnvHandler.class);

  public enum Kind { 
    PROPERTY {
      @Override
      public String toString() {
        return "property";
      }
    },
    ENV_VAR {
      @Override
      public String toString() {
        return "environment variable";
      }
    };
  }
  
  public class Source {
    public final Kind kind;

    protected Source(Kind kind) {
      this.kind = kind;
    }
    
    @Override
    public String toString() {
      return String.format("%s %s", kind, propName);
    }
  }
  
  protected abstract void process(String property, Source source) throws ReadError, ReadDelayedVal; 

  public final String propName;

  public PropAndEnvHandler(String propName) {
    this.propName = propName;
  }
  
  private void processAndWarn(String property, Source source) {
    try {
      process(property, new Source(Kind.PROPERTY));
    } catch (ReadError e) {
      logger.warn(String.format("Exception while processing %s: %s. Ignoring entire %s", source, e.getMessage(), source.kind), e.getCause());
    } catch (ReadDelayedVal e) {
      logger.warn(String.format("Delayed value '%s' in %s. Ignoring entire %s", e.delayedVal(), source, source.kind));
    } 
    
  }
  public void process() {
    processAndWarn(System.getProperty(propName), new Source(Kind.PROPERTY));
    processAndWarn(System.getenv(propName), new Source(Kind.ENV_VAR));
  }


}
