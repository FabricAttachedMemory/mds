/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.iter;

import java.util.Iterator;

import com.hpl.erk.func.Functions;
import com.hpl.erk.func.Predicate;

/**
 * A variant of {@link Iteration} in which {@link #base()} returns elements of the actual type of the base Iterable.
 * Instances are typically constructed 
 * by calling {@link Iteration#overBased(Iterable)} or {@link Iteration#overBased(Object[])}.
 * See documentation for {@link Iteration} for details.  
 * 
 * @param <T> The type of the elements in the underlying sequence (i.e., {@link #current()}).
 * @param <C> The type of the base Iterable (i.e., {@link #base()}. 
 */
public class BasedIteration<T, C extends Iterable<? extends T>> extends IterationBase<T, T, C> implements Iterable<BasedIteration<T,C>> {
  private BasedIteration(C base) {
    super(base, Functions.<T>identity());
  }

  @Override
  public Iterator<BasedIteration<T,C>> iterator() {
    return subtypeIterator(this);
  }
  
  public BasedIteration<T,C> filter(Predicate<? super T> filter) {
    super.filter(filter);
    return this;
  }
  
  public static <T,C extends Iterable<? extends T>> BasedIteration<T,C> over(C base) {
    return new BasedIteration<>(base);
  }
  
  

}
