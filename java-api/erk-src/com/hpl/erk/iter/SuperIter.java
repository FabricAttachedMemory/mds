/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.iter;

import java.util.Iterator;

public class SuperIter {
  public static class Step<X> {
    final Iterator<Step<X>> underlyingIter;
    private X prior;
    private X current;
    private int index = -1;

    private Step(Iterator<Step<X>> underlingIter) {
      this.underlyingIter = underlingIter;
    }
    
    private Step<X> update(X newNext) {
      prior = current;
      current = newNext;
      index++;
      return this;
    }
    
    public X current() {
      return current;
    }
    public X prior() {
      return prior;
    }
    public int index() {
      return index;
    }
    public void removeCurrent() {
      underlyingIter.remove();
    }
    
  }
  
  public static class Iter<X> implements Iterable<Step<X>> {
    private final Iterable<? extends X> iterable;
    
    private Iter(Iterable<? extends X> iterable) {
      this.iterable = iterable;
    }

    @Override
    public Iterator<Step<X>> iterator() {
      return new Iterator<Step<X>>() {
        final Iterator<? extends X> iter = iterable.iterator();
        final Step<X> step = new Step<>(this);
        @Override
        public boolean hasNext() {
          return iter.hasNext();
        }

        @Override
        public Step<X> next() {
          return step.update(iter.next());
        }

        @Override
        public void remove() {
          iter.remove();
        }
      };
    }
  }
  
  public static <X> Iterable<Step<X>> over(Iterable<? extends X> iterable) {
    return new Iter<X>(iterable);
  }
  
}
