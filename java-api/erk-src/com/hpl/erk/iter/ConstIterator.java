/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.iter;

import java.util.Iterator;

/**
 * An {@link Iterator} for the common case where {@link #remove()} makes no sense.  Throws {@link UnsupportedOperationException}.
 * <p/>
 * Also provides a static {@link #masking(Iterator<T>)} method that takes an unsafe iterator and creates a <code>ConstIterarator</code>.
 * This is useful when you want to hand out an iterator for an internal data structure, but you don't want to worry about somebody
 * calling <code>remove()</code> on it.
 * @author Evan Kirshenbaum
 *
 * @param <T>
 */
public abstract class ConstIterator<T> implements Iterator<T> {
  @Override
  final public void remove() {
    throw new UnsupportedOperationException();
  }
  
  public static <T> ConstIterator<T> masking(final Iterator<T> iter) {
    return new ConstIterator<T>() {
      @Override
      public boolean hasNext() {
        return iter.hasNext();
      }

      @Override
      public T next() {
        return iter.next();
      }};
  }
}
