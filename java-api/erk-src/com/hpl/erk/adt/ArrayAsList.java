/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.adt;

import java.util.AbstractList;
import java.util.Arrays;
import java.util.RandomAccess;

/**
 * Like {@link Arrays#asList(array)}, but actually tells you that it's RandomAccess
 * @author Evan Kirshenbaum
 *
 * @param <E> the array element type
 */
public class ArrayAsList<E> extends AbstractList<E> implements RandomAccess
{
  private final E[] a;

  ArrayAsList(E[] array) {
    if (array==null)
      throw new NullPointerException();
    a = array;
  }

  public int size() {
    return a.length;
  }

  public Object[] toArray() {
    return a.clone();
  }

  public <T> T[] toArray(T[] a) {
    int size = size();
    if (a.length < size) {
      @SuppressWarnings("unchecked")
      final Class<? extends T[]> arrayClass = (Class<? extends T[]>) a.getClass();
      return Arrays.copyOf(this.a, size,
                           arrayClass);
    }
    System.arraycopy(this.a, 0, a, 0, size);
    if (a.length > size)
      a[size] = null;
    return a;
  }

  public E get(int index) {
    return a[index];
  }

  public E set(int index, E element) {
    E oldValue = a[index];
    a[index] = element;
    return oldValue;
  }

  public int indexOf(Object o) {
    if (o==null) {
      for (int i=0; i<a.length; i++)
        if (a[i]==null)
          return i;
    } else {
      for (int i=0; i<a.length; i++)
        if (o.equals(a[i]))
          return i;
    }
    return -1;
  }

  public boolean contains(Object o) {
    return indexOf(o) != -1;
  }
  
  public static <E> ArrayAsList<E> of(E[] elts) {
    return new ArrayAsList<>(elts);
  }
}
