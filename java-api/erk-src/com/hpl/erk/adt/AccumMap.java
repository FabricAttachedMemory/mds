/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.adt;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hpl.erk.TopN;
import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.Functions;
import com.hpl.erk.func.Reducer;

public abstract class AccumMap<K,E,V> implements Map<K, V> {
  protected abstract V computeNewVal(V oldVal, E updateVal);

  private final Map<K, V> map;

  protected AccumMap(Map<K, V> map) {
    this.map = map;
  }

  public int size() {
    return map.size();
  }

  public boolean isEmpty() {
    return map.isEmpty();
  }

  public boolean containsKey(Object key) {
    return map.containsKey(key);
  }

  public boolean containsValue(Object value) {
    return map.containsValue(value);
  }

  public V get(Object key) {
    V val = map.get(key);
    if (val != null) {
      return val;
    }
    return missingVal();
  }

  public V put(K key, V value) {
    return map.put(key, value);
  }

  public V remove(Object key) {
    return map.remove(key);
  }

  public void putAll(Map<? extends K, ? extends V> m) {
    map.putAll(m);
  }

  public void clear() {
    map.clear();
  }

  public Set<K> keySet() {
    return map.keySet();
  }

  public Collection<V> values() {
    return map.values();
  }

  public Set<java.util.Map.Entry<K, V>> entrySet() {
    return map.entrySet();
  }

  public boolean equals(Object o) {
    return map.equals(o);
  }

  public int hashCode() {
    return map.hashCode();
  }
  
  @Override
  public String toString() {
    return map.toString();
  }
  
  public V see(K key, E updateVal) {
    V val;
    if (map.containsKey(key)) {
      val = computeNewVal(map.get(key), updateVal);
    } else {
      val = initialVal(updateVal);
    }
    map.put(key, val);
    return val;
  }
  
  protected V initialVal(E updateVal) {
    return computeNewVal(missingVal(), updateVal);
  }
  
  protected V missingVal() {
    return null;
  }
  
  public static <K, E, V> AccumMap<K,E,V> using(Map<K,V> map, final Reducer<E, V> updater, final NullaryFunc<? extends V> missingVal) {
    return new AccumMap<K, E, V>(map) {

      @Override
      protected V computeNewVal(V oldVal, E updateVal) {
        return updater.update(oldVal, updateVal);
      }
      
      @Override
      protected V missingVal() {
        return missingVal.call();
      }
    };
  }
  
  public static <K, E, V> AccumMap<K,E,V> using(Map<K,V> map, final Reducer<? super E, V> updater, final V missingVal) {
    return new AccumMap<K, E, V>(map) {

      @Override
      protected V computeNewVal(V oldVal, E updateVal) {
        return updater.update(oldVal, updateVal);
      }
      
      @Override
      protected V missingVal() {
        return missingVal;
      }
    };
  }
  public static <K, E, V> AccumMap<K,E,V> using(Map<K,V> map, final Reducer<E, V> updater) {
    return new AccumMap<K, E, V>(map) {

      @Override
      protected V computeNewVal(V oldVal, E updateVal) {
        return updater.update(oldVal, updateVal);
      }
      
    };
  }
  
  public static <K,V extends Comparable<? super V>> AccumMap<K,V,V> min(Map<K, V> map) {
    return using(map, Functions.<V>min());
  }
  public static <K, V> AccumMap<K,V,V> min(Map<K,V> map, Comparator<? super V> cptr) {
    return using(map, Functions.<V>min(cptr));
  }
  public static <K,V extends Comparable<? super V>> AccumMap<K,V,V> min() {
    return using(new HashMap<K,V>(), Functions.<V>min());
  }
  public static <K, V> AccumMap<K,V,V> min(Comparator<? super V> cptr) {
    return using(new HashMap<K,V>(), Functions.<V>min(cptr));
  }
  public static <K,V extends Comparable<? super V>> AccumMap<K,V,V> max(Map<K, V> map) {
    return using(map, Functions.<V>max());
  }
  public static <K, V> AccumMap<K,V,V> max(Map<K,V> map, Comparator<? super V> cptr) {
    return using(map, Functions.<V>max(cptr));
  }
  public static <K,V> AccumMap<K,V,Set<V>> unique() {
    Map<K,Set<V>> map = new HashMap<K, Set<V>>();
    Reducer<V,Set<V>> reducer = new Reducer<V, Set<V>>() {
      @Override
      public Set<V> update(Set<V> old, V current) {
        if (old == null || old.isEmpty()) {
          old = new HashSet<>();
        }
        old.add(current);
        return old;
      }};
    return using(map, reducer, Collections.<V>emptySet());
  }
  public static <K,V> AccumMap<K,V,List<V>> all() {
    Map<K, List<V>> map = new HashMap<K, List<V>>();
    Reducer<V,List<V>> reducer = new Reducer<V, List<V>>() {
      @Override
      public List<V> update(List<V> old, V current) {
        if (old == null || old.isEmpty()) {
          old = new ArrayList<>();
        }
        old.add(current);
        return old;
      }};
    return using(map, reducer, Collections.<V>emptyList());
  }
  public static <K,V extends Comparable<? super V>> AccumMap<K,V,TopN<V>> min(final int n) {
    Map<K, TopN<V>> map = new HashMap<K, TopN<V>>();
    Reducer<V, TopN<V>> reducer = new Reducer<V, TopN<V>>() {
      @Override
      public TopN<V> update(TopN<V> old, V current) {
        if (old == null || old.isEmpty()) {
          old = new TopN<>(n);
        }
        old.add(current);
        return old;
      }};
    return using(map, reducer, (TopN<V>)null);
  }
  public static <K,V> AccumMap<K,V,TopN<V>> min(final int n, final Comparator<? super V> cptr) {
    Map<K, TopN<V>> map = new HashMap<K, TopN<V>>();
    Reducer<V, TopN<V>> reducer = new Reducer<V, TopN<V>>() {
      @Override
      public TopN<V> update(TopN<V> old, V current) {
        if (old == null || old.isEmpty()) {
          old = new TopN<>(n, cptr);
        }
        old.add(current);
        return old;
      }};
    return using(map, reducer, (TopN<V>)null);
  }
}
