/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.adt;

import java.io.Serializable;
import java.util.AbstractMap;
import java.util.AbstractSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import cern.colt.list.IntArrayList;
import cern.colt.list.adapter.IntListAdapter;
import cern.colt.map.OpenIntObjectHashMap;

import com.hpl.erk.util.ObjUtils;

public class IntKeyMap<V> extends AbstractMap<Integer, V> implements Serializable {

  private static final long	serialVersionUID	= 6483755210297868326L;

  private OpenIntObjectHashMap map;
  
  public IntKeyMap() {
    map = new OpenIntObjectHashMap();
  }
  
  public IntKeyMap(int initialCapacity) {
    map = new OpenIntObjectHashMap(initialCapacity);
  }
  
  public IntKeyMap(int initialCapacity, double minLoadFactor, double maxLoadFactor) {
    map = new OpenIntObjectHashMap(initialCapacity, minLoadFactor, maxLoadFactor);
  }
  
  public IntKeyMap(Map<? extends Integer, ? extends V> m) {
    map = new OpenIntObjectHashMap(m.size());
    putAll(m);
  }

  class Entry implements Map.Entry<Integer, V> {
    final int key;

    public Entry(Integer key) {
      this.key = key;
    }

    @Override
    public Integer getKey() {
      return key;
    }

    @Override
    public V getValue() {
      return get(key);
    }

    @Override
    public V setValue(V value) {
      return put(key, value);
    }
    
  }
  
  
  @Override
  public Set<Map.Entry<Integer,V>> entrySet() {
    return new AbstractSet<Map.Entry<Integer,V>>() {
      final IntArrayList keys = map.keys();

      @Override
      public Iterator<Map.Entry<Integer, V>> iterator() {
        return new Iterator<Map.Entry<Integer,V>>() {
          int lastKey = -1;
          @SuppressWarnings("unchecked")
		Iterator<Integer> iter = new IntListAdapter(keys).iterator();

          @Override
          public boolean hasNext() {
            return iter.hasNext();
          }

          @Override
          public Map.Entry<Integer, V> next() {
            return new Entry(lastKey = iter.next());
          }

          @Override
          public void remove() {
            removeKey(lastKey);
          }
        };
      }

      @Override
      public int size() {
        return IntKeyMap.this.size();
      }

    };
  }

  @Override
  public int size() {
    return map.size();
  }

  @Override
  public boolean containsValue(Object value) {
    return map.containsValue(value);
  }
  
  public boolean containsKey(int key) {
    return map.containsKey(key);
  }

  @Override
  public boolean containsKey(Object key) {
    if (key instanceof Integer) {
      return map.containsKey((Integer)key);
    }
    return false;
  }
  

  @SuppressWarnings("unchecked")
  public V get(int key) {
    return (V)map.get(key);
  }

  @Override
  public V get(Object key) {
    if (key instanceof Integer) {
      long asInt = (Integer)key;
      return get(asInt);
    }
    return null;
  }
  
  public boolean putQuick(int key, V value) {
    return map.put(key, value);
  }
  public V put(int key, V value) {
    V old = get(key);
    putQuick(key, value);
    return old;
  }

  @Override
  public V put(Integer key, V value) {
    return put((int)key, value);
  }
  
  public boolean removeKey(int key) {
    return map.removeKey(key);
  }
  
  public V remove(int key) {
    V old = get(key);
    removeKey(key);
    return old;
  }

  @Override
  public V remove(Object key) {
    return remove((long)key);
  }

  @Override
  public void clear() {
    map.clear();
  }

  @Override
  protected IntKeyMap<V> clone() throws CloneNotSupportedException {
    IntKeyMap<V> clone = ObjUtils.castClone(this, super.clone());
    clone.map = (OpenIntObjectHashMap) map.clone();
    return clone;
  }
  
  

}
