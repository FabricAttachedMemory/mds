/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.adt;

import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.RandomAccess;

import cern.colt.list.ObjectArrayList;

/**
 * Like {@link ArrayList}, but with an extra {@link #elements()} method that gives access to the underlying array.
 * 
 * @author EvanKirshenbaum
 *
 * @param <E>
 */
public class BackedList<E> extends AbstractList<E> implements RandomAccess {
  private final ObjectArrayList list;
  
  public BackedList() {
    list = new ObjectArrayList();
  }
  
  public BackedList(int initialCapacity) {
    list = new ObjectArrayList(initialCapacity);
  }
  
  public BackedList(E[] array) {
    list = new ObjectArrayList(array);
  }
  
  public BackedList(Collection<? extends E> coll) {
    this();
    addAll(coll);
  }

  @SuppressWarnings("unchecked")
  @Override
  public E get(int index) {
    return (E)list.getQuick(index);
  }

  @Override
  public int size() {
    return list.size();
  }
  
  public boolean add(E elt) {
    list.add(elt);
    return true;
  }
  
  public E set(int index, E element) {
    E old = get(index);
    list.set(index, element);
    return old;
  };
  
  /**
   * Access the array underlying the list.  Note that this is only guaranteed to be the array
   * underlying the list until there is some modification to the list that changes its size.
   * In particular, it will be disconnected from the list either if the list grows or if the list 
   * shrinks and {@link #elements()} is called again.  If the list shrinks, elements in the array
   * from {@link #size()} on are not part of the list.
   * @return the underlying array.
   */
  @SuppressWarnings("unchecked")
  public E[] elements() {
    list.trimToSize();
    return (E[]) list.elements();
  }
  
}
