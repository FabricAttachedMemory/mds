/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk;

public class IOUtils {
  public static String formatGrouped(long n, String sep) {
    String s = Long.toString(n);
    if (n >= 1_000 || n <= -1_000) {
      int len = s.length();
      int groupLen = len % 3;
      if (n < 0 && groupLen == 1) {
        groupLen = 4;
      }
      if (groupLen == 0) {
        groupLen = 3;
      }
      StringBuilder bldr = new StringBuilder();
      for (int i=0; i<len; i+=groupLen) {
        if (bldr.length() > 0) {
          bldr.append(sep);
          groupLen = 3;
        } 
        bldr.append(s.substring(i, i+groupLen));
      }
      s = bldr.toString();
    }
    return s;
  }

  /*
   * Long.parseLong(s, 16) fails if this would result in a negative number
   */
  public static long readHex(String s) {
    final int n = s.length();
    if (n < 16) {
      return Long.parseLong(s);
    }
    if (n > 16) {
      s = s.substring(n-16);
    }
    long high = Long.parseLong(s.substring(0,1), 16);
    long rest = Long.parseLong(s.substring(1), 16);
    final long val = (high << 60) | rest;
    return val;
  }
  
  
  
}
