/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.files;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Path;

import com.hpl.erk.files.FileOption.OptionSet;

public class FileUtil {
  
  public static InputStream inStream(File file, FileOption...options) throws IOException {
    return StreamDecompressor.decompress(file);
  }
  public static InputStream inStream(Path path, FileOption...options) throws IOException {
    return inStream(path.toFile());
  }
  public static InputStream inStream(String fileName, FileOption...options) throws IOException {
    return inStream(new File(fileName));
  }
  
  public static BufferedReader reader(InputStream istream, FileOption...options) {
    OptionSet oset = new OptionSet(options);
    Charset charset = oset.charset();
    InputStreamReader rdr = charset == null ? new InputStreamReader(istream) : new InputStreamReader(istream, charset);
    int bufSize = oset.bufferSize();
    return bufSize == 0 ? new BufferedReader(rdr) : new BufferedReader(rdr, bufSize);
  }
  public static BufferedReader reader(File file, FileOption ...options) throws IOException {
    return reader(inStream(file, options), options);
  }
  public static BufferedReader reader(Path path, FileOption...options) throws IOException {
    return reader(inStream(path, options), options);
  }
  public static BufferedReader reader(String fileName, FileOption...options) throws IOException {
    return reader(inStream(fileName, options), options);
  }
  
  
  public static OutputStream outStream(File file, FileOption...options) throws IOException {
    return StreamCompressor.compressTo(file);
  }
  public static OutputStream outStream(Path path, FileOption...options) throws IOException {
    return outStream(path.toFile());
  }
  public static OutputStream outStream(String fileName, FileOption...options) throws IOException {
    return outStream(new File(fileName));
  }
  
  
  
  public static BufferedWriter writer(OutputStream ostream, FileOption...options) {
    OptionSet oset = new OptionSet(options);
    Charset charset = oset.charset();
    OutputStreamWriter wrtr = charset == null ? new OutputStreamWriter(ostream) : new OutputStreamWriter(ostream, charset);
    int bufSize = oset.bufferSize();
    final boolean leftOpen = oset.leftOpen();
    if (bufSize ==0) {
      return new BufferedWriter(wrtr) {
        @Override
        public void close() throws IOException {
          if (leftOpen) {
            flush();
          } else {
            super.close();
          }
        }
      };
    } else {
      return new BufferedWriter(wrtr, bufSize) {
        @Override
        public void close() throws IOException {
          if (leftOpen) {
            flush();
          } else {
            super.close();
          }
        }
      };
    }
  }
  public static BufferedWriter writer(File file, FileOption...options) throws IOException {
    return writer(outStream(file, options));
  }
  public static BufferedWriter writer(Path path, FileOption...options) throws IOException {
    return writer(outStream(path, options), options);
  }
  public static BufferedWriter writer(String fileName, FileOption...options) throws IOException {
    return writer(outStream(fileName, options), options);
  }  
  
  public static PrintWriter printer(OutputStream ostream, FileOption...options) {
    BufferedWriter wrtr = writer(ostream, options);
    OptionSet oset = new OptionSet(options);
    return new PrintWriter(wrtr, oset.isAutoFlush());
  }
  public static PrintWriter printer(File file, FileOption...options) throws IOException {
    return printer(outStream(file, options));
  }
  public static PrintWriter printer(Path path, FileOption...options) throws IOException {
    return printer(outStream(path, options), options);
  }
  public static PrintWriter printer(String fileName, FileOption...options) throws IOException {
    return printer(outStream(fileName, options), options);
  }  
  
  public static DataInputStream dataInput(InputStream istream, FileOption...options) {
    OptionSet oset = new OptionSet(options);
    int bsize = oset.bufferSize();
    final BufferedInputStream bin = bsize == 0 ? new BufferedInputStream(istream) : new BufferedInputStream(istream, bsize);
    final DataInputStream data = new DataInputStream(bin);
    return data;
  }
  public static DataInputStream dataInput(File file, FileOption...options) throws IOException {
    return dataInput(inStream(file, options), options);
  }
  public static DataInputStream dataInput(Path path, FileOption...options) throws IOException {
    return dataInput(inStream(path, options), options);
  }
  public static DataInputStream dataInput(String fileName, FileOption...options) throws IOException {
    return dataInput(inStream(fileName, options), options);
  }
  
  public static DataOutputStream dataOutput(OutputStream ostream, FileOption...options) {
    OptionSet oset = new OptionSet(options);
    int bsize = oset.bufferSize();
    final BufferedOutputStream bout = bsize == 0 ? new BufferedOutputStream(ostream) : new BufferedOutputStream(ostream, bsize);
    final DataOutputStream data = new DataOutputStream(bout);
    return data;
  }
  
  public static DataOutputStream dataOutput(File file, FileOption...options) throws IOException {
    return dataOutput(outStream(file, options), options);
  }
  public static DataOutputStream dataOutput(Path path, FileOption...options) throws IOException {
    return dataOutput(outStream(path, options), options);
  }
  public static DataOutputStream dataOutput(String fileName, FileOption...options) throws IOException {
    return dataOutput(outStream(fileName, options), options);
  }

  
  /** Ensures the file's parent directory is created via mkdirs(). */
  public static boolean ensureDirs(File file) {
    return file.getParentFile().mkdirs();
  }
  
  /** Ensures the file's parent directory is created via mkdirs(). */
  public static boolean ensureDirs(Path file) {
    return ensureDirs(file.toFile());
  }
}
