/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.func;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.hpl.erk.util.CollUtils;

/** General CSV parser (or tab-separated value parser).
 * 
 * <p> 
 * CSVProcess does handle multi-line strings, such as Excel's CSV handler reads and writes, e.g.:
 * <pre>
 * 2,"two 
 * lines long"
 * 3,"next row"
 * </pre>
 * 
 * The semantics of Process<In,Out> are that for each In it sees, it outputs a list of Outs.  
 * This allows it to decide that one input corresponds to one, zero, or multiple outputs.  
 * At line 67 of CSVProcess, if it gets to the end of the line and it's in a quoted string 
 * (and hasn't just seen a single double quote), it adds a newline onto the end of the 
 * current field and returns an empty list.  But it remembers what it's done so far so that 
 * next time it will pick up where it left off.  
 * (If it's in the middle of a line when close() is called, it terminates the line and returns it.)
 * 
 * Warning: When Excel (up to 2013) exports a .CSV, it uses the default Windows character encoding,
 * which clobbers many characters.  Instead, if you export as "Unicode" you get UCS-2 byte encoding
 * with tab-separated values.
 * 
 * 
 * <p>
 * keepEmptyFinalFields (default true): if set to false, then the following input line will result in just 3 fields instead of 4:
 * <pre>
 * A,"","",""
 * </pre>
 * Apparently some people want this behavior.  
 */
public class CSVProcess implements Process<String, String[]> {

	public enum WS { STRIP, KEEP };
	final List<String> fields = new ArrayList<>();
	final StringBuffer currentField = new StringBuffer();
	final char	separator;
	final boolean stripWS;
	final boolean keepEmptyFinalFields;
	boolean inQuoted = false;
	boolean initial = true;
	boolean singleDoubleQuote = false;
	int wsStarts = -1;
	boolean nonEmptyLine = false;
	
	public CSVProcess(char separator, WS wsPolicy, boolean keepEmptyFinalFields) {
	  this.separator = separator;
	  stripWS = wsPolicy == WS.STRIP;
	  this.keepEmptyFinalFields = keepEmptyFinalFields;
	}

	public CSVProcess(char separator, WS wsPolicy) {
		this(separator,wsPolicy,true);
	}
	
	public CSVProcess(char separator) {
	  this(separator,WS.KEEP);
	}
	
	public CSVProcess(WS wsPolicy) {
	  this(',',wsPolicy);
	}
	
	public CSVProcess() {
	  this(',',WS.KEEP);
	}
	
	@Override
	public List<String[]> process(String line) {
		int n = line.length();
		for (int i=0; i<n; i++) {
			char c = line.charAt(i);
			if (stripWS && Character.isWhitespace(c)) {
				if (!initial && wsStarts < 0) {
					wsStarts = i;
				}
				continue;
			}
			nonEmptyLine = true;
			if (c == separator && (!inQuoted || singleDoubleQuote)) {
				fields.add(currentField.toString());
				currentField.setLength(0);
				wsStarts = -1;
				initial = true;
				singleDoubleQuote = false;
				inQuoted = false;
				continue;
			}
			if (wsStarts >= 0) {
				currentField.append(line.subSequence(wsStarts, i));
				wsStarts = -1;
			}
			if (c == '"') {
				if (initial) {
					inQuoted = true;
					initial = false;
					continue;
				}
				// if we're not inQuoted something went wrong
				if (singleDoubleQuote) {
					singleDoubleQuote = false;
				} else {
					singleDoubleQuote = true;
					continue;
				}
			}
			currentField.append(c);
			initial = false;
		}
		
		if (inQuoted && !singleDoubleQuote) {
			currentField.append('\n');
			wsStarts = -1;
			return Collections.emptyList();
		}
		if (nonEmptyLine && (keepEmptyFinalFields || currentField.length() > 0)) {
			fields.add(currentField.toString());
			currentField.setLength(0);
		}
		wsStarts = -1;
		initial = true;
		singleDoubleQuote = false;
		nonEmptyLine = false;
		inQuoted = false;
		String[] array = CollUtils.arrayFrom(fields, String.class);
		fields.clear();
		return Collections.singletonList(array);
	}
	
	@Override
	public List<String[]> close() {
      if (nonEmptyLine && (keepEmptyFinalFields || currentField.length() > 0)) {
        fields.add(currentField.toString());
        String[] array = fields.toArray(new String[fields.size()]);
        return Collections.singletonList(array);
      }
      return Collections.emptyList();
	}

}
