/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.func;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import com.hpl.erk.config.PType;
import com.hpl.erk.config.type.TypeBase;

public class Param {
  enum Kind { 
    REQUIRED {
      @Override
      public <T> String inArgList(Param param) {
        return String.format("%s %s", param.typeBase, param.name);
      }
    }, 
    OPTIONAL {
      @Override
      public <T> String inArgList(Param param) {
        return String.format("%s %s=%s", param.typeBase, param.name, param.formatDefault());
      }
    }, 
    REST {
      @Override
      public <T> String inArgList(Param param) {
//        SeqType<?, ?> st = (SeqType<?,?>)param.typeBase;
//        return String.format("%s... %s", st.elementType(), param.name);
        return String.format("%s... %s", param.typeBase, param.name);
      }
    }, 
    KEYWORD {
      @Override
      public <T> String inArgList(Param param) {
        return String.format("%s %s=%s", param.typeBase, param.name, param.formatDefault());
      }
    }
    ;
    public abstract <T> String inArgList(Param param);
  }
  public final String name;
  public final Kind kind;
  public final TypeBase typeBase;
  public String help;
  
  private Param(String name, TypeBase type, Kind kind) {
    this.name = name;
    this.kind = kind;
    this.typeBase = type;
  }
  
  private static class DefaultableParam<T> extends Param {
    private final PType<T> type;
    private final T defaultVal;
    public DefaultableParam(String name, PType<T> type, T defaultVal, Kind kind) {
      super(name, type, kind);
      this.type = type;
      this.defaultVal = defaultVal;
    }
    
    @Override
    protected String formatDefault() {
      return type.format(defaultVal);
    }
    
    @Override
    public void addDefault(Map<String, Object> map) {
      addDefault(map, defaultVal);
    }
  }
  
  private static class NullDefaultParam extends Param {
    public NullDefaultParam(String name, TypeBase type, Kind kind) {
      super(name, type, kind);
    }
    
    @Override
    protected String formatDefault() {
      return "null";
    }
    
    @Override
    public void addDefault(Map<String, Object> map) {
      addDefault(map, null);
    }
  }
  
  private static class RestParam extends Param {
    private static final List<?> DEFAULT = Collections.EMPTY_LIST;
    public RestParam(String name, TypeBase type) {
      super(name, type, Kind.REST);
    }
    @Override
    public void addDefault(Map<String, Object> map) {
      addDefault(map, DEFAULT);
    }
  }
  
  protected String formatDefault() {
    return null;
  }
  
  public Param help(String help) {
    this.help = help;
    return this;
  }
  
  public String help() {
    return help;
  }
  
  public void addDefault(Map<String, Object> map) {
    // nothing to do
  }
  
  
  public static Param req(String name, TypeBase type) {
    return new Param(name, type, Kind.REQUIRED);
  }
  public static <T> Param req(String name, Class<T> clss) {
    return req(name, PType.of(clss));
  }
  public static Param opt(String name, TypeBase type) {
    return new NullDefaultParam(name, type, Kind.OPTIONAL);
  }
  public static <T> Param opt(String name, PType<T> type, T defaultVal) {
    return new DefaultableParam<T>(name, type, defaultVal, Kind.OPTIONAL);
  }
  public static <T> Param opt(String name, Class<T> clss, T defaultVal) {
    return opt(name, PType.of(clss), defaultVal);
  }
  public static Param kwd(String name, TypeBase type) {
    return new NullDefaultParam(name, type, Kind.KEYWORD);
  }
  public static <T> Param kwd(String name, PType<T> type, T defaultVal) {
    return new DefaultableParam<T>(name, type, defaultVal, Kind.KEYWORD);
  }
  public static <T> Param kwd(String name, Class<T> clss, T defaultVal) {
    return kwd(name, PType.of(clss), defaultVal);
  }
  public static <T> Param rest(String name, TypeBase type) {
    return new RestParam(name, type);
  }
  public static <T> Param rest(String name, Class<T> clss) {
    return rest(name, PType.of(clss));
  }

  public void addDefault(Map<String, Object> map, final Object val) {
    if (!map.containsKey(name)) {
      map.put(name, val);
    }
  }

  @Override
  public String toString() {
    return String.format("%s %s", kind, kind.inArgList(this));
  }
  
  public String inArgList() {
    return kind.inArgList(this);
  }

}
