/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.io.File;
import java.nio.file.Path;

import com.hpl.erk.ReadableString;
import com.hpl.erk.TrueOnce;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.ex.ReadError;

public class FileType extends SimpleType<File> {
  public FileType() {
    super(File.class);
  }

  @Override
  public File readVal(ReadableString input, String valTerminators) throws ReadError {
//    int resetTo = input.getCursor();
    input.skipWS();
    String name = readQuoted(input, '\"', '\"');
    if (name != null) {
      name = readQuoted(input, '\'', '\'');
    }
    if (name == null) {
      name = readUnquoted(input, valTerminators);
    }
    return new File(name);
  }

  private static final TrueOnce needInit = new TrueOnce();
  public static void ensureConfigParams() {
    if (!needInit.check()) {
      return;
    }
    final PType<File> type = PType.of(File.class);
    type.new ConversionFrom<String>(PType.of(String.class)) {
      @Override
      public File convert(String name) {
        return new File(name);
      }
    }.register();
    type.new ConversionFrom<Path>(PType.of(Path.class)) {
      @Override
      public File convert(Path path) {
        return path.toFile();
      }
    }.register();
  }

  @Override
  public String syntax() {
    return "A file whose name is specified as " +
    		"sequence of characters, optionally delimited by single or double quotes.  If quotes are not used, " +
        "the string runs until the first comma or closing bracket if in a sequence or as far as possible otherwise. " +
        "Within a string, backslash can be used to escape the following character (including commas, brackets, and" +
        "quotes) " +
        "or to include a newline \"\\n\" or tab \"\\t\".";
  }
  
}
