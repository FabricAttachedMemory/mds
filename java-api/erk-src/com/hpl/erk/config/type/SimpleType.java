/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.hpl.erk.adt.IdentityHashSet;
import com.hpl.erk.config.PType;
import com.hpl.erk.types.TypeToken;


public class SimpleType<C> extends PType<C> {
  private static Map<String, Set<SimpleType<?>>> byClassName;
  
  private static Map<String, Set<SimpleType<?>>> byClassName() {
    if (byClassName == null) {
      byClassName = Collections.synchronizedMap(new HashMap<String, Set<SimpleType<?>>>());
    }
    return byClassName;
  }
  
  public SimpleType(Class<C> clss) {
    this(TypeToken.find(clss));
  }
  public SimpleType(TypeToken token) {
    super(token);
  }

  public SimpleType<C> register() {
    super.register();
    String name = typeToken.toString().toLowerCase();
    final Map<String, Set<SimpleType<?>>> map = byClassName();
    Set<SimpleType<?>> set = map.get(name);
    if (set == null) {
      set = new IdentityHashSet<>();
      map.put(name, set);
    }
    set.add(this);
    return this;
  };
  

  @Override
  public List<PType<?>> bindings() {
    return Collections.emptyList();
  }

  public static Set<SimpleType<?>> lookup(String name) {
    Set<SimpleType<?>> set = byClassName().get(name);
    if (set == null) {
      return Collections.emptySet();
    }
    return set;
  }


}
