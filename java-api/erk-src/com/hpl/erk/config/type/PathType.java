/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import com.hpl.erk.ReadableString;
import com.hpl.erk.TrueOnce;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.ex.ReadError;
import com.hpl.erk.config.func.ArgSet;
import com.hpl.erk.config.func.Param;

public class PathType extends SimpleType<Path> {
  public PathType() {
    super(Path.class);
  }

  @Override
  public Path readVal(ReadableString input, String valTerminators) throws ReadError {
//    int resetTo = input.getCursor();
    input.skipWS();
    String name = readQuoted(input, '\"', '\"');
    if (name != null) {
      name = readQuoted(input, '\'', '\'');
    }
    if (name == null) {
      name = readUnquoted(input, valTerminators);
    }
    return Paths.get(name);
  }

  private static final TrueOnce needInit = new TrueOnce();
  public static void ensureConfigParams() {
    if (!needInit.check()) {
      return;
    }
    final PType<Path> type = PType.of(Path.class);
    type.new ConversionFrom<String>(PType.of(String.class)) {
      @Override
      public Path convert(String name) {
        return Paths.get(name);
      }
    }.register();
    type.new ConversionFrom<File>(PType.of(File.class)) {
      @Override
      public Path convert(File val) {
        return val.toPath();
      };
    }.register();
    
    type.new CFunc("path",
                   Param.req("first", Path.class),
                   Param.rest("rest", Path.class)) {
      @Override
      public Path make(ArgSet args) {
        Path first = args.<Path>get("first");
        List<Path> rest = args.<List<Path>>get("rest");
        Path p = first == null ? Paths.get(".") : first;
        for (Path cpt : rest) {
          if (cpt != null) {
            p = p.resolve(cpt);
          }
        }
        return p;
      }}
    .setHelp("Concatenate a path");

    type.new CFunc("path",
                   Param.req("array", PType.arrayOf(Path.class))) {
      @Override
      public Path make(ArgSet args) {
        Path[] array = args.<Path[]>get("array");
        Path p = Paths.get(".");
        for (Path cpt : array) {
          if (cpt != null) {
            p = p.resolve(cpt);
          }
        }
        return p;
      }}
    .setHelp("Concatenate a path");
    

    
  }

  @Override
  public String syntax() {
    return "A file whose name is specified as " +
    		"sequence of characters, optionally delimited by single or double quotes.  If quotes are not used, " +
        "the string runs until the first comma or closing bracket if in a sequence or as far as possible otherwise. " +
        "Within a string, backslash can be used to escape the following character (including commas, brackets, and" +
        "quotes) " +
        "or to include a newline \"\\n\" or tab \"\\t\".";
  }
  
}
