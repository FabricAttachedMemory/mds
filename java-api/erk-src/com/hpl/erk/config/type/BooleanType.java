/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.util.List;
import java.util.regex.Pattern;

import com.hpl.erk.ReadableString;
import com.hpl.erk.TrueOnce;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.ReadDelayedVal;
import com.hpl.erk.config.ex.ReadError;
import com.hpl.erk.config.func.ArgSet;
import com.hpl.erk.config.func.Param;




public class BooleanType extends SimpleType<Boolean> {
  
  

  protected BooleanType() {
    super(Boolean.class);
  }

  private static final TrueOnce needInit = new TrueOnce();
  static void ensureConfigParams() {
    if (!needInit.check()) {
      return;
    }
    
    final PType<Boolean> type = PType.of(Boolean.class);
    
    type.new CFunc("and", Param.req("first", boolean.class), Param.rest("booleans", boolean.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Boolean first = args.<Boolean>get("first");
        if (first != null && !first) {
          return false;
        }
        List<Boolean> bools = args.<List<Boolean>>get("booleans");
        for (Boolean b : bools) {
          if (b != null && !b) {
            return false;
          }
        }
        return true;
      }
    }
    .setHelp("Logical AND of boolean values");

    type.new CFunc("and", Param.req("booleans", PType.arrayOf(boolean.class)))
    {
      @Override
      public Boolean make(ArgSet args) {
        Boolean[] bools = args.<Boolean[]>get("booleans");
        if (bools == null) {
          return null;
        }
        for (Boolean b : bools) {
          if (b != null && !b) {
            return false;
          }
        }
        return true;
      }
    }
    .setHelp("Logical AND of boolean values");

    type.new CFunc("or", Param.req("first", boolean.class), Param.rest("booleans", boolean.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Boolean first = args.<Boolean>get("first");
        if (first != null && first.booleanValue()) {
          return true;
        }
        List<Boolean> bools = args.<List<Boolean>>get("booleans");
        for (Boolean b : bools) {
          if (b != null && b.booleanValue()) {
            return true;
          }
        }
        return false;
      }
    }
    .setHelp("Logical OR of boolean values");
    type.new CFunc("or", Param.req("booleans", PType.arrayOf(boolean.class)))
    {
      @Override
      public Boolean make(ArgSet args) {
        Boolean[] bools = args.<Boolean[]>get("booleans");
        if (bools == null) {
          return null;
        }
        for (Boolean b : bools) {
          if (b != null && b.booleanValue()) {
            return true;
          }
        }
        return false;
      }
    }
    .setHelp("Logical OR of boolean values");

    type.new CFunc("xor", Param.req("first", boolean.class), Param.rest("booleans", boolean.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        List<Boolean> bools = args.<List<Boolean>>get("booleans");
        Boolean first = args.<Boolean>get("first");
        boolean val = first != null ? first : false;
        for (Boolean b : bools) {
          if (b != null) {
            val ^= b;
          }
        }
        return val;
      }
    }
    .setHelp("Logical XOR of boolean values");
    type.new CFunc("xor", Param.req("booleans", PType.arrayOf(boolean.class)))
    {
      @Override
      public Boolean make(ArgSet args) {
        Boolean[] bools = args.<Boolean[]>get("booleans");
        if (bools == null) {
          return null;
        }
        boolean val = false;
        for (Boolean b : bools) {
          if (b != null) {
            val ^= b;
          }
        }
        return val;
      }
    }
    .setHelp("Logical XOR of boolean values");

    type.new CFunc("not", Param.req("b", boolean.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Boolean b = args.<Boolean>get("b");
        if (b == null) {
          return null;
        }
        return !b;
      }
    }
    .setHelp("Logical negation of boolean value");

    
    type.new CFunc("lt", Param.req("a", double.class), Param.req("b", double.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Double a = args.<Double>get("a");
        Double b = args.<Double>get("b");
        if (a==null || b == null) {
          return null;
        }
        return a<b;
      }
    }
    .setHelp("Less-than comparison");
  
    type.new CFunc("ne", Param.req("a", double.class), Param.req("b", double.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Double a = args.<Double>get("a");
        Double b = args.<Double>get("b");
        if (a==null || b == null) {
          return null;
        }
        return a==b;
      }
    }
    .setHelp("Not-equal-to comparison");
    type.new CFunc("eq", Param.req("a", double.class), Param.req("b", double.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Double a = args.<Double>get("a");
        Double b = args.<Double>get("b");
        if (a==null || b == null) {
          return null;
        }
        return a==b;
      }
    }
    .setHelp("Equal-to comparison");
    type.new CFunc("gt", Param.req("a", double.class), Param.req("b", double.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Double a = args.<Double>get("a");
        Double b = args.<Double>get("b");
        if (a==null || b == null) {
          return null;
        }
        return a>b;
      }
    }
    .setHelp("Greater-than comparison");
    type.new CFunc("le", Param.req("a", double.class), Param.req("b", double.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Double a = args.<Double>get("a");
        Double b = args.<Double>get("b");
        if (a==null || b == null) {
          return null;
        }
        return a<=b;
      }
    }
    .setHelp("Less-than-or-equal comparison");
  
    type.new CFunc("ge", Param.req("a", double.class), Param.req("b", double.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Double a = args.<Double>get("a");
        Double b = args.<Double>get("b");
        if (a==null || b == null) {
          return null;
        }
        return a>=b;
      }
    }
    .setHelp("Greater-than-or-equal comparison");
    
    type.new CFunc("is_null", Param.req("obj", Object.class))
    {
      @Override
      public Boolean make(ArgSet args) {
        Object a = args.<Object>get("obj");
        return a==null;
      }
    }
    .setHelp("Test against null");
    
    
  }    
  
  private static final Pattern truePat = Pattern.compile("\\s*\\b(?:t|true|y|yes|on|1|\\+)\\b", Pattern.CASE_INSENSITIVE);
  private static final Pattern falsePat = Pattern.compile("\\s*\\b(?:f|false|n|no|off|0|-)\\b", Pattern.CASE_INSENSITIVE);
  @Override
  public Boolean readVal(ReadableString s, String valTerminators) throws ReadError, ReadDelayedVal {
    if (s.consume(truePat) != null) {
      return true;
    }
    if (s.consume(falsePat) != null) {
      return false;
    }
    return super.readVal(s, valTerminators);
  }
  @Override
  public String describe() {
    return "A boolean value";
  }
  
  @Override
  public String toString() {
    return "boolean";
  }
  
  @Override
  public String syntax() {
    return "Case insensitive \"T\", \"True\", \"Y\", \"Yes\", \"On\", \"1\", or \"+\" for true. " +
    		"\"F\", \"False\", \"N\", \"No\", \"Off\", \"0\", or \"-\" for false.";
  }

}
