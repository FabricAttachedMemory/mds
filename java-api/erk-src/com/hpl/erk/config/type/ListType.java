/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import com.hpl.erk.config.PType;
import com.hpl.erk.config.func.ArgSet;
import com.hpl.erk.config.func.Param;
import com.hpl.erk.types.TypeToken;

public class ListType<ET> extends CollType<ET, List<ET>> {
  private static Generic GENERIC = null;
  
  static {
    ListType.generic().new CFunc("union", Param.rest("coll", PType.template(CollectionType.generic(), PType.param(0)))) {
      
      @Override
      public <P1> List<P1> make(PType<P1> p1Type, ArgSet args) {
        List<P1> val = new ArrayList<>();
        for (Collection<P1> list : args.<Collection<P1>>getRest("coll")) {
          val.addAll(list);
        }
        return val;
      }
    };
  }

  
  @SuppressWarnings("rawtypes")
  public static class Generic extends CollType.Generic<List, Object> {
    
    public abstract class CFunc extends CollType.Generic<List, Object>.CFunc {
      @Override
      public abstract <P1> List<P1> make(PType<P1> p1Type, ArgSet args);

      public CFunc(String name, Param... params) {
        super(name, params);
      }

      
    }
    
    private Generic() {
      super(TypeToken.generic(List.class));
    }
    
    public final <ET> PType<List<ET>> of(final PType<ET> eltType) {
      return this.of(PType.<List<ET>>sig(), eltType);
    }
    
    @Override
    public <T extends List, P1> PType<T> makeNewType(Sig<T> sig, TypeToken token, PType<P1> p1Type) {
      @SuppressWarnings("unchecked")
      final PType<T> listType = (PType<T>)new ListType<>(p1Type);
      return listType;
    }
    
    
  }

  protected ListType(PType<ET> eltType) {
    super(generic(), generic().token(eltType), eltType);
  }
  
  @Override
  public List<ET> createEmpty() {
    return new ArrayList<>();
  }
  
  public static Generic generic() {
    if (GENERIC == null) {
      GENERIC = new Generic();
    }
    return GENERIC;
  }
  
  public static <ET> PType<List<ET>> of(PType<ET> eltType) {
    return generic().of(eltType);
  }

}
