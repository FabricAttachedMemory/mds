/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.util.EnumMap;

import com.hpl.erk.config.PType;
import com.hpl.erk.types.TypeToken;

public class EnumMapType<KT extends Enum<KT>,VT> extends MappingType<KT, VT, EnumMap<KT,VT>> {
  private static Generic GENERIC = null;
  
  
  @SuppressWarnings("rawtypes")
  public static class Generic extends MappingType.Generic<EnumMap, Enum<?>, Object> {
    private Generic() {
      super(TypeToken.generic(EnumMap.class));
    }
    
    public final <KT extends Enum<KT>,VT> PType<EnumMap<KT,VT>> of(PType<KT> keyType, PType<VT> valType) {
      return this.of(PType.<EnumMap<KT,VT>>sig(), keyType, valType);
    }

    @Override
    public <T extends EnumMap, P1 extends Enum<?>, P2> PType<T> makeNewType(Sig<T> sig, TypeToken token, PType<P1> p1Type, PType<P2> p2Type) {
      @SuppressWarnings("unchecked")
      final PType<T> listType = (PType<T>)makeUnchecked(p1Type, p2Type);
      return listType;
    }

    private static <ET extends Enum<ET>, VT> EnumMapType<ET,VT> makeUnchecked(PType<? extends Enum<?>> p1Type, PType<VT> p2Type) {
      @SuppressWarnings("unchecked")
      PType<ET> etype = (PType<ET>)p1Type;
      return new EnumMapType<>(etype, p2Type);
    }

  }

  protected EnumMapType(PType<KT> keyType, PType<VT> valType) {
    super(generic(), generic().token(keyType), keyType, valType);
  }
  
  @Override
  public EnumMap<KT, VT> createEmpty() {
    return new EnumMap<>(p1Type.rawClass());
  }
  
  public static Generic generic() {
    if (GENERIC == null) {
      GENERIC = new Generic();
    }
    return GENERIC;
  }
  
  public static <KT extends Enum<KT>,VT> PType<EnumMap<KT,VT>> of(PType<KT> keyType, PType<VT> valType) {
    return generic().of(keyType, valType);
  }

}
