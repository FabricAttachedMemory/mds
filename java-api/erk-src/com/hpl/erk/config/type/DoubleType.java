/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.io.PrintStream;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.hpl.erk.ReadableString;
import com.hpl.erk.TrueOnce;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.ex.CantReadError;
import com.hpl.erk.config.ex.ReadError;
import com.hpl.erk.config.func.ArgSet;
import com.hpl.erk.config.func.Param;
import com.hpl.erk.util.NumUtils;

public class DoubleType extends SimpleType<Double> {
  
  protected DoubleType() {
    super(Double.class);
  }


  static final Pattern decimal = Pattern.compile("([+-]?(?!_)(?=[\\p{Digit}.])[\\p{Digit}_]*(?<!_)(?:\\.[\\p{Digit}][\\p{Digit}_]*(?<!_))?)(%)?"); 
  static final Pattern infinity = Pattern.compile("([+-]?)inf(?:inity)?\\b", Pattern.CASE_INSENSITIVE);
  static final Pattern fraction = Pattern.compile("([+-]?)(?:([0-9][0-9_]*(?<!_))[-+])?([0-9][0-9_]*(?<!_))/([1-9][0-9_]*(?<!_))");
  @Override
  public Double readVal(ReadableString input, String valTerminators) throws ReadError {
    int resetTo = input.getCursor();
    input.skipWS();
    Matcher m = input.consume(infinity);
    if (m != null) {
      String sign = m.group(1);
      if (sign == null || !sign.equals("-")) {
        return Double.POSITIVE_INFINITY;
      }
      return Double.NEGATIVE_INFINITY;
    }
    Double val = readFraction(input, fraction);
    if (val != null) {
      return val;
    }
    val = readDigits(input, decimal);
    if (val != null) {
      return val;
    }
    throw new CantReadError(input, resetTo, this);
  }

  public Double readFraction(ReadableString input, final Pattern re) {
    Matcher m = input.consume(re);
    if (m != null) {
      boolean neg = "-".equals(m.group(1));
      String whole = m.group(2);
      String num = m.group(3).replace("_", "");
      String denom = m.group(4).replace("_", "");
      double n = Double.parseDouble(num);
      double d = Double.parseDouble(denom);
      double val = n/d;
      if (whole != null) {
        val += Double.parseDouble(whole);
      }
      if (neg) {
        val = -val;
      }
      return val;
    }
    return null;
  }
  public Double readDigits(ReadableString input, final Pattern re) {
    Matcher m = input.consume(re);
    if (m != null) {
      String digitString = m.group(1);
      // because both the integer part and the decimal point and what follows
      boolean percent = m.group(2) != null;
      digitString = digitString.replace("_", "");
      double val = Double.parseDouble(digitString);
      if (percent) {
        val /= 100.0;
      }
      return val;
    }
    return null;
  }
  
  @Override
  public String toString() {
    return "double";
  }
  
  private static final TrueOnce needInit = new TrueOnce();
  public static void ensureConfigParams() {
    if (!needInit.check()) {
      return;
    }
    
    final PType<Double> type = PType.of(Double.class);
    
    type.new ConversionFrom<Number>(PType.of(Number.class)) {
      @Override
      public Double convert(Number val) {
        return val == null ? null : val.doubleValue();
      }}.register(); 
    
    
    type.constant("maxDouble", Double.MAX_VALUE)
    .setHelp("Maximum real value");
    
    type.constant("minDouble", Double.MIN_VALUE)
    .setHelp("Minimum real value");
    
    type.constant("pi", Math.PI);
    type.constant("e", Math.E);
    type.constant("NaN", Double.NaN)
    .setHelp("Not a number");

    type.new CFunc("plus",
        Param.req("a", double.class),
        Param.req("b", double.class)) 
        {
          @Override
          public Double make(ArgSet args) {
            double a = args.get(double.class, "a");
            double b = args.get(double.class, "b");
            return a+b;
          }
        }
    .setHelp("Add two reals");

    type.new CFunc("times",
        Param.req("a", double.class),
        Param.req("b", double.class)) 
        {
          @Override
          public Double make(ArgSet args) {
            double a = args.get(double.class, "a");
            double b = args.get(double.class, "b");
            return a*b;
          }
        }
    .setHelp("Multiply two reals");

    type.new CFunc("minus",
        Param.req("a", double.class),
        Param.req("b", double.class)) 
        {
          @Override
          public Double make(ArgSet args) {
            double a = args.get(double.class, "a");
            double b = args.get(double.class, "b");
            return a-b;
          }
        }
    .setHelp("Subtract one Double from another");
    
    type.new CFunc("div",
        Param.req("a", double.class),
        Param.req("b", double.class)) 
        {
          @Override
          public Double make(ArgSet args) {
            double a = args.get(double.class, "a");
            double b = args.get(double.class, "b");
            return a/b;
          }
        }
    .setHelp("Divide one Double by another");
    
    type.new CFunc("mod",
        Param.req("a", double.class),
        Param.req("b", double.class)) 
        {
          @Override
          public Double make(ArgSet args) {
            double a = args.get(double.class, "a");
            double b = args.get(double.class, "b");
            return a%b;
          }
        }
    .setHelp("Remainder of one Double divided by another");
    
    
    type.new CFunc("sum",
        Param.req("first", double.class),
        Param.rest("rest", double.class)) {
      @Override
      public Double make(ArgSet args) {
        Double first = args.<Double>get("first");
        List<Double> rest = args.<List<Double>>get("rest");
        double sum = NumUtils.whenNull(first, 0);
        if (Double.isNaN(sum)) {
          sum = 0;
        }
        for (Double i : rest) {
          if (valid(i)) {
            sum += i;
          }
        }
        return sum;
      }}
    .setHelp("Add a sequence of reals");
    
    type.new CFunc("sum",
        Param.req("array", PType.arrayOf(double.class))) {
      @Override
      public Double make(ArgSet args) {
        Double[] array = args.<Double[]>get("array");
        if (array == null) {
          return null;
        }
        double sum = 0;
        for (Double i : array) {
          if (valid(i)) {
            sum += i;
          }
        }
        return sum;
      }}
    .setHelp("Add a sequence of reals");
    
    type.new CFunc("mean",
        Param.req("first", double.class),
        Param.rest("rest", double.class)) {
      @Override
      public Double make(ArgSet args) {
        Double first = args.<Double>get("first");
        List<Double> rest = args.<List<Double>>get("rest");
        double sum = NumUtils.whenNull(first, 0);
        int n = first==null ? 0 : 1;
        if (Double.isNaN(sum)) {
          sum = 0;
          n = 0;
        }
        for (Double i : rest) {
          if (valid(i)) {
            sum += i;
            n++;
          }
        }
        return n==0 ? null : sum/n;
      }}
    .setHelp("Average a sequence of reals");
    
    type.new CFunc("mean",
        Param.req("array", PType.arrayOf(double.class))) {
      @Override
      public Double make(ArgSet args) {
        Double[] array = args.<Double[]>get("array");
        if (array == null) {
          return null;
        }
        double sum = 0;
        int n = 0;
        for (Double i : array) {
          if (valid(i)) {
            sum += i;
            n++;
          }
        }
        return n==0 ? null : sum/n;
      }}
    .setHelp("Average a sequence of reals");
    

    type.new CFunc("prod",
        Param.req("first", double.class),
        Param.rest("rest", double.class)) {
      @Override
      public Double make(ArgSet args) {
        Double first = args.<Double>get("first");
        List<Double> rest = args.<List<Double>>get("rest");
        double prod = NumUtils.whenNull(first, 1);
        if (Double.isNaN(prod)) {
          prod = 1;
        }
        for (Double i : rest) {
          if (valid(i)) {
            prod *= i;
          }
        }
        return prod;
      }}
    .setHelp("Multiply a sequence of reals");
    
    type.new CFunc("prod",
        Param.req("array", PType.arrayOf(double.class))) {
      @Override
      public Double make(ArgSet args) {
        Double[] array = args.<Double[]>get("array");
        if (array == null) {
          return null;
        }
        double prod = 1;
        for (Double i : array) {
          if (valid(i)) {
            prod *= i;
          }
        }
        return prod;
      }}
    .setHelp("Multiply a sequence of reals");
    

    type.new CFunc("max",
        Param.req("first", double.class),
        Param.rest("rest", double.class)) {
      @Override
      public Double make(ArgSet args) {
        Double max = args.<Double>get("first");
        if (max != null && Double.isNaN(max)) {
          max = null;
        }
        List<Double> rest = args.<List<Double>>get("rest");
        for (Double i : rest) {
          if (valid(i)) {
            if (max == null || i > max) {
              max = i;
            }
          }
        }
        return max;
      }}
    .setHelp("The maximum of a sequence of reals");

    type.new CFunc("max",
        Param.req("array", PType.arrayOf(double.class))) {
      @Override
      public Double make(ArgSet args) {
        Double[] array = args.<Double[]>get("array");
        if (array == null) {
          return null;
        }
        Double max = null;
        for (Double i : array) {
          if (valid(i)) {
            if (max == null || i > max) {
              max = i;
            }
          }
        }
        return max;
      }}
    .setHelp("The maximum of a sequence of reals");

    type.new CFunc("min",
        Param.req("first", double.class),
        Param.rest("rest", double.class)) {
      @Override
      public Double make(ArgSet args) {
        Double min = args.<Double>get("first");
        if (min != null && Double.isNaN(min)) {
          min = null;
        }
        List<Double> rest = args.<List<Double>>get("rest");
        for (Double i : rest) {
          if (valid(i)) {
            if (min == null || i < min) {
              min = i;
            }
          }
        }
        return min;
      }}
    .setHelp("The minimum of a sequence of reals");
    
    type.new CFunc("min",
        Param.req("array", PType.arrayOf(double.class))) {
      @Override
      public Double make(ArgSet args) {
        Double[] array = args.<Double[]>get("array");
        if (array == null) {
          return null;
        }
        Double min = null;
        for (Double i : array) {
          if (valid(i)) {
            if (min == null || i < min) {
              min = i;
            }
          }
        }
        return min;
      }}
    .setHelp("The minimum of a sequence of reals");
    
    type.new CFunc("abs", Param.req("n", double.class)) {
      @Override
      public Double make(ArgSet args) {
        Double n = args.<Double>get("n");
        if (n == null) {
          return null;
        }
        return n < 0 ? -n : n;
      }}
    .setHelp("The absolute value of a real number");

    type.new CFunc("pow", 
        Param.req("base", double.class),
        Param.req("exp", double.class)) 
        {
      @Override
      public Double make(ArgSet args) {
        Double base = args.<Double>get("base");
        Double exp = args.<Double>get("exp");
        if (base == null || exp == null) {
          return null;
        }
        return Math.pow(base, exp);
      }}
    .setHelp("An real base raised to a real power");

    type.new CFunc("log", 
        Param.req("base", double.class),
        Param.req("n", double.class)) 
        {
      @Override
      public Double make(ArgSet args) {
        Double base = args.<Double>get("base");
        Double n = args.<Double>get("n");
        if (base == null || n == null) {
          return null;
        }
        if (base == Math.E) {
          return Math.log(n);
        }
        if (base == 10) {
          return Math.log10(n);
        }
        return Math.log(n)/Math.log(base);
      }}
    .setHelp("The logarithm of a real number in an arbitrary base");

    type.new CFunc("log", 
        Param.req("n", double.class)) 
        {
      @Override
      public Double make(ArgSet args) {
        Double n = args.<Double>get("n");
        if (n == null) {
          return null;
        }
        return Math.log(n);
      }}
    .setHelp("The natural (base e) logarithm of a real number");

    type.new CFunc("log10", 
        Param.req("n", double.class)) 
        {
      @Override
      public Double make(ArgSet args) {
        Double n = args.<Double>get("n");
        if (n == null) {
          return null;
        }
        return Math.log10(n);
      }}
    .setHelp("The common (base 10) logarithm of a real number");

    type.new CFunc("log2", 
        Param.req("n", double.class)) 
        {
      final double ln2 = Math.log(2);
      @Override
      public Double make(ArgSet args) {
        Double n = args.<Double>get("n");
        if (n == null) {
          return null;
        }
        return Math.log(n)/ln2;
      }}
    .setHelp("The binary (base 2) logarithm of a real number");
    
    type.new CFunc("clip",
                   Param.req("n", double.class),
                   Param.kwd("min", double.class, null),
                   Param.kwd("max", double.class, null)) {
      @Override
      public Double make(ArgSet args) throws MFailed {
        Double n = args.<Double>get("n");
        if (n == null) {
          return null;
        }
        Double min = args.<Double>get("min");
        if (min != null && min > n) {
          return min;
        }
        Double max = args.<Double>get("max");
        if (max != null && max < n) {
          return max;
        }
        return n;
      }
    }
    .setHelp("Clip a double to a range");



  }


  private static boolean valid(Double i) {
    return i != null && !Double.isNaN(i);
  }
  
  @Override
  public String describe() {
    return "A floating-point number";
  }
  
  public String syntax() {
    return "A sequence of digits, optionally preceded by a plus or minus sign, and optionally followed by a decimal " +
    		"point and one or more digits.  Digits may be separated by underscores for readability.  The forms \"inf\" " +
    		"and \"infinity\" may also be used, optionally preceded by a sign. Also, the number may be specified as a " +
    		"fraction consisting of two whole numbers separated by a slash (\"/\"), with no space around the slash. " +
    		"also fractions with whole numbers and percentages";
        
  }
  
  public static void main(String[] args) {
    PType<Double> dt = PType.of(Double.class);
    PrintStream out = System.out;
    dt.testRead(out, "5", 5.0);
    dt.testRead(out, ".5", 0.5);
    dt.testRead(out, "0.5", 0.5);
    dt.testRead(out, "1/4", 0.25);
    dt.testRead(out, "3-1/4", 3.25);
    dt.testRead(out, "15%", 0.15);
  }
  
  

}
