/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import com.hpl.erk.ReadableString;
import com.hpl.erk.config.DelayedVal;
import com.hpl.erk.config.FunctionReturnType;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.ReadDelayedVal;
import com.hpl.erk.config.ex.IllegalValueException;
import com.hpl.erk.config.ex.ReadError;
import com.hpl.erk.formatters.SeqFormatter;
import com.hpl.erk.types.TypeToken;


public abstract class PrimArrayType<A,T> extends PType<A> implements SeqType<A,T> {
  private final PType<T[]> boxedArrayType;
  private final Class<T> primType; 
  private final PType<T> elementType;
//  private final Class<A> primArrayType;


  protected abstract void set(A array, int index, T val);
  protected abstract T get(A array, int i);
  protected abstract int length(A array);


  protected PrimArrayType(Class<A> primArrayType) {
    super(TypeToken.find(primArrayType));
    this.primType = (Class<T>)primArrayType.getComponentType();
    this.elementType = PType.of(primType);
    this.boxedArrayType = PType.arrayOf(primType);
  }

  @Override
  public PType<A> asType() {
    return this;
  }

  
  @Override
  public A readVal(ReadableString input, String valTerminators) throws ReadError, ReadDelayedVal {
    int resetTo = input.getCursor();
    T[] boxedArray;
    try {
      boxedArray = boxedArrayType.read(input, valTerminators);
    } catch (ReadDelayedVal e) {
      final DelayedVal<? extends T[]> dv = e.delayedVal();
      throw new ReadDelayedVal(new DelayedVal<A>(dv.desc) {
        @Override
        public A force() throws IllegalValueException {
          return unbox(dv.force());
        }});
    }
    try {
      return unbox(boxedArray);
    } catch (IllegalValueException e) {
      throw new ReadError(input, resetTo, this, e.getMessage());
    }
  }


  protected A unbox(T[] boxedArray) throws IllegalValueException {
    if (boxedArray == null) {
      return null;
    }
    int n = boxedArray.length;
    A array = (A)Array.newInstance(primType, n);
    for (int i=0; i<n; i++) {
      T x = boxedArray[i];
      if (x == null) {
        throw new IllegalValueException(String.format("Null found in primitive array, element %,d", i));
      }
      set(array, i, x);
    }
    return array;
  }
  
  public Collection<T> asCollection(A composite) {
    final int n = length(composite);
    List<T> list = new ArrayList<>(n);
    for (int i=0; i<n; i++) {
      list.add(get(composite, i));
    }
    return list;
  }
  
  @Override
  public A copyFrom(Collection<? extends T> val) {
    if (val == null) {
      return null;
    }
    A array = (A)Array.newInstance(primType, val.size());
    int i=0;
    for (T x : val) {
      set(array, i++, x);
    }
    return array;
  }
  
  @Override
  public PType<T> elementType() {
    return elementType;
  }
  
  @Override
  public TypeToken typeToken() {
    return typeToken;
  }
  
  @Override
  public void addFunctionTypesTo(Collection<FunctionReturnType> types) {
    super.addFunctionTypesTo(types);
    elementType.addFunctionTypesTo(types);
  }
  @Override
  public List<PType<?>> bindings() {
    return Collections.emptyList();
  }
  @Override
  public String toString() {
    return String.format("%s[]", elementType);
  }
  
  @Override
  public String format(A val) {
    if (val == null) {
      return "null";
    }
    SeqFormatter<String> sf = SeqFormatter.bracketList();
    final int n = length(val);
    for (int i=0; i<n;i++) {
      sf.add(elementType.format(get(val, i)));
    }
    return sf.toString();
  };
}
