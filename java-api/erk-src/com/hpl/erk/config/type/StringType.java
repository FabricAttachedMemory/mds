/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.util.IllegalFormatConversionException;
import java.util.List;

import com.hpl.erk.ReadableString;
import com.hpl.erk.TrueOnce;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.ex.ReadError;
import com.hpl.erk.config.func.ArgSet;
import com.hpl.erk.config.func.Param;
import com.hpl.erk.formatters.SeqFormatter;
import com.hpl.erk.formatters.SeqFormatter.Option;
import com.hpl.erk.util.CollUtils;

public class StringType extends SimpleType<String> {
  public StringType() {
    super(String.class);
  }
  @Override
  public String readVal(ReadableString input, String valTerminators) throws ReadError {
    int resetTo = input.getCursor();
    input.skipWS();
    String s = readQuoted(input, '\"', '\"');
    if (s != null) {
      return s;
    }
    s = readQuoted(input, '\'', '\'');
    if (s != null) {
      return s;
    }
    input.setCursor(resetTo);
    return readUnquoted(input, valTerminators);
  }

  @Override
  public String format(String val) {
    if (val == null) {
      return "null";
    }
    val = val.replace("\"", "\\\"");
    return "\""+val+"\"";
  }
  
  private static final TrueOnce needInit = new TrueOnce();
  public static void ensureConfigParams() {
    if (!needInit.check()) {
      return;
    }
    
    final PType<String> type = PType.of(String.class);
    type.new ConversionFrom<Object>(PType.of(Object.class)) {
      @Override
      public String convert(Object val) {
        return String.valueOf(val);
      }
    }.register();
    
    type.new CFunc("cat", 
                   Param.req("first", String.class),
                   Param.rest("strings", String.class),
                   Param.kwd("sep", String.class, null).help("Separator between strings"),
                   Param.kwd("open", String.class, null).help("Opening delimiter"),
                   Param.kwd("close", String.class, null).help("Closing delimiter")) 
    {
      @Override
      public String make(ArgSet args) {
        String first = args.<String>get("first");
        List<String> strings = args.<List<String>>get("strings");
        String sep = args.<String>get("sep");
        String open = args.<String>get("open");
        String close = args.<String>get("close");
        SeqFormatter<String> sf = SeqFormatter.<String>with(Option.sep(sep), Option.delims(open, close));
        if (first != null) {
          sf.add(first);
        }
        sf.addAll(strings);
        return sf.toString();
      }}
    .setHelp("Concatenate strings");
    
    type.new CFunc("format", Param.req("fmt", String.class), Param.rest("objects", Object.class))
    {
      @Override
      public String make(ArgSet args) throws MFailed {
        String fmt = args.<String>get("fmt");
        if (fmt == null) {
          throw new MFailed(this, args, "No format specified");
        }
        List<Object> objects = args.<List<Object>>get("objects");
        try {
          return String.format(fmt, CollUtils.arrayFrom(objects, Object.class));
        } catch (IllegalFormatConversionException e) {
          throw new MFailed(this, args, "Format failed", e);
        }
      }
      
    }
    .setHelp("Format a string");
                 
    type.new CFunc("env", 
        Param.req("var", String.class)) {
      @Override
      public String make(ArgSet args) {
        String var = args.<String>get("var");
        if (var == null) {
          return null;
        }
        return System.getenv(var);
      }}
    .setHelp("Concatenate strings");
      
      

  }

  @Override
  public String syntax() {
    return "A sequence of characters, optionally delimited by single or double quotes.  If quotes are not used, " +
    		"the string runs until the first comma or closing bracket if in a sequence or as far as possible otherwise. " +
    		"Within a string, backslash can be used to escape the following character (including commas, brackets, and" +
    		"quotes) " +
    		"or to include a newline \"\\n\" or tab \"\\t\".";
  }
}
