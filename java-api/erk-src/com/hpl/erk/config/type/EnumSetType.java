/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.util.EnumSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.hpl.erk.ReadableString;
import com.hpl.erk.config.DelayedVal;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.ReadDelayedVal;
import com.hpl.erk.config.ex.IllegalValueException;
import com.hpl.erk.config.ex.ReadError;
import com.hpl.erk.types.TypeToken;

public class EnumSetType<ET extends Enum<ET>> extends CollType<ET, EnumSet<ET>> {
  private static Generic GENERIC = null;
  
  @SuppressWarnings("rawtypes")
  public static class Generic extends CollType.Generic<EnumSet, Enum<?>> {
    private Generic() {
      super(TypeToken.generic(EnumSet.class));
    }

    public final <ET extends Enum<ET>> PType<EnumSet<ET>> of(final PType<ET> eltType) {
      return this.of(PType.<EnumSet<ET>>sig(), eltType);
    }
    
    @Override
    public <T extends EnumSet, P1 extends Enum<?>> PType<T> makeNewType(Sig<T> sig, TypeToken token, PType<P1> p1Type) {
      @SuppressWarnings("unchecked")
      final PType<T> type = (PType<T>)makeUnchecked(p1Type);
      return type;
    }
    
    private static <ET extends Enum<ET>> EnumSetType<ET> makeUnchecked(PType<? extends Enum<?>> p1Type) {
      @SuppressWarnings("unchecked")
      PType<ET> etype = (PType<ET>)p1Type;
      return new EnumSetType<>(etype);
    }

    

  }

  protected EnumSetType(PType<ET> eltType) {
    super(generic(), generic().token(eltType), eltType);
  }
  
  @Override
  public EnumSet<ET> createEmpty() {
    return EnumSet.noneOf(elementType().rawClass());
  }
  
  protected static final Pattern allButPat = Pattern.compile("(?:all\\s+(?:but|except)|not)\\b\\s*|[^~!]", Pattern.CASE_INSENSITIVE);
  protected static final Pattern allPat = Pattern.compile("all\\b", Pattern.CASE_INSENSITIVE);
  protected static final Pattern nonePat = Pattern.compile("none\\b", Pattern.CASE_INSENSITIVE);
  @Override
  protected EnumSet<ET> readSpecialForms(ReadableString input, int resetTo) throws ReadError, ReadDelayedVal {

    Matcher m = input.consume(allButPat);
    if (m != null) {

     try {
       EnumSet<ET> except = read(input, "");
       if (except == null) {
         throw new ReadError(input, resetTo, this, "Can't take complement of null type");
       }
       return EnumSet.complementOf(except);
     } catch (ReadDelayedVal e) {
       final DelayedVal<EnumSet<ET>> compDV = (DelayedVal<EnumSet<ET>>)e.<EnumSet<ET>>delayedVal();
       final DelayedVal<EnumSet<ET>> dv = new DelayedVal<EnumSet<ET>>(compDV.desc) {
         @Override
         public EnumSet<ET> force() throws IllegalValueException {
           EnumSet<ET> comp = compDV.force();
           return EnumSet.complementOf(comp);
         }
       };
       throw new ReadDelayedVal(dv);
      }
    }
    if ((m = input.consume(allPat)) != null) {
      return EnumSet.allOf(p1Type.rawClass());
    }
    return null;
  }
  
  public static Generic generic() {
    if (GENERIC == null) {
      GENERIC = new Generic();
    }
    return GENERIC;
  }
  
  public static <ET extends Enum<ET>> PType<EnumSet<ET>> of(PType<ET> eltType) {
    return generic().of(eltType);
  }

}
