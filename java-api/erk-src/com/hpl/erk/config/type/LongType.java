/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.hpl.erk.IOUtils;
import com.hpl.erk.ReadableString;
import com.hpl.erk.TrueOnce;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.ex.CantReadError;
import com.hpl.erk.config.ex.ReadError;
import com.hpl.erk.config.func.ArgSet;
import com.hpl.erk.config.func.Param;
import com.hpl.erk.util.NumUtils;

public class LongType extends SimpleType<Long> {
  
  protected LongType() {
    super(Long.class);
  }

  static final Pattern decimal = Pattern.compile("[+-]?[\\p{Digit}][\\p{Digit}_]*?[\\p{Digit}]?"); 
  static final Pattern decimalWithComma = Pattern.compile("[+-]?[\\p{Digit}][\\p{Digit}_,]*(?<=[\\p{Digit}])"); 
  static final Pattern hex = Pattern.compile("[0x\\p{XDigit}][\\p{XDigit}_]*(?<=[\\p{XDigit}])"); 
  @Override
  public Long readVal(ReadableString input, String valTerminators) throws ReadError {
    int resetTo = input.getCursor();
    input.skipWS();
    final Pattern pat = valTerminators.contains(",") ? decimal : decimalWithComma;
    Long val = readDigits(input, pat, 10);
    if (val != null) {
      return val;
    }
    val = readDigits(input, hex, 16);
    if (val != null) {
      return val;
    }
    throw new CantReadError(input, resetTo, this);
  }

  public Long readDigits(ReadableString input, final Pattern re, final int radix) {
    Matcher m = input.consume(re);
    if (m != null) {
      String digitString = m.group();
      digitString = digitString.replace("_", "");
      digitString = digitString.replace(",", "");
      return Long.parseLong(digitString, radix);
    }
    return null;
  }
  
  @Override
  public String toString() {
    return "long";
  }
  
  @Override
  public String format(Long val) {
    if (val == null) {
      return "null";
    } else if (val == Long.MAX_VALUE) {
      return "max";
    } else if (val == Long.MIN_VALUE) {
      return "min";
    }
    return IOUtils.formatGrouped(val, "_");
  }
  
  private static final TrueOnce needInit = new TrueOnce();
  public static void ensureConfigParams() {
    if (!needInit.check()) {
      return;
    }
    
    final PType<Long> type = PType.of(Long.class);
    
    type.new ConversionFrom<Integer>(PType.of(Integer.class)) {
      @Override
      public Long convert(Integer val) {
        return val == null ? null : val.longValue();
      }}.register(); 

    type.constant("maxInt", Long.MAX_VALUE)
    .setHelp("Maximum int value");
    
    type.constant("minInt", Long.MIN_VALUE)
    .setHelp("Minimum int value");
    
    type.new CFunc("plus",
        Param.req("a", long.class),
        Param.req("b", long.class)) 
        {
          @Override
          public Long make(ArgSet args) {
            long a = args.get(long.class, "a");
            long b = args.get(long.class, "b");
            return a+b;
          }
        }
    .setHelp("Add two Longs");

    type.new CFunc("times",
        Param.req("a", long.class),
        Param.req("b", long.class)) 
        {
          @Override
          public Long make(ArgSet args) {
            long a = args.get(long.class, "a");
            long b = args.get(long.class, "b");
            return a*b;
          }
        }
    .setHelp("Multiply two Longs");

    type.new CFunc("minus",
        Param.req("a", long.class),
        Param.req("b", long.class)) 
        {
          @Override
          public Long make(ArgSet args) {
            long a = args.get(long.class, "a");
            long b = args.get(long.class, "b");
            return a-b;
          }
        }
    .setHelp("Subtract one Long from another");
    
    type.new CFunc("div",
        Param.req("a", long.class),
        Param.req("b", long.class)) 
        {
          @Override
          public Long make(ArgSet args) {
            long a = args.get(long.class, "a");
            long b = args.get(long.class, "b");
            return a/b;
          }
        }
    .setHelp("Divide one Long by another");
    
    type.new CFunc("mod",
        Param.req("a", long.class),
        Param.req("b", long.class)) 
        {
          @Override
          public Long make(ArgSet args) {
            long a = args.get(long.class, "a");
            long b = args.get(long.class, "b");
            return a%b;
          }
        }
    .setHelp("Remainder of one Long divided by another");
    
    type.new CFunc("sum",
        Param.req("first", long.class),
        Param.rest("rest", long.class)) {
      @Override
      public Long make(ArgSet args) {
        Long first = args.<Long>get("first");
        List<Long> rest = args.<List<Long>>get("rest");
        long sum = NumUtils.whenNull(first, 0);
        for (Long i : rest) {
          if (i != null) {
            sum += i;
          }
        }
        return sum;
      }}
    .setHelp("Add a sequence of Longs");
    
    type.new CFunc("sum",
        Param.req("array", PType.arrayOf(long.class))) {
      @Override
      public Long make(ArgSet args) {
        Long[] array = args.<Long[]>get("array");
        if (array == null) {
          return null;
        }
        long sum = 0;
        for (Long i : array) {
          if (i != null) {
            sum += i;
          }
        }
        return sum;
      }}
    .setHelp("Add a sequence of Longs");
    

    type.new CFunc("prod",
        Param.req("first", long.class),
        Param.rest("rest", long.class)) {
      @Override
      public Long make(ArgSet args) {
        Long first = args.<Long>get("first");
        List<Long> rest = args.<List<Long>>get("rest");
        long prod = NumUtils.whenNull(first, 1);
        for (Long i : rest) {
          if (i != null) {
            prod *= i;
          }
        }
        return prod;
      }}
    .setHelp("Multiply a sequence of Longs");
    
    type.new CFunc("prod",
        Param.req("array", PType.arrayOf(long.class))) {
      @Override
      public Long make(ArgSet args) {
        Long[] array = args.<Long[]>get("array");
        if (array == null) {
          return null;
        }
        long prod = 1;
        for (Long i : array) {
          if (i != null) {
            prod *= i;
          }
        }
        return prod;
      }}
    .setHelp("Multiply a sequence of Longs");
    
    type.new CFunc("clip",
                   Param.req("n", long.class),
                   Param.kwd("min", long.class, null),
                   Param.kwd("max", long.class, null)) {
      @Override
      public Long make(ArgSet args) throws MFailed {
        Long n = args.<Long>get("n");
        if (n == null) {
          return null;
        }
        Long min = args.<Long>get("min");
        if (min != null && min > n) {
          return min;
        }
        Long max = args.<Long>get("max");
        if (max != null && max < n) {
          return max;
        }
        return n;
      }
    }
    .setHelp("Clip a long to a range");

    type.new CFunc("max",
        Param.req("first", long.class),
        Param.rest("rest", long.class)) {
      @Override
      public Long make(ArgSet args) {
        Long max = args.<Long>get("first");
        List<Long> rest = args.<List<Long>>get("rest");
        for (Long i : rest) {
          if (i != null) {
            if (max == null || i > max) {
              max = i;
            }
          }
        }
        return max;
      }}
    .setHelp("The maximum of a sequence of Longs");

    type.new CFunc("max",
        Param.req("array", PType.arrayOf(long.class))) {
      @Override
      public Long make(ArgSet args) {
        Long[] array = args.<Long[]>get("array");
        if (array == null) {
          return null;
        }
        Long max = null;
        for (Long i : array) {
          if (i != null) {
            if (max == null || i > max) {
              max = i;
            }
          }
        }
        return max;
      }}
    .setHelp("The maximum of a sequence of Longs");

    type.new CFunc("min",
        Param.req("first", long.class),
        Param.rest("rest", long.class)) {
      @Override
      public Long make(ArgSet args) {
        Long min = args.<Long>get("first");
        List<Long> rest = args.<List<Long>>get("rest");
        for (Long i : rest) {
          if (i != null) {
            if (min == null || i < min) {
              min = i;
            }
          }
        }
        return min;
      }}
    .setHelp("The minimum of a sequence of Longs");
    
    type.new CFunc("min",
        Param.req("array", PType.arrayOf(long.class))) {
      @Override
      public Long make(ArgSet args) {
        Long[] array = args.<Long[]>get("array");
        if (array == null) {
          return null;
        }
        Long min = null;
        for (Long i : array) {
          if (i != null) {
            if (min == null || i < min) {
              min = i;
            }
          }
        }
        return min;
      }}
    .setHelp("The minimum of a sequence of Longs");
    
    type.new CFunc("abs", Param.req("n", long.class)) {
      @Override
      public Long make(ArgSet args) {
        Long n = args.<Long>get("n");
        if (n == null) {
          return null;
        }
        return n < 0 ? -n : n;
      }}
    .setHelp("The absolute value of an Long");

    type.new CFunc("round", Param.req("n", double.class)) {
      @Override
      public Long make(ArgSet args) {
        Double n = args.<Double>get("n");
        if (n == null) {
          return null;
        }
        return (long)Math.round(n);
      }}
    .setHelp("A real number rounded to the nearest Long");

    type.new CFunc("floor", Param.req("n", double.class)) {
      @Override
      public Long make(ArgSet args) {
        Double n = args.<Double>get("n");
        if (n == null) {
          return null;
        }
        return (long)Math.floor(n);
      }}
    .setHelp("The largest Long less than or equal to a real number");

    type.new CFunc("ceil", Param.req("n", double.class)) {
      @Override
      public Long make(ArgSet args) {
        Double n = args.<Double>get("n");
        if (n == null) {
          return null;
        }
        return (long)Math.ceil(n);
      }}
    .setHelp("The smallest Long greater than or equal to a real number");

    type.new CFunc("pow", 
        Param.req("base", long.class),
        Param.req("exp", long.class)) 
        {
      @Override
      public Long make(ArgSet args) {
        Long base = args.<Long>get("base");
        Long exp = args.<Long>get("exp");
        if (base == null || exp == null) {
          return null;
        }
        return (long)Math.pow(base, exp);
      }}
    .setHelp("An Long base raised to an Long power");

    type.new CFunc("pow2", 
        Param.req("exp", int.class)) 
        {
      @Override
      public Long make(ArgSet args) throws MFailed {
        Integer exp = args.<Integer>get("exp");
        if (exp == null) {
          return null;
        }
        if (exp < 0 || exp >= Long.SIZE) {
          throw new MFailed(this, args, String.format("Exponent %s not in range [0, %d]", exp, Long.SIZE));
        }
        return 1L<<exp;
      }}
    .setHelp(String.format("2 raised to an integer power.  Exponent must be in [0, %d]", Long.SIZE));
    
    type.new CFunc("and",
        Param.req("first", long.class),
        Param.rest("rest", long.class)) {
      @Override
      public Long make(ArgSet args) {
        Long val = args.<Long>get("first");
        List<Long> rest = args.<List<Long>>get("rest");
        for (Long i : rest) {
          if (i != null) {
            if (val == null) {
              val = i;
            } else {
              val &= i;
            }
          }
        }
        return val;
      }}
    .setHelp("The AND of a sequence of integers");
    
    type.new CFunc("and",
        Param.req("array", PType.arrayOf(long.class))) {
      @Override
      public Long make(ArgSet args) {
        Long[] array = args.<Long[]>get("array");
        if (array == null) {
          return null;
        }
        Long val = null;
        for (Long i : array) {
          if (i != null) {
            if (val == null) {
              val = i;
            } else {
              val &= i;
            }
          }
        }
        return val;
      }}
    .setHelp("The AND of a sequence of integers");

    type.new CFunc("or",
        Param.req("first", long.class),
        Param.rest("rest", long.class)) {
      @Override
      public Long make(ArgSet args) {
        Long val = args.<Long>get("first");
        List<Long> rest = args.<List<Long>>get("rest");
        for (Long i : rest) {
          if (i != null) {
            if (val == null) {
              val = i;
            } else {
              val |= i;
            }
          }
        }
        return val;
      }}
    .setHelp("The OR of a sequence of integers");
    
    type.new CFunc("or",
        Param.req("array", PType.arrayOf(long.class))) {
      @Override
      public Long make(ArgSet args) {
        Long[] array = args.<Long[]>get("array");
        if (array == null) {
          return null;
        }
        Long val = null;
        for (Long i : array) {
          if (i != null) {
            if (val == null) {
              val = i;
            } else {
              val |= i;
            }
          }
        }
        return val;
      }}
    .setHelp("The OR of a sequence of integers");

  }
  
  @Override
  public String describe() {
    return "An 64-bit integer value";
  }
  @Override
  public String syntax() {
    return "A sequence of digits, optionally preceded by a plus or minus sign.  " +
    		"Digits may be separated by underscores for readability.  If not in a sequence, commas may also be used. " +
    		"Hexadecimal numbers may be specified as \"0x\" followed by hexadecimal digits, with undesrcores as separators.";
        
  }



  

}
