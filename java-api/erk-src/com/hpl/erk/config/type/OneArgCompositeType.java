/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config.type;

import java.util.Collections;
import java.util.List;

import com.hpl.erk.config.GenericType;
import com.hpl.erk.config.PType;
import com.hpl.erk.config.TypeCache.Factory;
import com.hpl.erk.config.func.ArgSet;
import com.hpl.erk.config.func.Param;
import com.hpl.erk.types.GenericTypeToken;
import com.hpl.erk.types.TypeToken;

public class OneArgCompositeType<T, P1> extends CompositeType<T> {
  protected final PType<P1> p1Type;
  
  public static class Generic<GT, B1> extends GenericType<GT> {
    
    public abstract class CFunc extends GenericType<GT>.CFunc {
      
      public abstract <P1 extends B1> GT make(PType<P1> p1Type, ArgSet args);

      public CFunc(String name, Param... params) {
        super(name, params);
      }
      
    }
    
    public Generic(GenericTypeToken generic) {
      super(generic);
      if (generic.arity() != 1) {
        throw new IllegalArgumentException(String.format("%s arity != 1", generic));
      }
    }
    
    
    public <ET extends B1, T extends GT> PType<T> of(Sig<T> sig, final PType<ET> eltType) {
      return OneArgCompositeType.of(sig, this, eltType);  
    }

    public <T extends GT> PType<T> concreteType(Sig<T> sig, PType<?>...bounds) {
      if (bounds.length != 1) {
        throw new IllegalArgumentException(String.format("Wrong number of arguments (%,d) for %s", bounds.length, this));
      }
      @SuppressWarnings("unchecked")
      PType<? extends B1> bound = (PType<? extends B1>)bounds[0];
      return this.of(sig, bound);
    }
    
    public final <T extends GT> PType<T> makeNew(Sig<T> sig, TypeToken token, PType<?>... bounds) {
      @SuppressWarnings("unchecked")
      PType<? extends B1> bound = (PType<? extends B1>)bounds[0];
      return makeNewType(sig, token, bound);
    }

    public <T extends GT, P1 extends B1> PType<T> makeNewType(Sig<T> sig, TypeToken token, PType<P1> p1Type) {
      return new OneArgCompositeType<>(this, token, p1Type);
    }
    
    
  }
  
  protected OneArgCompositeType(GenericType<? super T> generic,
                                TypeToken typeToken,
                                PType<P1> p1Type)
  {
    super(generic, typeToken);
    this.p1Type = p1Type;
  }

  @Override
  public List<PType<?>> bindings() {
    return Collections.<PType<?>>singletonList(p1Type);
  }
  
  public static <P1,T> OneArgCompositeType<T,P1> of(final Sig<T> sig, final GenericType<? super T> generic, final PType<P1> p1Type) {
    final TypeToken token = generic.token(p1Type);
    Factory<T> factory = new Factory<T>() {
      @Override
      public PType<T> create() {
        return generic.makeNew(sig, token, p1Type);
      }
    };
    return (OneArgCompositeType<T, P1>)PType.of(token, factory);  

  }

}
