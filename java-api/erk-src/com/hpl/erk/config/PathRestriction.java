/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;

import com.hpl.erk.config.ex.IllegalValueException;





public class PathRestriction { 
  public static Restriction<Path> exists() {
    return new Restriction<Path>() {
      @Override
      public boolean checkVal(Path val) {
        return val == null || Files.exists(val);
      }
      
      @Override
      public String describe() {
        return "Must exist";
      }
    };
  }
  public static Restriction<Path> is_new() {
    return new Restriction<Path>() {
      @Override
      public boolean checkVal(Path val) {
        return val == null || !Files.exists(val);
      }
      
      @Override
      public String describe() {
        return "Must not exist";
      }
    };
  }
  public static Restriction<Path> is_dir() {
     return new Restriction<Path>() {
       @Override
       public boolean checkVal(Path val) {
         return val == null || Files.isDirectory(val);
       }
       
       @Override
       public String describe() {
         return "Must be a directory";
       }
     };
  }

  public static final Interpreter<Path> in_dir(final File dir) {
    return in_dir(dir.toPath());
  }
  public static final Interpreter<Path> in_dir(final Path dir) {
    return new Interpreter<Path>() {
      @Override
      public Path interpret(Path val) throws IllegalValueException {
        if (val == null) {
          return null;
        }
        return dir.resolve(val);
      }

      @Override
      public String describe() {
        return String.format("In directory %s", dir);
      }
    };
  }
}