/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config;

import java.io.File;

public class Source implements Comparable<Source> {
  public static final Source UNSET = new Source(Loc.UNSET);
  public static final Source DEFAULT = new Source(Loc.DEFAULT);
  public static final Source COMMAND_LINE = new Source(Loc.COMMAND_LINE);
  public static final Source EXPLICIT = new Source(Loc.EXPLICIT);
  
  public enum Loc {
    UNSET, DEFAULT(true), CONFIG_FILE, ENVIRONMENT_VARIABLE, PROPERTY, COMMAND_LINE(true), EXPLICIT(true);
    final boolean allowEquivalent;

    private Loc(boolean allowEquivalent) {
      this.allowEquivalent = allowEquivalent;
    }
    
    private Loc() {
      this(false);
    }
  }
  
  public final Loc location;

  public static class FromFile extends Source {
    public final File file;
    public final int lineNum;
    
    private FromFile(File file, int lineNum) {
      super(Loc.CONFIG_FILE);
      this.file = file;
      this.lineNum = lineNum;
    }
    
    @Override
    public String toString() {
      return String.format("%s[%s, line %,d]", location, file, lineNum);
    }
  }
  
  public static class FromVar extends Source {
    public final String name;

    protected FromVar(String name, Loc loc) {
      super(loc);
      this.name = name;
    }
    
    @SuppressWarnings("incomplete-switch")
    @Override
    public String toString() {
      String intro = "";
      switch (location) {
      case ENVIRONMENT_VARIABLE:
        intro = "$";
        break;
      case PROPERTY:
        intro = "-D";
        break;
      }
      return String.format("%s[%s%s]", location, intro, name);
    }
  }

  public static Source fromFile(File f, int n) {
    return new FromFile(f, n);
  }
  
  private Source(Loc location) {
    this.location = location;
  }
  
  @Override
  public String toString() {
    return location.toString();
  }

  @Override
  public int compareTo(Source o) {
    return location.compareTo(o.location);
  }
  
  public boolean allowEquivalent() {
    return location.allowEquivalent;
  }
  
  public boolean overrides(Source other) {
    if (location == other.location) {
      return location.allowEquivalent;
    }
    return compareTo(other) > 0;
  }

}
