/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.config;

import java.util.Collection;

import com.hpl.erk.util.CollUtils;

public abstract class ConfigError {

  public static class UnknownContext extends ConfigError {

    public final String name;
    public final Source source;

    public UnknownContext(String name, Source source) {
      this.name = name;
      this.source = source;
    }

    @Override
    public String key() {
      return String.format("+%s", name);
    }

    @Override
    public Collection<?> desc() {
      return CollUtils.listOf(source, "Unknown context");
    }

  }

  public static class UnknownParam extends ConfigError {

    public final String kwd;
    public final Source source;

    public UnknownParam(String kwd, Source source) {
      this.kwd = kwd;
      this.source = source;
    }

    @Override
    public String key() {
      return String.format("-%s", kwd);
    }

    @Override
    public Collection<?> desc() {
      return CollUtils.listOf(source, "Unknown parameter");
    }

  }

  public abstract String key();
  public abstract Collection<?> desc();

  public static class ExceptionCaught extends ConfigError {

    public final ConfigParam<?> param;
    public final Source source;
    public final Exception ex;

    public ExceptionCaught(ConfigParam<?> param, Source source, Exception ex) {
      this.param = param;
      this.source = source;
      this.ex = ex;
    }

    @Override
    public String key() {
      return param.asSwitch();
    }

    @Override
    public Collection<?> desc() {
      return CollUtils.listOf(source, ex.getMessage());
    }

  }

  public static ConfigError exception(ConfigParam<?> param, Source source,  Exception ex) {
    return new ExceptionCaught(param, source, ex);
  }

  public static ConfigError unknownParam(String kwd, Source source) {
    return new UnknownParam(kwd, source);
  }

  public static ConfigError unknownContext(String name, Source source) {
    return new UnknownContext(name, source);
  }



}
