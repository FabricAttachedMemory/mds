/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.impl_helper;

import com.hpl.erk.ClassDispatchTransformer;
import com.hpl.erk.formatters.SeqFormatter;
import com.hpl.erk.func.Functions;
import com.hpl.erk.func.UnaryFunc;
import com.hpl.erk.util.NumUtils;
import com.hpl.erk.util.Strings;

public class ObjectDescription {
  private final SeqFormatter<String> args;
  private String head;
  private String keyValSep = "=";
  private final ClassDispatchTransformer<Object, String> formatter = new ClassDispatchTransformer<>();
  
  private final static SeqFormatter.Option[] OPTIONS = new SeqFormatter.Option[]  
      {
       SeqFormatter.Option.commaSpaceSep,
       SeqFormatter.Option.empty("")
      };

  private ObjectDescription(SeqFormatter<String> args) {
    formatter.def(Strings.formatUsing("%s"));
    this.args = args.sep(", ").empty("");
  }
  
  
  public ObjectDescription head(String s) {
    head = s;
    return this;
  }
  
  public ObjectDescription classHead(Object obj) {
    return head(obj.getClass().getSimpleName());
  }
  
  public ObjectDescription add(Object obj) {
    String formatted = formatter.call(obj);
    args.add(formatted);
    return this;
  }

  public ObjectDescription addNonNull(Object obj) {
    final boolean b = obj != null;
    return addIf(b, obj);
  }

  public ObjectDescription addIf(final boolean b, Object obj) {
    if (b) {
      add(obj);
    }
    return this;
  }
  
  
  public ObjectDescription add(String key, Object val) {
    String formatted = formatter.call(val);
    args.add(key+keyValSep+formatted);
    return this;
  }
  
  public ObjectDescription addNonNull(String key, Object val) {
    final boolean b = val != null;
    return addIf(b, key, val);
  }


  public ObjectDescription addIf(final boolean b, String key, Object val) {
    if (b) {
      add(key, val);
    }
    return this;
  }
  
  public <C> ObjectDescription format(Class<C> c, UnaryFunc<? super C, ? extends String> transformer) {
    formatter.forClass(c, transformer);
    return this;
  }
  
  public <C> ObjectDescription defaultFormat(UnaryFunc<Object, ? extends String> transformer) {
    formatter.def(transformer);
    return this;
  }
  public <C> ObjectDescription nullFormat(UnaryFunc<Object, ? extends String> transformer) {
    formatter.forNull(transformer);
    return this;
  }
  public ObjectDescription kvSep(String s) {
    keyValSep = s;
    return this;
  }
  public ObjectDescription sep(String s) {
    args.sep(s);
    return this;
  }
  
  public static ObjectDescription brackets() {
    return new ObjectDescription(SeqFormatter.<String>bracketList(OPTIONS));
  }
  public static ObjectDescription braces() {
    return new ObjectDescription(SeqFormatter.<String>bracesList(OPTIONS));
  }
  public static ObjectDescription parens() {
    return new ObjectDescription(SeqFormatter.<String>parenList(OPTIONS));
  }
  public static ObjectDescription angleBrackets() {
    return new ObjectDescription(SeqFormatter.<String>angleBracketList(OPTIONS));
  }
  public static ObjectDescription delimited(String open, String sep, String close) {
    return new ObjectDescription(SeqFormatter.<String>with(OPTIONS).delims(open, close).sep(sep));
  }
  public static ObjectDescription delimited(String open, String close) {
    return new ObjectDescription(SeqFormatter.<String>with(OPTIONS).delims(open, close));
  }
  
  @Override
  public String toString() {
    return Strings.notNull(head)+args;
  }
  
  public static void main(String[] args) {
    String s = ObjectDescription.brackets().head("H")
        .nullFormat(Functions.toConst("**NULL**"))
        .format(Integer.class, NumUtils.toCommaSeparated())
        .add(5)
        .add(1000)
        .add("Str")
        .add(null)
        .add("key", 5432)
        .toString();
    System.out.format("%s%n", s);
  }
  
}
