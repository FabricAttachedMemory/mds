/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.functional_test;

import java.io.PrintStream;

public abstract class FunctionalTestBase {
  public abstract Result perform();
  
  protected final String description;
  protected final Class<? extends Exception> expectedException;

  public FunctionalTestBase(String description, Class<? extends Exception> expectedException) {
    this.description = description;
    this.expectedException = expectedException;
  }
  
  public class Result {
    public final boolean passed;
    public final String message;
    
    public Result(boolean passed, String message) {
      this.passed = passed;
      this.message = message;
    }
    
    public FunctionalTestBase test() {
      return FunctionalTestBase.this;
    }
    
    @Override
    public String toString() {
      return String.format("%s: %s -> %s", formatPassFail(passed), description(), message);
    }
    
    public void to(PrintStream out) {
      out.println(toString());
    }
  }
  
  public String description() {
    return description;
  }
  public String formatPassFail(boolean passed) {
    return passed ? formatPass() : formatFail();
  }
  public String formatPass() {
    return "Passed";
  }
  public String formatFail() {
    return "Failed";
  }
  
  protected String expected(Class<? extends Exception> expectedException) {
    return String.format("expected to catch %s", expectedException);
  }
  
  protected String caught(Exception e) {
    return String.format("caught %s: %s", e.getClass(), e.getMessage());
  }
  
  protected boolean correctException(Exception e) {
    return expectedException.isInstance(e);
  }

  
}
