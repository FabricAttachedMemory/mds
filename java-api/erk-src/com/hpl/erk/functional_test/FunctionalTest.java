/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.functional_test;

public abstract class FunctionalTest<T> extends FunctionalTestBase {
  public final T expectedVal;
  
  public abstract T compute() throws Exception;
  
  public FunctionalTest(String description, T expected) {
    super(description, null);
    expectedVal = expected;
  }

  public FunctionalTest(String description, Class<? extends Exception> expected) {
    super(description, expected);
    expectedVal = null;
  }

  @Override
  public Result perform() {
    try {
      T val = compute();
      if (expectedException != null) {
        return new Result(false, String.format("%s (%s)", returned(val), expected(expectedException)));
      }
      if (correctVal(val)) {
        return new Result(true, returned(val));
      } else {
        return new Result(false, wrongVal(val));
      }
    } catch (Exception e) {
      if (expectedException == null) {
        return new Result(false, String.format("%s (expected %s)", caught(e), formatVal(expectedVal)));
      }
      if (correctException(e)) {
        return new Result(true, caught(e));
      }
      return new Result(false, String.format("%s (%s)", caught(e), expected(expectedException)));
    }
  }

  protected String returned(T val) {
    return String.format("returned %s", formatVal(val));
  }

  protected String wrongVal(T val) {
    return String.format("%s (expected %s)", returned(val), formatVal(expectedVal));
  }

  protected String formatVal(T val) {
    if (val == null) {
      return "null";
    }
    return val.toString();
  }

  protected boolean correctVal(T val) {
    if (val == expectedVal) {
      return true;
    }
    if (val == null) {
      return false;
    }
    return val.equals(expectedVal);
  }

}
