/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.types;

import com.hpl.erk.func.Predicate;
import com.hpl.erk.impl_helper.EqualsImpl;




class SimpleTypeToken extends ScalarTypeToken {
  private final Class<?> raw;
  SimpleTypeToken(Class<?> base) {
    raw = base;
  }
  
  @Override
  public boolean equals(Object obj) {
    return EqualsImpl.check(this, obj, SimpleTypeToken.class, new Predicate<SimpleTypeToken>() {
      @Override
      public boolean test(SimpleTypeToken other) {
        return raw == other.raw;
      }
    });
  }
  
  @Override
  public int hashCode() {
    return raw.hashCode();
  }
  
  public String getName(boolean fullp) {
    final String baseName = fullp ? raw.getName() : raw.getSimpleName();
    return baseName;
  }
  
  public boolean isAssignableFrom(TypeToken o) {
    if (equalSatisfyingParams(o)) {
      return true;
    }
    Class<?> c = o.rawClass();
    return (raw.isAssignableFrom(c));
  }
  @Override
  public Class<?> rawClass() {
    return raw;
  }

  @Override
  public boolean isParameterized() {
    return false;
  }

  @Override
  public boolean equalSatisfyingParams(TypeToken token) {
    if (token == this) {
      return true;
    }
    if (!(token instanceof SimpleTypeToken)) {
      return false;
    }
    SimpleTypeToken other = (SimpleTypeToken)token;
    return this.equals(other);
  }
  


  
}