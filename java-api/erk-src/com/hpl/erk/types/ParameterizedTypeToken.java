/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.types;

import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.Arrays;

import com.hpl.erk.formatters.SeqFormatter;
import com.hpl.erk.func.Predicate;
import com.hpl.erk.impl_helper.EqualsImpl;
import com.hpl.erk.impl_helper.HashCode;
import com.hpl.erk.types.templates.PTypeTempl;

public class ParameterizedTypeToken extends ScalarTypeToken {
  public final GenericTypeToken generic;
  public final TypeBound[] bounds;
  
  protected ParameterizedTypeToken(GenericTypeToken generic, TypeBound... bounds) {
    this.generic = generic;
    this.bounds = bounds;
  }
  
  @Override
  public boolean equals(Object obj) {
    return EqualsImpl.check(this, obj, ParameterizedTypeToken.class, new Predicate<ParameterizedTypeToken>() {
      @Override
      public boolean test(ParameterizedTypeToken other) {
        return generic.equals(other.generic) 
            && Arrays.equals(bounds, other.bounds);
      }
    });
  }
  
  @Override
  public int hashCode() {
    return HashCode.simple()
        .include(generic)
        .includeContents(bounds)
        .value();
  }


  @Override
  public TypeBound asBound(Type type) {
    if (type instanceof TypeVariable) {
      TypeVariable<?> tvar = (TypeVariable<?>)type;
      return generic.varVal(tvar, bounds);
    }
    return super.asBound(type);
  }

  @Override
  public boolean isAssignableFrom(TypeToken token) {
    if (equalSatisfyingParams(token)) {
      return true;
    }
    if ((token instanceof ParameterizedTypeToken) && (generic == ((ParameterizedTypeToken)token).generic)) {
      // it's the same generic, but the parameters don't satisfy.
      return false;
    }
    if (!rawClass().isAssignableFrom(token.rawClass())) {
      return false;
    }
    for (TypeToken parent : token.parents()) {
      if (isAssignableFrom(parent)) {
        return true;
      }
    }
    return false;
  }

  @Override
  public String getName(boolean fullp) {
    Class<?> raw = rawClass();
    final String baseName = fullp ? raw.getName() : raw.getSimpleName();
    return baseName+SeqFormatter.angleBracketList().format(bounds);
  }


  @Override
  public Class<?> rawClass() {
    return generic.rawClass();
  }



  @Override
  public boolean isParameterized() {
    return true;
  }


  @Override
  public boolean equalSatisfyingParams(TypeToken token) {
    if (token == this) {
      return true;
    }
    if (!(token instanceof ParameterizedTypeToken)) {
      return false;
    }
    ParameterizedTypeToken other = (ParameterizedTypeToken)token;
    if (!generic.equals(other.generic)) {
      return false;
    }
    for (int i=0; i<bounds.length; i++) {
      if (!bounds[i].satisfiedBy(other.bounds[i])) {
        return false;
      }
    }
    return true;
  }
  
  @Override
  public void inferBoundsWhenMatching(PTypeTempl ptt, TypeBound[] templateBounds) {
    if (generic != ptt.generic) {
      super.inferBoundsWhenMatching(ptt, templateBounds);
    } else {
      int n = templateBounds.length;
      for (int i=0; i<n; i++) {
        ptt.params[i].inferBounds(bounds[i], templateBounds);
      }
    }
  }

}
