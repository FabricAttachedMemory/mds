/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.types.templates;

import java.util.Map;

import com.hpl.erk.adt.SmallIntMap;
import com.hpl.erk.types.TypeBound;

public class TemplateVar implements TypeTemplate {
  private static final int EXPECTED_VARS = 5;
  final int num;
  private static final SmallIntMap<TemplateVar> vars = new SmallIntMap.SynchroAuto<TemplateVar>(EXPECTED_VARS) {
    @Override
    protected TemplateVar newVal(int n) {
      return new TemplateVar(n);
    }
  };
  
  private static final SmallIntMap<TemplateVar[]> varArrays = new SmallIntMap.SynchroAuto<TemplateVar[]>(EXPECTED_VARS) {
    @Override
    protected TemplateVar[] newVal(int length) {
      TemplateVar[] array = new TemplateVar[length];
      for (int i=0; i<length; i++) {
        array[i] = TemplateVar.number(i);
      }
      return array;
    }
    
  };
  
  private TemplateVar(int num) {
    this.num = num;
  }
  
  public static TemplateVar number(int num) {
    return vars.get(num);
  }
  
  public static TemplateVar[] array(int n) {
    return varArrays.get(n);
  }

  @Override
  public String toString() {
    return "P"+num;
  }

  @Override
  public void fillAncestors(Map<Class<?>, TypeTemplate> map) {
    throw new UnsupportedOperationException(String.format("Type variable %s cannot be ancestor", this));
  }
  

  @Override
  public void inferBounds(TypeBound token, TypeBound[] bounds) {
    bounds[num] = token;
  }

}
