/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.types.templates;

import java.util.Map;

import com.hpl.erk.formatters.SeqFormatter;
import com.hpl.erk.types.GenericTypeToken;
import com.hpl.erk.types.TypeBound;

public class PTypeTempl implements TypeTemplate {
  public final GenericTypeToken generic;
  public final TypeTemplate[] params;
  
  public PTypeTempl(GenericTypeToken generic, TypeTemplate... params) {
    this.generic = generic;
    this.params = params;
  }
  
  @Override
  public String toString() {
    String gname = generic.rawClass().getSimpleName();
    return gname+SeqFormatter.angleBracketList().format(params);
  }
  
  @Override
  public void fillAncestors(Map<Class<?>, TypeTemplate> map) {
    Class<?> rc = generic.rawClass();
    if (!map.containsKey(rc)) {
      map.put(rc, this);
      generic.fillAncestors(map, params);
    }
  }

  @Override
  public void inferBounds(TypeBound token, TypeBound[] bounds) {
    token.inferBoundsWhenMatching(this, bounds);
  }

}
