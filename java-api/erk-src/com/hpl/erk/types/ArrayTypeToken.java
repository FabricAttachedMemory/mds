/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.types;

import java.lang.reflect.Array;
import java.util.Map;

import com.hpl.erk.func.Predicate;
import com.hpl.erk.impl_helper.EqualsImpl;
import com.hpl.erk.types.templates.TypeTemplate;

class ArrayTypeToken extends TypeToken {

  final TypeToken componentType;

  protected ArrayTypeToken(TypeToken componentType) {
    this.componentType = componentType;
  }


  @Override
  public boolean isAssignableFrom(TypeToken other) {
    return equals(other);
  }
  
  @Override
  public boolean equals(Object obj) {
    return EqualsImpl.check(this, obj, ArrayTypeToken.class, new Predicate<ArrayTypeToken>() {
      @Override
      public boolean test(ArrayTypeToken other) {
        return componentType.equals(other.componentType);
      }
    });
  }
  @Override
  public int hashCode() {
    return Integer.rotateLeft(componentType.hashCode(),7);
  }

  @Override
  public boolean equalSatisfyingParams(TypeToken token) {
    if (token == this) {
      return true;
    }
    if (token == null) {
      return false;
    }
    if (!(token instanceof ArrayTypeToken)) {
      return false;
    }
    ArrayTypeToken other = (ArrayTypeToken)token;
    return componentType.equalSatisfyingParams(other);
  }

  @Override
  public String getName(boolean fullp) {
    return componentType.getName(fullp)+"[]";
  }


  @Override
  public Class<?> rawClass() {
    Class<?> cc = componentType.rawClass();
    return Array.newInstance(cc, 0).getClass();
  }



  @Override
  public TypeToken elementType() {
    return componentType;
  }

  @Override
  public boolean isArray() {
    return true;
  }

  @Override
  public boolean isParameterized() {
    return componentType.isParameterized();
  }

  @Override
  public void fillAncestors(Map<Class<?>, TypeTemplate> map) {
    throw new UnsupportedOperationException(String.format("Array type %s cannot be ancestor", this));
  }


  @Override
  public TypeToken[] computeParents() {
    if (componentType == OBJECT) {
      return new TypeToken[] {OBJECT};
    }
    return mapToArrayTokens(componentType.parents());
  }


  private static TypeToken[] mapToArrayTokens(TypeToken[] tokens) {
    int n = tokens.length;
    TypeToken[] array = new TypeToken[n];
    for (int i=0; i<n; i++) {
      array[i] = TypeToken.findArray(tokens[i]);
    }
    return array;
  }


  @Override
  public TypeToken[] computeAncestors() {
    return mapToArrayTokens(componentType.ancestors());
  }

  
}