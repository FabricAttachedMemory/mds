/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.coroutines;

import java.util.Iterator;
import java.util.NoSuchElementException;

import com.hpl.erk.iter.ConstIterator;

/**
 * An {@link Iterator} implemented as a simple coroutine.  The implementation class implements {@link #computeVal()}, 
 * which returns a value either by returning the result of calling {@link #yield(val)} to assert the next value or by
 * returning the result of calling {@link #done()} to indicate that there are no more values to be produced.
 * 
 * @author Evan Kirshenbaum
 *
 * @param <X> The class of object produced.
 */
public abstract class Coroutine<X> extends ConstIterator<X> {
  /**
   * An indication of whether a coroutine is done iterating or, whether the next value is known, or whether
   * it's not known which applies.  By rights, this should be a private class, but it needs to be exposed in
   * order to be used as the return type for {@link Coroutine#computeVal()}.  The enum values should not be used
   * outside of the implementation of {@link Coroutine}.
   */
  protected enum State { UNKNOWN, HAS_VALUE, DONE };
  
  private State state = State.UNKNOWN;
  private X val = null;
  
  /**
   * Compute the next value to be handed out.
   * @return either {@link #yield(val)} to identify the next value or {@link #done()} to indicate that there 
   * are no more values.
   */
  protected abstract State computeVal();
  
  /**
   * Assert that there are no more values to be handed out. 
   * @return an opaque token
   */
  protected final State done() {
    return state = State.DONE;
  }

  /**
   * Specify the next value to be handed out.
   * @param newVal the next value
   * @return an opaque token
   */
  protected final State yield(X newVal) {
    val = newVal;
    return state = State.HAS_VALUE;
  }

  @Override
  public final boolean hasNext() {
    if (state == State.UNKNOWN) {
      return computeVal() == State.HAS_VALUE;
    }
    return state == State.HAS_VALUE;
  }

  @Override
  public final X next() {
    if (hasNext()) {
      X v = val;
      state = State.UNKNOWN;
      val = null;
      return v;
    } else {
      throw new NoSuchElementException();
    }
  }

}
