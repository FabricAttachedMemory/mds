/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.formatters;

import java.io.PrintStream;
import java.math.BigInteger;

import com.hpl.erk.formatters.IntFormatter.MagnitudeFormatter;
import com.hpl.erk.util.Strings;

public class DigitStringMagFormatter extends MagnitudeFormatter {
  public static final DigitStringMagFormatter HEX = new UnsignedDefault(16);
  public static final DigitStringMagFormatter DECIMAL = new DigitStringMagFormatter(10);
  public static final DigitStringMagFormatter OCTAL = new UnsignedDefault(8);
  public static final DigitStringMagFormatter BINARY = new UnsignedDefault(2);
  public final int radix;
  
  public static class UnsignedDefault extends DigitStringMagFormatter {

    public UnsignedDefault(int base) {
      super(base);
    }
    
    @Override
    public int defaultGroupSize() {
      return 4;
    }
    
    @Override
    public boolean defaultSigned() {
      return false;
    }
    
  }
  
  
  public DigitStringMagFormatter(int base) {
    this.radix = base;
  }
  
  @Override
  public String formatMagnitude(long u, IntFormatter fmtr) {
    String ungrouped = ungroupedString(u);
    int zeroFillTo = fmtr.minDigits();
    if (zeroFillTo > 0) {
      ungrouped = Strings.padLeft(ungrouped, zeroFillTo, "0");
    }
    String sep = fmtr.separator();
    if (sep == null) {
      return ungrouped+ordSuffix(fmtr, ungrouped);
    }
    int groupSize = fmtr.groupSize();
    if (!fmtr.isGrouped()) {
      return ungrouped;
    }
    if (groupSize == 0) {
      groupSize = defaultGroupSize();
    }
    int len = ungrouped.length();
    if (len <= groupSize) {
      return ungrouped+ordSuffix(fmtr, ungrouped);
    }
    int firstGroupSize = len % groupSize;
    if (firstGroupSize == 0) {
      firstGroupSize = groupSize;
    }
    SeqFormatter<String> sf = SeqFormatter.withSep(sep);
    for (int start = 0, gs = firstGroupSize; start < len; start+=gs, gs=groupSize) {
      final String group = ungrouped.substring(start, start+gs);
      sf.add(group);
    }
    return sf.toString()+ordSuffix(fmtr, ungrouped);
  }
  
  private static String ordSuffix(final IntFormatter fmtr, final String ungrouped) {
    if (!fmtr.isOrdinal()) {
      return "";
    }
    final int n = ungrouped.length();
    if (n > 1 && ungrouped.charAt(n-2) == '1') {
      return "th";
    }
    switch (ungrouped.charAt(n-1)) {
    case '1':
      return "st";
    case '2':
      return "nd";
    case '3':
      return "rd";
    default:
      return "th";
    }
  }

  public int defaultGroupSize() {
    return 3;
  }
  
  @Override
  public boolean defaultSigned() {
    return true;
  }
  
  public static DigitStringMagFormatter forRadix(int radix) {
    switch (radix) {
    case 16:
      return HEX;
    case 10:
      return DECIMAL;
    case 8:
      return OCTAL;
    case 2:
      return BINARY;
    }
    if (radix < 2 || radix > 36) {
      throw new IllegalArgumentException(String.format("Radix must be between 2 and 36 (was %,d)", radix));
    }
    return new DigitStringMagFormatter(radix);
  }
  

  private String ungroupedString(long u) {
    if (u < 0) {
      byte[] bytes = byteArray(u);
      BigInteger big = new BigInteger(1, bytes);
      return big.toString(radix);
    }
    return Long.toString(u, radix);
  }

  private static byte[] byteArray(long u) {
    final int nBytes = Long.SIZE/8;
    byte[] bytes = new byte[nBytes];
    for (int i=nBytes-1; i>=0; i--, u>>>=8) {
      bytes[i] = (byte)(u & 0xFF);
    }
    return bytes;
  }
  
  public static void main(String[] args) {
    long n = -Long.MAX_VALUE;
    trace(n);
    trace(Long.MAX_VALUE);
    System.out.format("%s%n", IntFormatter.hex().ordinal().underscores().padTo(40, "/*").format(n));
    System.out.format("%s%n", IntFormatter.decimal().ordinal().commas().padTo(40, "/****").format(n));
    System.out.format("%s%n", IntFormatter.english().ordinal().format(n));
  }


  private static PrintStream trace(long n) {
    return System.out.format("%016x, %d%n", n, n);
  }
  
}
