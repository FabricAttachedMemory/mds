/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * TopN.java
 */
package com.hpl.erk;

import java.util.Collection;
import java.util.Comparator;
import java.util.TreeSet;


/** ADT to track and record the top 'N' (e.g. 500) unique items, and drop the rest.
 * NOTE: If the comparator returns equals, it will only keep one of them (the first one added).
 * <pre>
 * Usage:
 * 		t = new TopN( 500, [mycomparator]);// keep the *minimum* 500 items
 * 		To track the *maximum* 500, provide a Comparator to the constructor
 *  
 * 		while (input) {  t.add(input); }		// fill it up
 * </pre>
 * <p>
 * @author Evan Kirshenbaum
 * Created on Aug 8, 2004
 */
public class TopN<T> extends TreeSet<T> {
  private static final long serialVersionUID = -953208410529320137L;
  protected final int n;
  private final Comparator<? super T> comparator;
  
  public TopN(int size, Comparator<? super T> c) {
    super(c);
    n = size;
    comparator = c;
  }
    
  public TopN(int size) {
    this(size, (Comparator<T>)null);
  }
  
  public TopN(int size, Comparator<? super T> c, Collection<? extends T> coll) {
    this(size, c);
    addAll(coll);
  }
  public TopN(int size, Collection<? extends T> coll) {
    this(size, (Comparator<T>)null);
    addAll(coll);
  }
   
  @SuppressWarnings("unchecked")
  private final int compare(T a, T b) {
    return comparator==null ? ((Comparable<T>)a).compareTo(b) : comparator.compare(a, b);
  }
  


  @Override
  public boolean add(T obj) {
    if (size() >= n && compare(obj, last()) >= 0) {
      return false;
    }
    if (super.add(obj)) {
      if (size() > n) {
        super.remove(last());
      }
      return true;
    }
    return false;
  }

  @Override
  public boolean remove(Object obj) {
    throw new UnsupportedOperationException();
  }

  @Override
  public boolean addAll(Collection<? extends T> c) {
    /*
     * We can't allow the optimization that TreeSet makes when
     * the collection is a SortedSet
     */
    boolean modified = false;
    for (T e : c) {
      if (add(e)) {
        modified = true;
      }
    }
    return modified;
  }

}
