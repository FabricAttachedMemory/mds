/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import com.hpl.erk.func.SourceExhausted;

public class LastNSink<Head, In> extends EagerLink<Head, In, In> {
  protected final In[] buffer;
  protected int next = 0;
  protected boolean full = false;
  
  protected LastNSink(Chain<Head, ? extends In> pred, int n) {
    super(pred);
    this.buffer = createArray(n);
  }

  @SuppressWarnings("unchecked")
  protected static <In> In[] createArray(int n) {
    return (In[])new Object[n];
  }

  @Override
  protected boolean see(In elt) {
    buffer[next++] = elt;
    if (next == buffer.length) {
      next = 0;
      full = true;
    }
    return true;
  }
  
  @Override
  public int expectedSize() {
    return full ? buffer.length : next;
  }
  
  @Override
  public RandomAccessSource<In> randomAccess() {
    return new RandomAccessSource<In>() {
      protected final int first = full ? next : 0;
      protected final int len = full ? buffer.length : next;
      @Override
      public int size() {
        return len;
      }

      @Override
      public In get(int i) {
        return buffer[(first+i++)%len];
      }};
  }
  
  @Override
  public Flow pipeInto(final Receiver<? super In> sink) {
    return new Flow() {
      protected final int first = full ? next : 0;
      protected final int len = full ? buffer.length : next;
      @Override
      public void perform() {
        for (int i=0; i<len; i++) {
          if (sink.receive(buffer[(first+i++)%len])) {
            return;
          }
        }
        sink.close();
      }
    };
  }
  
  @Override
  public Context createContext() {
    return new Context() {
      protected final int first = full ? next : 0;
      protected final int len = full ? buffer.length : next;
      protected int i = 0;

      @Override
      public In produce() throws SourceExhausted {
        exhaustedIf(i >= len);
        return buffer[(first+i++)%len];
      }
    };
  }

}
