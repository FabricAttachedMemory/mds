/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import com.hpl.erk.func.SourceExhausted;

public class IntSeqHead extends ChainHead<Integer> {
  final int min;
  final int max;
  final int step;
  final boolean down;
  final int expected;
  
  public IntSeqHead(int min, int max, int step) {
    this.min = min;
    this.max = max;
    this.step = step;
    down = max < min;
    expected = max == Integer.MAX_VALUE ? max : (max-min)/step+((max-min)%step == 0 ? 1 : 0);
  }
  
  @Override
  public int expectedSize() {
    return expected;
  }
  
  @Override
  public RandomAccessSource<Integer> randomAccess() {
    return new RandomAccessSource<Integer>() {
      @Override
      public int size() {
        return expected;
      }
      
      @Override
      public Integer get(int i) {
        return min+step*i;
      }
    };
  }

  @Override
  public Flow pipeInto(final Receiver<? super Integer> sink) {
    return new Flow() {
      @Override
      public void perform() {
        int val = min;
        for (int i=0; i<expected; i++,val+=step) {
          if (!sink.receive(val)) {
            return;
          }
        }
        sink.close();
      }
    };
  }

  @Override
  public Context createContext() {
    return new Context() {
      int i=0;
      int val = min;
      @Override
      public Integer produce() throws SourceExhausted {
        exhaustedIf(i >= expected);
        int res = val;
        val += step;
        i++;
        return res;
      }
    };
  }
 
}
