/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.Functions;
import com.hpl.erk.func.Predicate;
import com.hpl.erk.func.SourceExhausted;
import com.hpl.erk.func.UnaryFunc;


public abstract class CollectorSink<Head, In, Out> extends EagerLink<Head, In, Out> implements ChainValue<Head, Out> {
  protected Out val;
  protected CollectorSink(Chain<Head, ? extends In> pred, Out initial) {
    super(pred);
    val = initial;
  }
  
  

  @Override
  public int expectedSize() {
    return 1;
  }

  @Override
  public RandomAccessSource<Out> randomAccess() {
    return new RandomAccessSource<Out>() {
      @Override
      public int size() {
        return 1;
      }

      @Override
      public Out get(int i) {
        return val;
      }};
  }

  @Override
  public Flow pipeInto(final Receiver<? super Out> sink) {
    return new Flow() {
      @Override
      public void perform() {
        if (sink.receive(val)) {
          sink.close();
        }
      }
    };
  }



  public Context createContext() {
    return new Context() {
      protected boolean produced = false;

      @Override
      public Out produce() throws SourceExhausted {
        exhaustedIf(produced);
        produced = true;
        return val;
      }
    };
  }
  
 

  @Override
  public CollectorSink<Head, ?, Out> first() {
    return this;
  }
  
  @Override
  public Out firstVal() {
    return val();
  }
  
  public Out val() {
    return val;
  }
  
  @Override
  public <H, T extends Head> CollectorSink<H, In, Out> prepend(Chain<H, T> chain) {
    @SuppressWarnings("unchecked")
    final CollectorSink<H, In, Out> newChain = (CollectorSink<H, In, Out>)super.prepend(chain);
    return newChain;
  }
  
  @Override
  public <T extends Head> Out valFrom(Chain<Complete, T> chain) {
    return prepend(chain).val();
  }

  @Override
  public <T> CollectorSink<Head, Out, T> map(UnaryFunc<? super Out, ? extends T> transformer) {
    return map(Functions.always(transformer));
  }
  
  @Override
  public boolean satisfies(NullaryFunc<? extends Predicate<? super Out>> creator) {
    return creator.call().test(val);
  }
  @Override
  public boolean satisfies(Predicate<? super Out> predicate) {
    return predicate.test(val);
  }
  @Override
  public <T> CollectorSink<Head, Out, T> map(final NullaryFunc<? extends UnaryFunc<? super Out, ? extends T>> creator) {
    return activate(new CollectorSink<Head, Out, T>(this, null) {
      @Override
      protected boolean see(Out elt) {
        val = creator.call().call(elt);
        return false;
      }});
  }
}
