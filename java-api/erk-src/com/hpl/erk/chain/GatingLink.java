/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import com.hpl.erk.func.Control;
import com.hpl.erk.func.Control.ControlVal;
import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.SourceExhausted;

public class GatingLink<Head, In> extends Link<Head, In, In> {
  protected GatingLink(Chain<Head, ? extends In> pred,
                       NullaryFunc<? extends Control<? super In>> creator) 
  {
    super(pred);
    this.creator = creator;
  }

  protected final NullaryFunc<? extends Control<? super In>> creator;
  
  @Override
  public Flow pipeInto(final Receiver<? super In> sink) {
    return pred.pipeInto(new ChainedReceiver<In,In>(sink) {
      protected final Control<? super In> control = creator.call();
      protected boolean running = true;

      @Override
      public boolean receive(In val) {
        if (running) {
          ControlVal cv = control.check(val);
          if (cv == ControlVal.USE) {
            return sink.receive(val);
          } else if (cv == ControlVal.STOP) {
            running = false;
          } else {
            return true;
          }
//          switch (cv) {
//          case USE: 
//            return sink.receive(val);
//          case SKIP:
//            return true;
//          case STOP:
//            running = false;
//          }
        }
        return false;
      }});
  }

  
  @Override
  public Context createContext() {
    return new Context() {
      protected final Control<? super In> control = creator.call();
      protected boolean stopped = false;
      

      @Override
      public In produce() throws SourceExhausted {
        exhaustedIf(stopped);
        while (true) {
          In val = source.produce();
          ControlVal cv = control.check(val);
          if (cv == ControlVal.USE) {
            return val;
          } else if (cv == ControlVal.STOP) {
            stopped = true;
            throw SOURCE_EXHAUSTED;
          }
//          switch (cv) {
//          case USE:
//            return val;
//          case STOP:
//            stopped = true;
//            throw SOURCE_EXHAUSTED;
//          case SKIP:
//             // go around again
//          }
        }
      }
    };
  }
  
 }
