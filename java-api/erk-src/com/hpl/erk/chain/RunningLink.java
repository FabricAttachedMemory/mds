/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.Reducer;
import com.hpl.erk.func.SourceExhausted;

public class RunningLink<Head, In, Out> extends Link<Head, In, Out> {
  protected final NullaryFunc<? extends Reducer<? super In, Out>> creator;
  protected final Out initial;

  public RunningLink(Chain<Head, ? extends In> pred,
      NullaryFunc<? extends Reducer<? super In, Out>> creator, Out initial) {
    super(pred);
    this.creator = creator;
    this.initial = initial;
  }

  @Override
  public int expectedSize() {
    return pred.expectedSize();
  }

  @Override
  public Flow pipeInto(final Receiver<? super Out> sink) {
    return pred.pipeInto(new ChainedReceiver<In,Out>(sink) {
      Reducer<? super In, Out> reducer = creator.call();
      Out oldVal = initial;

      @Override
      public boolean receive(In val) {
        oldVal = reducer.update(oldVal, val);
        return sink.receive(oldVal);
      }});
  }

  @Override
  public Context createContext() {
    return new Context() {
      Reducer<? super In, Out> reducer = creator.call();
      Out val = initial;

      @Override
      public Out produce() throws SourceExhausted {
        In elt = source.produce();
        val = reducer.update(val, elt);
        return val;
      }
    };
  }

}
