/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import java.util.Comparator;
import java.util.Iterator;

import com.hpl.erk.TopN;
import com.hpl.erk.func.SourceExhausted;

public class TopNLink<Head, In> extends EagerLink<Head, In, In> {
  protected final int n;
  protected final Comparator<? super In> comparator;
  protected TopN<Indexed<In>> topN;
  int next;
  
  final static class Indexed<T> {
    final T val;
    final int index;
    protected Indexed(T val, int index) {
      this.val = val;
      this.index = index;
    }
  }
  
  protected TopNLink(Chain<Head, ? extends In> pred, int n, Comparator<? super In> comparator) {
    super(pred);
    this.n = n;
    this.comparator = comparator;
  }

//  protected TopNLink(Chain<Head, ? extends In> pred, int n) {
//    this(pred, n);
//  }
  
  @Override
  public void activate() {
    if (complete) {
      Comparator<Indexed<In>> indexedComparator = new Comparator<Indexed<In>>() {
        @Override
        public int compare(Indexed<In> o1, Indexed<In> o2) {
          int val = comparator.compare(o1.val, o2.val);
          if (val == 0) {
            val = o1.index-o2.index;
          }
          return val;
        }
      };
      topN = new TopN<>(n, indexedComparator);
    }
    next = 0;
    super.activate();
  }

  @Override
  protected boolean see(In elt) {
    topN.add(new Indexed<In>(elt, next++));
    return true;
  }
  
  @Override
  public int expectedSize() {
    int pSize = pred.expectedSize();
    if (pSize == Integer.MAX_VALUE || pSize < n) {
      return pSize;
    }
    return n;
  }

  @Override
  public Context createContext() {
    return new Context() {
      Iterator<Indexed<In>> iter = topN.iterator();
      @Override
      public In produce() throws SourceExhausted {
        exhaustedIf(!iter.hasNext());
        return iter.next().val;
      }};
  }

  @Override
  public Flow pipeInto(final Receiver<? super In> sink) {
    return new Flow() {
      @Override
      public void perform() {
        for (Indexed<In> elt : topN) {
          if (!sink.receive(elt.val)) {
            return;
          }
        }
        sink.close();
      }
    };
  }

}
