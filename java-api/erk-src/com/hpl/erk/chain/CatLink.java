/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import java.util.Iterator;

import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.SourceExhausted;
import com.hpl.erk.func.UnaryFunc;

public class CatLink<Head, In, Out> extends Link<Head, In, Out> {
  protected final NullaryFunc<? extends UnaryFunc<? super In, ? extends Iterable<? extends Out>>> creator;

  public CatLink(
      Chain<Head, ? extends In> pred,
      NullaryFunc<? extends UnaryFunc<? super In, ? extends Iterable<? extends Out>>> creator) 
  {
    super(pred);
    this.creator = creator;
  }

  @Override
  public Flow pipeInto(final Receiver<? super Out> sink) {
    return pred.pipeInto(new ChainedReceiver<In,Out>(sink) {
      protected final UnaryFunc<? super In, ? extends Iterable<? extends Out>> transformer = creator.call();

      @Override
      public boolean receive(In val) {
        for (Out elt : transformer.call(val)) {
          if (!sink.receive(elt)) {
            return false;
          }
        }
        return true;
      }
    });
  }


  @Override
  public Context createContext() {
    return new Context() {
      protected final UnaryFunc<? super In, ? extends Iterable<? extends Out>> transformer = creator.call();
      protected Iterator<? extends Out> iter;

      @Override
      public Out produce() throws SourceExhausted {
        while (iter == null || !iter.hasNext()) {
          In elt = source.produce();
          Iterable<? extends Out> iterable = transformer.call(elt);
          iter = iterable.iterator();
        }
        return iter.next();
      }
    }; 
  }

}
