/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import com.hpl.erk.func.Consumer;
import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.SourceExhausted;

public class ConsumerSink<Head, In> extends EagerLink<Head, In, NoValue> {
  protected final NullaryFunc<? extends Consumer<? super In>> consumerCreator;
  protected Consumer<? super In> consumer = null;
  
  protected ConsumerSink(Chain<Head, ? extends In> pred, NullaryFunc<? extends Consumer<? super In>> consumerCreator) {
    super(pred);
    this.consumerCreator = consumerCreator;
  }
  
  @Override
  public Flow pipeInto(com.hpl.erk.chain.Chain.Receiver<? super NoValue> sink) {
    throw new UnsupportedOperationException();
  }
  
  @Override
  public Context createContext() {
    return new Context() {
      @Override
      public NoValue produce() throws SourceExhausted {
        throw SOURCE_EXHAUSTED;
      }
      
    };
  }
  
  @Override
  public void activate() {
    consumer = consumerCreator.call();
    super.activate();
  }

  @Override
  protected boolean see(In elt) {
    return consumer.see(elt);
  }

}
