/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain.kv;

import com.hpl.erk.chain.Chain;
import com.hpl.erk.chain.Flow;
import com.hpl.erk.func.Pair;
import com.hpl.erk.func.SourceExhausted;

public class IndexedLink<Head, In> extends ForkLink<Head, In, Integer, In> {

  public IndexedLink(Chain<Head, ? extends In> pred) {
    super(pred);
  }
  
  @Override
  public int expectedSize() {
    return pred.expectedSize();
  }
  
  @Override
  public Flow pipeInto(final KeyValChain.Receiver<? super Integer, ? super In> sink) {
    return pred.pipeInto(new Chain.Receiver<In>() {
      int next = 0;
      @Override
      public boolean receive(In val) {
        return sink.receive(next++, val);
      }
      @Override
      public void close() {
        sink.close();
      }
    });
  }

  @Override
  public Context createContext() {
    return new Context() {
      int n = 0;

      @Override
      public Pair<Integer, In> produce() throws SourceExhausted {
        return new Pair<Integer,In>(n++,source.produce());
      }
    };
  }
}
