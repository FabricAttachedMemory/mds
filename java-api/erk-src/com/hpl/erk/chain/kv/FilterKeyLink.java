/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain.kv;

import com.hpl.erk.chain.Flow;
import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.Pair;
import com.hpl.erk.func.Predicate;
import com.hpl.erk.func.SourceExhausted;

public class FilterKeyLink<Head, K, V> extends	KeyValLink<Head, K, V, K, V> {
  protected final NullaryFunc<? extends Predicate<? super K>> creator;
  protected final boolean keep;

  public FilterKeyLink(
                       KeyValChain<Head, ? extends K, ? extends V> pred,
                       NullaryFunc<? extends Predicate<? super K>> creator,
                               boolean keep) {
    super(pred);
    this.creator = creator;
    this.keep = keep;
  }

  @Override
  public Flow pipeInto(final Receiver<? super K, ? super V> sink) {
    return pred.pipeInto(new ChainedReceiver<K, V, K, V>(sink) {
      Predicate<? super K> predicate = creator.call();

      @Override
      public boolean receive(K key, V value) {
        if (predicate.test(key) == keep) {
          return sink.receive(key, value);
        }
        return true;
      }});
  }


  @Override
  public Context createContext() {
    return new Context() {
      Predicate<? super K> predicate = creator.call();

      @Override
      public Pair<K, V> produce() throws SourceExhausted {
        while (true) {
          Pair<? extends K, ? extends V> elt = source.produce();
          if (predicate.test(elt.key) == keep) {
            return new Pair<K,V>(elt.key, elt.value);
          }
        }
      }
    };
  }
}
