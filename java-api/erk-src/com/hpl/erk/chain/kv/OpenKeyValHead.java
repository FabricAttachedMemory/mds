/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain.kv;

import com.hpl.erk.chain.Chain;
import com.hpl.erk.chain.Flow;
import com.hpl.erk.chain.exceptions.IncompleteChainInvoked;
import com.hpl.erk.func.Pair;
import com.hpl.erk.func.SourceExhausted;

public class OpenKeyValHead<K,V> extends KeyValChain<Pair<? extends K,? extends V>,K,V> {
  protected final Class<K> clssK;
  protected final Class<V> clssV;

  public OpenKeyValHead(Class<K> clssK, Class<V> clssV) {
    super(false);
    this.clssK = clssK;
    this.clssV = clssV;
  }
  
  @Override
  public Flow pipeInto(com.hpl.erk.chain.kv.KeyValChain.Receiver<? super K, ? super V> sink) {
    throw new IncompleteChainInvoked();
  }

  @Override
  public Context createContext() {
    throw new IncompleteChainInvoked();
  }
   
  @Override
  public <H, T extends Pair<? extends K, ? extends V>> KeyValChain<H, K, V> prepend(Chain<H, T> chain) {
    return new ForkLink<H, Pair<? extends K, ? extends V>, K, V>(chain) {
      @Override
      public ForkLink<H, Pair<? extends K, ? extends V>, K, V>.Context createContext() {
        return new Context() {
          @Override
          public Pair<? extends K, ? extends V> produce() throws SourceExhausted {
            Pair<? extends K, ? extends V> elt = source.produce();
            return elt;
          }
        };
      }
      
      @Override
      public int expectedSize() {
        return pred.expectedSize();
      }

      @Override
      public Flow pipeInto(final KeyValChain.Receiver<? super K, ? super V> sink) {
        return pred.pipeInto(new Chain.Receiver<Pair<? extends K, ? extends V>>() {
          @Override
          public boolean receive(Pair<? extends K, ? extends V> pair) {
            return sink.receive(pair.key, pair.value);
          }
          @Override
          public void close() {
            sink.close();
          }
        });
      }

     };
  }




}
