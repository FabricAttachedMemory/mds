/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain.kv;

import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import com.hpl.erk.chain.Flow;
import com.hpl.erk.func.Pair;
import com.hpl.erk.func.SourceExhausted;

public class MapHead<K,V> extends KeyValChainHead<K,V> {
  protected final Map<K, V> map;

  public MapHead(Map<K, V> map) {
    this.map = map;
  }

  @Override
  public Flow pipeInto(final Receiver<? super K, ? super V> sink) {
    return new Flow() {
      @Override
      public void perform() {
        for (Entry<K, V> entry : map.entrySet()) {
          if (!sink.receive(entry.getKey(), entry.getValue())) {
            return;
          }
        }
        sink.close();
      }
    };
  }


  @Override
  public Context createContext() {
    return new Context() {
      protected final Iterator<Entry<K, V>> iter = map.entrySet().iterator();

      @Override
      public Pair<K, V> produce() throws SourceExhausted {
        exhaustedIf(!iter.hasNext());
        Map.Entry<K, V> entry = iter.next();
        return new Pair<K,V>(entry.getKey(), entry.getValue());
      }

    };
  }

}
