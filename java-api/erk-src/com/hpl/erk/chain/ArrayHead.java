/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import com.hpl.erk.func.SourceExhausted;

public class ArrayHead<Out> extends ChainHead<Out> {
  protected final Out[] array;
  
  public ArrayHead(Out[] array) {
    this.array = array;
  }
  
  @Override
  public int expectedSize() {
    return array.length;
  }
  
  @Override
  public RandomAccessSource<Out> randomAccess() {
    return new RandomAccessSource<Out>() {
      @Override
      public int size() {
        return array.length;
      }

      @Override
      public Out get(int i) {
        return array[i];
      }
    };
  }

  @Override
  public Flow pipeInto(final Receiver<? super Out> sink) {
    return new Flow() {
      @Override
      public void perform() {
        final int n = array.length;
        for (int i=0; i<n; i++) {
          if (!sink.receive(array[i])) {
            return;
          }
        }
        sink.close();
      }
    };
  }

  @Override
  public Context createContext() {
    return new Context() {
      final int n = array.length;
      int i=0;

      @Override
      public Out produce() throws SourceExhausted {
        exhaustedIf(i >= n);
        return array[i++];
      }
    };
  }

}
