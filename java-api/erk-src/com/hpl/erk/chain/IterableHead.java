/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import java.util.Iterator;

import com.hpl.erk.func.SourceExhausted;

public class IterableHead<Out> extends ChainHead<Out> {
  protected final Iterable<? extends Out> iterable;
  
  public IterableHead(Iterable<? extends Out> iterable) {
    this.iterable = iterable;
  }

  @Override
  public Flow pipeInto(final Receiver<? super Out> sink) {
    return new Flow() {
      
      @Override
      public void perform() {
        for (Out elt : iterable) {
          if (!sink.receive(elt)) {
            return ;
          }
        }
        sink.close();
      }
    };
  }

  @Override
  public Context createContext() {
    return new Context() {
      final Iterator<? extends Out> iter = iterable.iterator();

      @Override
      public Out produce() throws SourceExhausted {
        if (iter.hasNext()) {
          return iter.next();
        }
        throw SOURCE_EXHAUSTED;
      }
    };
  }
}
