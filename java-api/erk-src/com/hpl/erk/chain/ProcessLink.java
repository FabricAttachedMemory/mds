/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.chain;

import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.Process;
import com.hpl.erk.func.SourceExhausted;

// TODO: Figure out how to handle processes that accumulate stuff to send when the source closes 
public class ProcessLink<Head, In, Out> extends Link<Head, In, Out> {
  protected final NullaryFunc<? extends Process<? super In, ? extends Out>> creator;


  public ProcessLink(Chain<Head, ? extends In> pred,
                     NullaryFunc<? extends Process<? super In, ? extends Out>> creator) 
  {
    super(pred);
    this.creator = creator;
  }

  @Override
  public Flow pipeInto(final Receiver<? super Out> sink) {
    
    return pred.pipeInto(new Receiver<In>() {
      protected final Process<? super In, ? extends Out> process = creator.call();
      @Override
      public boolean receive(In val) {
        List<? extends Out> list = process.process(val);
        if (list != null) {
          for (Out elt : list) {
            if (!sink.receive(elt)) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      @Override
      public void close() {
        List<? extends Out> list = process.close();
        if (list != null) {
          for (Out elt : list) {
            if (!sink.receive(elt)) {
              return;
            }
          }
          sink.close();
        }
      }
    });
  }

  @Override
  public Context createContext() {
    return new Context() {
      protected final Process<? super In, ? extends Out> process = creator.call();
      Iterator<? extends Out> remaining = Collections.<Out>emptyList().iterator();
      boolean sourceExhausted = false;

      @Override
      public Out produce() throws SourceExhausted {
        while (true) {
          exhaustedIf(remaining == null);
          if (remaining.hasNext()) {
            return remaining.next();
          }
          exhaustedIf(sourceExhausted);
          List<? extends Out> list;
          try {
            In elt = source.produce();
			list = process.process(elt);
          } catch (SourceExhausted e) {
            sourceExhausted = true;
            list = process.close();
          }
          remaining = list == null ? null : list.iterator();
        }
      }
    };
  }
}
