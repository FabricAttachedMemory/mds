/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.util;

import java.util.Collection;
import java.util.Iterator;

import com.hpl.erk.func.UnaryFunc;
import com.hpl.erk.iter.ConstIterator;

public class IterUtils {
  public static <T> Iterator<T> noRemove(Iterator<T> iterator) {
    return ConstIterator.masking(iterator);
  }
  
  public static <T> T first(Iterator<? extends T> iterator) {
    return iterator.next();
  }
  
  public static <T> T first(Iterable<? extends T> iterable) {
    return first(iterable.iterator());
  }
  
  public static <T> T popNext(Iterator<? extends T> iterator) {
    final T val = iterator.next();
    iterator.remove();
    return val;
  }
  
  public static <T> T popFirst(Iterable<? extends T> iterable) {
    return popNext(iterable.iterator());
  }
  
  public static <T> T popNextIfExists(Iterator<? extends T> iterator) {
    if (iterator == null || !iterator.hasNext()) {
      return null;
    }
    return popNext(iterator);
  }
  public static <T> T popFirstIfExists(Iterable<? extends T> iterable) {
    if (iterable == null) {
      return null;
    }
    return popNextIfExists(iterable.iterator());
  }
  public static <T> T popFirstIfExists(Collection<? extends T> iterable) {
    if (iterable == null || iterable.isEmpty()) {
      return null;
    }
    return popNextIfExists(iterable.iterator());
  }
  public static <T> T nextOrNull(Iterator<? extends T> iterator) {
    return (iterator == null || !iterator.hasNext()) ? null : iterator.next();
  }
  public static <X,Y> Iterator<Y> map(final Iterator<X> iterator, final UnaryFunc<? super X, ? extends Y> transformer) {
    return new Iterator<Y>() {
      @Override
      public boolean hasNext() {
        return iterator.hasNext();
      }

      @Override
      public Y next() {
        return transformer.call(iterator.next());
      }

      @Override
      public void remove() {
        iterator.remove();
      }};
    
  }
}
