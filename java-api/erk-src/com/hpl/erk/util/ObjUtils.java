/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.util;

import com.hpl.erk.func.NullaryFunc;
import com.hpl.erk.func.Relation;
import com.hpl.erk.func.UnaryFunc;

public class ObjUtils {
  public static <T> T whenNull(T val, T def) {
    return val == null ? def : val;
  }

  public static <T> T whenNull(T val, NullaryFunc<? extends T> defCreator) {
    return val == null ? defCreator.call() : val;
  }
  
  public static <X,Y> Y unlessNull(X val, UnaryFunc<? super X, ? extends Y> transformer) {
    return val == null ? null : transformer.call(val);
  }

  public static UnaryFunc<Object,String> asString() {
    return new UnaryFunc<Object, String>() {
      @Override
      public String call(Object val) {
        return val.toString();
      }
    };
  }
  
  public static Relation<Object, Object> identical() {
    return new Relation<Object, Object>() {
      @Override
      public boolean test(Object a, Object b) {
        return a == b;
      }
    };
  }
  
  public static Relation<Object, Object> equalTo() {
    return new Relation<Object, Object>() {
      @Override
      public boolean test(Object a, Object b) {
        return a==null ? b==null : a.equals(b);
      }
    };
  }
  
  public static <T, U extends T> U castClone(U obj, T superClone) {
    @SuppressWarnings("unchecked")
    U clone = (U)superClone;
    return clone;
  }
  

  
}
