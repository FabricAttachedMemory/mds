/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk.util;

import java.util.Comparator;

import com.hpl.erk.formatters.IntFormatter;
import com.hpl.erk.func.UnaryFunc;

public class NumUtils {
  public static int longHash(long n) {
    return (int)(n ^ (n>>>32));
  }
  
  public static String inWords(long n) {
    return IntFormatter.english().format(n);
  }
  public static String commaSeparated(long n) {
    return IntFormatter.decimal().commas().format(n);
  }
  public static String underscoreSeparated(long n) {
    return IntFormatter.decimal().underscores().format(n);
  }
  public static String hex(long n, int min) {
    return IntFormatter.hex().underscores().minDigits(min).format(n);
  }
  public static String hex(long n) {
    return IntFormatter.hex().underscores().format(n);
  }
  
  public static UnaryFunc<Number, String> toCommaSeparated() {
    return toFormatted(IntFormatter.decimal().commas());
  }
  
  public static UnaryFunc<Number, String> toFormatted(final IntFormatter formatter) {
    return new UnaryFunc<Number, String>() {
      @Override
      public String call(Number val) {
        return formatter.format(val.longValue());
      }
    };
  }
  
  public static long whenNull(Long n, long def) {
    return n == null ? def : n;
  }
  public static int whenNull(Integer n, int def) {
    return n == null ? def : n;
  }
  public static short whenNull(Short n, short def) {
    return n == null ? def : n;
  }
  public static char whenNull(Character n, char def) {
    return n == null ? def : n;
  }
  public static byte whenNull(Byte n, byte def) {
    return n == null ? def : n;
  }
  public static double whenNull(Double n, double def) {
    return n == null ? def : n;
  }
  public static float whenNull(Float n, float def) {
    return n == null ? def : n;
  }
  
  public static Comparator<Number> comparator() {
    return new Comparator<Number>() {
      @Override
      public int compare(Number o1, Number o2) {
        if (o1 == o2) {
          return 0;
        }
        if (o1 == null) {
          return 1;
        }
        if (o2 == null) {
          return -1;
        }
        return Double.compare(o1.doubleValue(), o2.doubleValue());
      }
    };
  }

}
