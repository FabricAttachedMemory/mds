/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.erk;

import com.hpl.erk.adt.ForClass;
import com.hpl.erk.func.UnaryFunc;

public class ClassDispatchTransformer<X,Y> implements UnaryFunc<X,Y> {
  private final ForClass<UnaryFunc<?, ? extends Y>> forClass = new ForClass<>();
  private UnaryFunc<? super X, ? extends Y> nullTransformer = null;
  private UnaryFunc<? super X, ? extends Y> defaultTransformer = new UnaryFunc<X, Y>() {
    @Override
    public Y call(X val) {
      if (val == null) {
        throw new IllegalArgumentException("No transformer for null");
      }
      throw new IllegalArgumentException(String.format("No transformer for object of class %s", val.getClass().getName()));
    }};

  @Override
  public Y call(X val) {
    if (val == null) {
      if (nullTransformer != null) {
        return nullTransformer.call(val);
      }
      return defaultTransformer.call(val);
    }
    Class<?> clss = val.getClass();
    UnaryFunc<? super X, ? extends Y> tf = findTransformer(clss);
    return tf.call(val);
  }
  
  public ClassDispatchTransformer<X, Y> def(UnaryFunc<? super X, ? extends Y> tf) {
    defaultTransformer = tf;
    return this;
  }
  public ClassDispatchTransformer<X, Y> forNull(UnaryFunc<? super X, ? extends Y> tf) {
    nullTransformer = tf;
    return this;
  }
  public <C extends X> ClassDispatchTransformer<X, Y> forClass(Class<C> clss, UnaryFunc<? super C, ? extends Y> tf) {
    forClass.bind(clss, tf);
    return this;
  }

  private UnaryFunc<? super X, ? extends Y> findTransformer(Class<?> clss) {
    UnaryFunc<?, ? extends Y> tf = forClass.getForClass(clss);
    if (tf == null) {
      return defaultTransformer;
    }
    @SuppressWarnings("unchecked")
    UnaryFunc<? super X, ? extends Y> tf2 = (UnaryFunc<? super X, ? extends Y>)tf;
    return tf2;
  }
  
  
  

}
