/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


/* C++ code implementing native methods of Java class:
 *   com.hpl.mds.impl.IntFieldProxy
 */

#include "mds-debug.h"
#include <jni.h>
#include "mds_core_api.h"                           // MDS Core API
#include "pr_merge_result.h"
#include "mds_jni.h"

using namespace mds;
using namespace mds::api;
using namespace mds::jni;



extern "C" {



JNIEXPORT
void
JNICALL Java_com_hpl_mds_impl_IsoContextProxy_release
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  exception_handler(jEnv, [=]{
	indexed<iso_context_handle> self { handleIndex };
	self.release();
  });
}



/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    parentHandle
 * Signature: (J)J
 */
JNIEXPORT
jlong
JNICALL Java_com_hpl_mds_impl_IsoContextProxy_parentHandle
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  return exception_handler_wr(jEnv, [=]{
	indexed<iso_context_handle> self { handleIndex };
	indexed<iso_context_handle> parent { self->parent() };
    return parent.return_index();});
}

/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    newChild
 * Signature: (JII)J
 */
JNIEXPORT
jlong
JNICALL
Java_com_hpl_mds_impl_IsoContextProxy_newChild
  (JNIEnv *jEnv, jclass,
   jlong handleIndex,
   jint viewType,
   jint modType)
{
  return exception_handler_wr(jEnv, [=]{
	indexed<iso_context_handle> self {handleIndex};
	view_type vt = static_cast<view_type>(viewType);
	mod_type mt = static_cast<mod_type>(modType);

//	dout << "newChild: self = " << *self << endl;
//	dout << "newChild: handleIndex = " << handleIndex << endl;

	indexed<iso_context_handle> child { self->new_child(vt, mt) };
	return child.return_index();
  });
}

/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    globalHandle
 * Signature: ()J
 */
JNIEXPORT
jlong
JNICALL
Java_com_hpl_mds_impl_IsoContextProxy_globalHandle
  (JNIEnv *jEnv, jclass)
{
  return exception_handler_wr(jEnv, [](){
	static indexed<iso_context_handle> gh { iso_context_handle::global() };
//	std::cout << "Global is " << *gh << " (handle: " << gh.peek_index() << ")" << std::endl;
	return gh.return_index();
  });
}

/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    processHandle
 * Signature: ()J
 */
JNIEXPORT
jlong
JNICALL
Java_com_hpl_mds_impl_IsoContextProxy_processHandle
  (JNIEnv *jEnv, jclass)
{
  return exception_handler_wr(jEnv, [](){
	static indexed<iso_context_handle> ph { iso_context_handle::for_process() };
	return ph.return_index();
  });
}

/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    isMeregable
 * Signature: (J)Z
 */
JNIEXPORT
jboolean
JNICALL
Java_com_hpl_mds_impl_IsoContextProxy_isMeregable
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  return exception_handler_wr(jEnv, [=]{
	indexed<iso_context_handle> self { handleIndex };
	return self->is_mergeable();
  });
}

/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    isSnapshot
 * Signature: (J)Z
 */
JNIEXPORT
jboolean
JNICALL
Java_com_hpl_mds_impl_IsoContextProxy_isSnapshot
  (JNIEnv *jEnv, jclass, jlong handleIndex)
{
  return exception_handler_wr(jEnv, [=]{
	indexed<iso_context_handle> self { handleIndex };
	return self->is_snapshot();
  });
}


/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    isReadOnly
 * Signature: (J)Z
 */
JNIEXPORT
jboolean
JNICALL
Java_com_hpl_mds_impl_IsoContextProxy_isReadOnly
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  return exception_handler_wr(jEnv, [=]{
	indexed<iso_context_handle> self { handleIndex };
	return self->is_read_only();
  });
}



/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    publish
 * Signature: (JJ)V
 */
JNIEXPORT
void
JNICALL
Java_com_hpl_mds_impl_IsoContextProxy_publish
  (JNIEnv *jEnv, jclass,
   jlong handleIndex,
   jlong pubResHandle)
{
  exception_handler(jEnv, [=]{
	indexed<iso_context_handle> self { handleIndex };
	indexed<pr_merge_result *> mr { pubResHandle };
	self->publish(**mr);
  });
}

/*
 * Class:     com_hpl_mds_impl_IsoContextProxy
 * Method:    clearConflicts
 * Signature: (J)V
 */
JNIEXPORT
void
JNICALL
Java_com_hpl_mds_impl_IsoContextProxy_clearConflicts
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  exception_handler(jEnv, [=]{
	indexed<iso_context_handle> self { handleIndex };
	self->clear_conflicts();
  });
}

//JNIEXPORT
//jint
//JNICALL
//Java_com_hpl_mds_impl_IsoContextProxy_numConflicts
//  (JNIEnv *, jclass,
//   jlong handleIndex)
//{
//	indexed<iso_context_handle> self { handleIndex };
//    return self.num_conflicts();
//}

}

