/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/* C++ code implementing native methods of Java class:
 *   com.hpl.mds.impl.IntFieldProxy
 */

#include <jni.h>
#include "mds_core_api.h"                           // MDS Core API
#include "mds_jni.h"

using namespace mds;
using namespace mds::api;
using namespace mds::jni;

extern "C"
{

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_MemStats__1bytesInHeap (JNIEnv *jEnv, jclass)
  {
    return exception_handler_wr (jEnv, [=]
      {
	return mem_stats::bytes_in_heap();
      });
  }
  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_MemStats__1bytesInUse (JNIEnv *jEnv, jclass)
  {
    return exception_handler_wr (jEnv, [=]
      {
	return mem_stats::bytes_in_use();
      });
  }
  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_MemStats__1gcCycleNumber (JNIEnv *jEnv, jclass)
  {
    return exception_handler_wr (jEnv, [=]
      {
	return mem_stats::gc_cycle_number();
      });
  }
  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_MemStats__1nProcesses (JNIEnv *jEnv, jclass)
  {
    return exception_handler_wr (jEnv, [=]
      {
	return mem_stats::n_processes();
      });
  }

  JNIEXPORT
  jlong
  JNICALL
  Java_com_hpl_mds_MemStats__1nObjects (JNIEnv *jEnv, jclass)
  {
    return exception_handler_wr (jEnv, [=]
      {
	return mem_stats::n_objects();
      });
  }

}

