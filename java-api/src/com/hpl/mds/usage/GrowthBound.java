/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.usage;

import java.time.Duration;
import java.time.LocalTime;
import java.util.concurrent.TimeUnit;

import com.hpl.mds.impl.Stub;

public interface GrowthBound {
  static final GrowthBound FOR_A_NANOSECOND = over(TimeUnit.NANOSECONDS);
  static final GrowthBound FOR_A_MICROSECOND = over(TimeUnit.MICROSECONDS);
  static final GrowthBound FOR_A_MILLISECOND = over(TimeUnit.MILLISECONDS);
  static final GrowthBound FOR_A_SECOND = over(TimeUnit.SECONDS);
  static final GrowthBound FOR_A_MINUTE = over(TimeUnit.MINUTES);
  static final GrowthBound FOR_AN_HOUR = over(TimeUnit.HOURS);
  static final GrowthBound FOR_A_DAY = over(TimeUnit.DAYS);

  static GrowthBound over(double n, TimeUnit unit) {
    // TODO
    return Stub.notImplemented();
  }
  
  static GrowthBound over(TimeUnit unit) {
    return over(1, unit);
  }
  
  static GrowthBound over(Duration duration) {
    // TODO 
    return Stub.notImplemented();
  }
  
  static GrowthBound until(LocalTime end) {
    // TODO 
    return Stub.notImplemented();
  }
}
