/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.usage;

import java.util.Collection;
import java.util.function.Function;

import com.hpl.mds.ManagedObject;

public interface UsageBase<UF extends ManagedObject.ForManagedObject, U extends UsageBase<UF, U>> {
  U concrete();
  
  U during(UsageScope scope);
  
  default <T> U map(Function<T,U> fn, Collection<T> coll) {
    for (T arg : coll) {
      fn.apply(arg);
    }
    return concrete();
  }
  
  U optimizeFor(Operation<? super UF> ops);

  default U optimizeFor(Collection<Operation<? super UF>> ops) {
    return map(this::optimizeFor, ops);
  }
  
  U doNotExpect(Operation<? super UF> op);

  default U doNotExpect(Collection<Operation<? super UF>> ops) {
    return map(this::doNotExpect, ops);
  }
  
  U useAs(UsageMode<? super UF> mode);
  
  default U useAs(Collection<UsageMode<? super UF>> modes) {
    return map(this::useAs, modes);
  }

  U and(UsageBase<? super UF, ? super U> hints);
  
  default U and(Collection<UsageBase<? super UF, ? super U>>  hints) {
    return map(this::and, hints);
  }
  
  U copy();
  <U1 extends U> U1 copy(Class<U1> clss);

  // rename as()?
  <UF1 extends UF, U1 extends UsageBase<UF1,?>> U1 cast(Class<U1> clss);

}
