/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds;

import com.hpl.mds.impl.Stub;
import com.hpl.mds.usage.Operation;
import com.hpl.mds.usage.UsageBase;
import com.hpl.mds.usage.UsagePlan;
import com.hpl.mds.usage.UsageScope;

public interface ManagedOrdered<M extends ManagedObject> extends ManagedComposite, Iterable<M> {
  public static final Operation<ForManagedOrdered> ITERATE = Stub.notImplemented();
  
  public static interface Type<M extends ManagedObject, C extends ManagedOrdered<M>> extends ManagedType<C> {
    public ManagedType<M> eltType();
  }
  
  public interface ForManagedOrdered extends ManagedObject.ForManagedObject {}
  
  public interface UsageOps<UF extends ForManagedOrdered, U extends UsageOps<UF, U>> extends UsageBase<UF, U> {
    U expectedSize(long s);
    U maxSize(long s);
  }
  
  public interface Usage extends UsageOps<ForManagedOrdered, Usage> {}
  
  static Usage usage() {
    // TODO
    return Stub.notImplemented();
  }
    ManagedOrdered.Type<M,? extends ManagedOrdered<M>> type();

    default
	public ManagedType<M> eltType() {
	return type().eltType();
    }
  public long longSize();
  
  default
  public int size() {
    long s = longSize();
    if (s > Integer.MAX_VALUE) {
      return -1;
    }
    return (int)s;
  }
  
  default
  public boolean isEmpty() {
    return longSize() == 0;
  }
  
  ManagedOrdered<M> using(Usage hint);
  ManagedOrdered<M> inherentUsage(Usage hint);
  ManagedOrdered<M> usageDuring(UsageScope scope, Usage hint);
  UsagePlan usagePlan(Usage hint);

}
