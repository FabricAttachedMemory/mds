/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


package com.hpl.mds.impl;

import java.util.function.Function;

import com.hpl.mds.Caching;
import com.hpl.mds.ManagedArray;
import com.hpl.mds.ManagedRecord;
import com.hpl.mds.NativeLibraryLoader;
import com.hpl.mds.RecordType;
import com.hpl.mds.function.LongConsumer;
import com.hpl.mds.function.ToLongFunction;
import com.hpl.mds.task.Task;

public class RecordArrayFieldProxy<RT extends ManagedRecord, ET extends ManagedRecord> extends ArrayFieldProxy<RT, ET> {

  private static final NativeLibraryLoader NATIVE_LIB_LOADER = NativeLibraryLoader.getInstance();
  
  private RecordArrayTypeProxy<ET> valueType_;
  
  private RecordArrayFieldProxy(long handleIndex, RecordTypeProxy<RT> recType, ManagedStringProxy name, RecordArrayTypeProxy<ET> valType) {
    super(handleIndex, recType, name);
    this.valueType_ = valType;
  }
  
  private static native long createFieldIn(long rtHandle, long nameHandle, long valTypeHandle);
  private static native long valTypeHandle(long handle);
  private static native long getValueHandle(long handle, long ctxtHandle, long recordHandle);
  private static native long peekValueHandle(long handle, long ctxtHandle, long recordHandle);
  private static native long setValueHandle(long handle, long ctxtHandle, long recHandle, long valHandle);
  public RecordArrayTypeProxy<ET> valueType() {
    if (valueType_ == null) {
      long vtHandle = valTypeHandle(handleIndex_);
      valueType_ = RecordArrayTypeProxy.<ET>fromHandle(vtHandle);
    }
    return valueType_;
  }



    static <RT extends ManagedRecord, ET extends ManagedRecord> RecordArrayFieldProxy<RT,ET> 
    in(RecordType<RT> recType, CharSequence name, RecordArrayTypeProxy<ET> valType) 
    {
      ArrayFieldProxy<RT, ET> 
      p = ArrayFieldProxy.<RT,ET>in(recType, name, 
                                    (rh, nh) -> createFieldIn(rh, nh, valType.handleIndex()),
                                    (h, rtp, np) -> new RecordArrayFieldProxy<>(h, rtp, np, valType));
      return (RecordArrayFieldProxy<RT, ET>)p;
    }



    @Override
    public ManagedArray<ET> get(RT record) {
      Task.addRead(record, this);
      long val = RecordArrayFieldProxy.<RT,ET>getValueHandle(handleIndex_,
                                                        IsoContextProxy.current().handleIndex(),
                                                        ManagedRecordProxy.handleOf(record));

      return RecordArrayProxy.fromHandle(val, valueType_);
    }
    
    @Override
    public ManagedArray<ET> peek(RT record) {
      Task.addRead(record, this);
      long val = RecordArrayFieldProxy.<RT,ET>peekValueHandle(handleIndex_,
                                                        IsoContextProxy.current().handleIndex(),
                                                        ManagedRecordProxy.handleOf(record));

      return RecordArrayProxy.fromHandle(val, valueType_);
    }
    
    public ManagedArray<ET> set(RT rec, ManagedArray<ET> val) {
      // log.debug("RecordFieldProxy.set: val = " + val);
      Task.addWrite(rec, this);  
      setValueHandle(handleIndex_, IsoContextProxy.current().handleIndex(), 
                     ManagedRecordProxy.handleOf(rec),
                     RecordArrayProxy.handleOf(val));
      return val;
    }

  public ManagedArray<ET> getAndSet(RT rec, ManagedArray<ET> val) {
    Task.addReadWrite(rec, this);  
    long old = setValueHandle(handleIndex_, IsoContextProxy.current().handleIndex(), 
                              ManagedRecordProxy.handleOf(rec),
                              RecordArrayProxy.handleOf(val));
    return RecordArrayProxy.fromHandle(old, valueType_);
  }

    
}
