/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


package com.hpl.mds.impl;

import java.util.function.Function;

import com.hpl.mds.Caching;
import com.hpl.mds.Holder;
import com.hpl.mds.IsolationContext;
import com.hpl.mds.ManagedRecord;
import com.hpl.mds.NativeLibraryLoader;
import com.hpl.mds.RecordField;
import com.hpl.mds.RecordType;
import com.hpl.mds.function.LongConsumer;
import com.hpl.mds.function.ToLongFunction;
import com.hpl.mds.task.Task;

public class RecordFieldProxy<RT extends ManagedRecord, FT extends ManagedRecord> extends FieldProxy<RT, FT> implements RecordField<RT,FT> {

  private static final NativeLibraryLoader NATIVE_LIB_LOADER = NativeLibraryLoader.getInstance();
  
  private RecordTypeProxy<FT> valueType_;
  
  private RecordFieldProxy(long handleIndex, RecordTypeProxy<RT> recType, ManagedStringProxy name, RecordTypeProxy<FT> valType) {
    super(handleIndex, recType, name);
    this.valueType_ = valType;
  }
  
  private static native void release(long handle);
  private static native long getNameHandle(long handle);
  private static native long getRecTypeHandle(long handle);

  private static native long createFieldIn(long rtHandle, long nameHandle, long valTypeHandle);
  private static native long valTypeHandle(long handle);
  private static native long getValueHandle(long handle, long ctxtHandle, long recordHandle);
  private static native long peekValueHandle(long handle, long ctxtHandle, long recordHandle);
  private static native long setValueHandle(long handle, long ctxtHandle, long recHandle, long valHandle);
  private static native void setToParent(long handle, long ctxtHandle, long recHandle);
  private static native void rollback(long handle, long ctxtHandle, long recHandle);
      
  public void setToParent(RT rec) {
      setToParent(handleIndex_, IsoContextProxy.current().handleIndex(),
                      ManagedRecordProxy.handleOf(rec));
  }
  
  public void rollback(RT rec) {
      rollback(handleIndex_, IsoContextProxy.current().handleIndex(),
                      ManagedRecordProxy.handleOf(rec));
  }
  
  
  @Override
  void releaseHandleIndex(long index) {
    release(index);
  }
  
  @Override
  public ManagedStringProxy name() {
    if (name_ == null) {
      name_ = ManagedStringProxy.fromHandle(getNameHandle(handleIndex_));
    }
    return name_;
  }



  @Override
  public RecordType<RT> recordType() {
    if (recordType_ == null) {
      recordType_ = RecordTypeProxy.<RT>fromHandle(getRecTypeHandle(handleIndex_));
    }
    return recordType_;
  }



  public RecordTypeProxy<FT> valueType() {
    if (valueType_ == null) {
      long vtHandle = valTypeHandle(handleIndex_);
      valueType_ = RecordTypeProxy.<FT>fromHandle(vtHandle);
    }
    return valueType_;
  }



    static <RT extends ManagedRecord, FT extends ManagedRecord> RecordFieldProxy<RT,FT> 
    in(RecordType<RT> recType, CharSequence name, RecordType<FT> valType) 
    {
//        System.out.println("RecordField.in recType for: " + name);
        final RecordTypeProxy<RT> rtp = RecordTypeProxy.downcast(recType);
        final ManagedStringProxy msn = ManagedStringProxy.valueOf(name);
        final RecordTypeProxy<FT> vtp = RecordTypeProxy.downcast(valType);
        long handle = createFieldIn(rtp.handleIndex(), msn.handleIndex(), vtp.handleIndex());
        RecordFieldProxy<RT, FT> rfp = new RecordFieldProxy<>(handle, rtp, msn, vtp);
        return rfp;
    }



    @Override
    public FT get(RT record) {
      Task.addRead(record, this);
      long val = RecordFieldProxy.<RT,FT>getValueHandle(handleIndex_,
                                                        IsoContextProxy.current().handleIndex(),
                                                        ManagedRecordProxy.handleOf(record));

      return ManagedRecordProxy.fromHandle(val, valueType_);
    }
    
    @Override
    public FT peek(RT record) {
      Task.addRead(record, this);
      long val = RecordFieldProxy.<RT,FT>peekValueHandle(handleIndex_,
                                                         IsoContextProxy.current().handleIndex(),
                                                         ManagedRecordProxy.handleOf(record));

      return ManagedRecordProxy.fromHandle(val, valueType_);
    }
    
    public FT set(RT rec, FT val) {
      Task.addWrite(rec, this);  
      setValueHandle(handleIndex_, IsoContextProxy.current().handleIndex(), 
                     ManagedRecordProxy.handleOf(rec),
                     ManagedRecordProxy.handleOf(val));
      return val;
    }
    
    public FT getAndSet(RT rec, FT val) {
      Task.addReadWrite(rec, this);  
      long old = setValueHandle(handleIndex_, IsoContextProxy.current().handleIndex(), 
				ManagedRecordProxy.handleOf(rec),
				ManagedRecordProxy.handleOf(val));
      return ManagedRecordProxy.fromHandle(old, valueType_);
    }
    


}
