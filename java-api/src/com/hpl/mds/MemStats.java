/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds;

import com.hpl.erk.Memory;
import com.hpl.erk.text.English;

public class MemStats {
  
  private static final NativeLibraryLoader NATIVE_LIB_LOADER = NativeLibraryLoader.getInstance();
  
  private static native long _bytesInHeap();
  private static native long _bytesInUse();
  private static native long _gcCycleNumber();
  private static native long _nProcesses();
  private static native long _nObjects();

  private long _bytesInHeap;
  private long _bytesInUse;
  private long _gcCycleNumber;
  private long _nProcesses;
  private long _nObjects;

  public MemStats() {
    _gcCycleNumber = -1;
    long n;
    _bytesInUse = _bytesInUse();
    while ((n = _gcCycleNumber()) != _gcCycleNumber) {
      _gcCycleNumber = n;
      _bytesInHeap = _bytesInHeap();
      _nProcesses = _nProcesses();
      _nObjects = _nObjects();
    }
  }

  public long bytesInHeap() {
    return _bytesInHeap;
  }

  public String inHeap(int dp) {
    return Memory.readable(bytesInHeap(), dp, "B");
  }

  public String inHeap() {
    return inHeap(2);
  }

  public long bytesInUse() {
    return _bytesInUse;
  }

  public String inUse(int dp) {
    return Memory.readable(bytesInUse(), dp, "B");
  }

  public String inUse() {
    return inUse(2);
  }

  public long bytesFree() {
    return _bytesInHeap-_bytesInUse;
  }

  public String free(int dp) {
    return Memory.readable(bytesFree(), dp, "B");
  }

  public String free() {
    return free(2);
  }

  public long gcCycleNumber() {
    return _gcCycleNumber();
  }

  public long nProcesses() {
    return _nProcesses();
  }

  public long nObjects() {
    return _nObjects();
  }

  public String toString() {
    return String.format("MemStats[%,d: %s used of %s, %s, %s]",
			 gcCycleNumber(),
			 inUse(), inHeap(),
			 English.num(nObjects()).noun("objects"),
			 English.num(nProcesses()).noun("processes"));
  }

  
}
