/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.conflicts;

import com.hpl.mds.prim.ManagedInt;

public interface IntValueConflict extends ValueConflict<ManagedInt> {
  void resolveTo(int val);
  @Override
  default void resolveTo(ManagedInt val) {
    resolveTo(val.asInt());
  }
  
  void setTo(int val);
  @Override
  default void setTo(ManagedInt val) {
    setTo(val.asInt());
  }
  
  int intValueIn(ConflictValSource valSource);
  @Override
  default public ManagedInt valueIn(ConflictValSource valSource) {
    return ManagedInt.valueOf(intValueIn(valSource));
  }
  default int intValueInSource() {
    return intValueIn(ConflictValSource.SOURCE);
  }
  default int intValueInTarget() {
    return intValueIn(ConflictValSource.TARGET);
  }
  default int intValueInSourceAtMerge() {
    return intValueIn(ConflictValSource.SOURCE_AT_MERGE);
  }
  default int intValueInTargetAtMerge() {
    return intValueIn(ConflictValSource.TARGET_AT_MERGE);
  }
  default int intValueInLastCommon() {
    return intValueIn(ConflictValSource.LAST_COMMON);
  }

}
