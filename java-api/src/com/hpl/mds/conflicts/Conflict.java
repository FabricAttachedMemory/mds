/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.conflicts;

import com.hpl.mds.IsolationContext;
import com.hpl.mds.PubResult;


public interface Conflict{
  PubResult inResult();
  void markResolved();
  boolean isResolved();
  
  void resolveTo(ConflictValSource valSource);
  default void resolveToSource() {
    resolveTo(ConflictValSource.SOURCE);
  }
  default void resolveToTarget() {
    resolveTo(ConflictValSource.TARGET);
  }
  default void resolveToSourceAtMerge() {
    resolveTo(ConflictValSource.SOURCE_AT_MERGE);
  }
  default void resolveToTargetAtMerge() {
    resolveTo(ConflictValSource.TARGET_AT_MERGE);
  }
  default void resolveToLastCommon() {
    resolveTo(ConflictValSource.LAST_COMMON);
  }
  
  void setTo(ConflictValSource valSource);
  default void setToSource() {
    setTo(ConflictValSource.SOURCE);
  }
  default void setToTarget() {
    setTo(ConflictValSource.TARGET);
  }
  default void setToSourceAtMerge() {
    setTo(ConflictValSource.SOURCE_AT_MERGE);
  }
  default void setToTargetAtMerge() {
    setTo(ConflictValSource.TARGET_AT_MERGE);
  }
  default void setToLastCommon() {
    setTo(ConflictValSource.LAST_COMMON);
  }

  
  default IsolationContext sourceContext() {
    return inResult().sourceContext();
  }
  default IsolationContext targetContext() {
    return inResult().targetContext();
  }
  default IsolationContext sourceSnapshotAtMerge() {
    return inResult().sourceSnapshotAtMerge();
  }
  default IsolationContext targetSnapshotAtMerge() {
    return inResult().targetSnapshotAtMerge();
  }
  default IsolationContext lastCommonSnapshot() {
    return inResult().lastCommonSnapshot();
  }
}
