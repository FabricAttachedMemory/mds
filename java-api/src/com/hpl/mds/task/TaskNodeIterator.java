/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */


package com.hpl.mds.task;

import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.ArrayDeque;
import java.util.Queue;


public class TaskNodeIterator implements Iterator<TaskNode> {

    private TaskNode next;
    private ListIterator<TaskNode> iterator;
    private Stack<ListIterator<TaskNode>> iteratorStack;

    private Queue<List<TaskNode>> taskLists;

    public TaskNodeIterator(TaskNode root) {
        next = root;
        if (root != null) {
            if (root.children() != null) {
                iterator = root.children().listIterator(); 
                if (iterator.hasNext()) {
                	next = iterator.next();
                    iteratorStack = new Stack<>(); 

                    taskLists = new ArrayDeque<>();
                }
                else {
                	next = null;
                }
            } // else error: root.children should always be initialised, but may be an empty list
        }  // else error: taskGraph root should always be initialised, even if children empty list
    }

    public boolean hasNext() {
        return next != null;
    }


    // return current value of next; set next to next element in tree
    public TaskNode next() {
        if (! hasNext()) {
           throw new NoSuchElementException();
        }
        TaskNode current = next;

        // try going down a level to current.children 
        // before working across other elements at the same level as current
        if (current.children().size() > 0) {
            iteratorStack.push(iterator);
            iterator = current.children().listIterator();
            next = iterator.next(); 
            return current;
        }

        // no children; now check for other elements at same level as current
        if (iterator.hasNext()) {
            next = iterator.next();
            return current;
        }

        // no more elements at current level; pop an iterator off the stack
        while ( ! iteratorStack.empty() ) {
            iterator = iteratorStack.pop();
            if (iterator.hasNext()) {
                next = iterator.next();
                return current;
            } 
        }
        next = null;
        return current;
    }
    
    // breadth-first iterator
    // iterate through the children of the top-level node first
    // then iterate through their children
    // then iterate through their children, and so on...
    public TaskNode nextBreadthFirst() {
        if (! hasNext()) {
            throw new NoSuchElementException();
         }
         TaskNode current = next;
         
         // postpone iterating through children
         if (current.children().size() > 0) {
             // add (children) tasks list to taskLists to deal with later
             taskLists.add(current.children());
         }


         // if finished iterating through current task list
         // check if there are any lists in tasksList still to iterate through
         if (! iterator.hasNext()) {
            if (! taskLists.isEmpty()) {
                iterator = taskLists.remove().listIterator();
            }
            else {
                // no more tasks after current one
                iterator = null;
                next = null;
                return current;
            }
         }

         // set next to next task node in graph
         // return the current task
         next = iterator.next();
         return current;
    }

    
}  // end class TaskNodeIterator
