/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.keyed;

import java.util.function.Function;

import com.hpl.mds.ManagedObject;
import com.hpl.mds.ManagedType;
import com.hpl.mds.ManagedValue;
import com.hpl.mds.impl.Stub;

public interface Keyed<EK extends ManagedObject, V extends ManagedObject> extends ManagedValue {
  static interface Type<EK extends ManagedObject, V extends ManagedObject> extends ManagedType<Keyed<EK,V>> {
    ManagedType<EK> keyType();
    ManagedType<V> valueType();
    @Override
    public ManagedKeyedSet.Type<EK, V> inSet();
  }
  
  EK key();
  
  V value();

  // implement as EqualsImpl.check(this, obj, Keyed.class, other -> key().equals(other.key()));
  @Override
  boolean equals(Object obj);
  
  // implement as key().hashCode();
  @Override
  int hashCode();
  
  static <EK extends ManagedObject, V extends ManagedObject>
  Keyed<EK,V> with(V val, EK key) {
    // TODO
    return Stub.notImplemented();
  }
  
  static <V extends ManagedObject, EK extends ManagedObject>
  Keyed<EK,V> with(V val, Function<? super V, ? extends EK> func) {
    return with(val, func.apply(val));
  }
  
  static <EK extends ManagedObject, V extends ManagedObject & AutoKeyed<EK> >
  Keyed<EK,V> with(V val) {
    return with(val, val.keyed());
  }
  
  static <EK extends ManagedObject, V extends ManagedObject>
  Type<EK,V> keyedType(ManagedType<EK> keyType, ManagedType<V> valueType) {
    // TODO
    return Stub.notImplemented();
  }
  
  static <EK extends ManagedObject, V extends ManagedObject>
  ManagedKeyedSet<EK,V> createSet(ManagedType<EK> keyType, ManagedType<V> valueType) {
    return keyedType(keyType, valueType).inSet().create(); 
  }
  
  
}
