/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds;

import com.hpl.mds.impl.Stub;
import com.hpl.mds.usage.GrowthBound;
import com.hpl.mds.usage.GrowthRate;
import com.hpl.mds.usage.Operation;
import com.hpl.mds.usage.UsageBase;
import com.hpl.mds.usage.UsageMode;
import com.hpl.mds.usage.UsagePlan;
import com.hpl.mds.usage.UsageScope;

public interface ManagedContainer extends ManagedComposite {
  public static final Operation<ForManagedContainer> CLEAR = Stub.notImplemented();
  public static final UsageMode<ForManagedContainer> STREAM = Stub.notImplemented();
  
  public interface ForManagedContainer extends ManagedObject.ForManagedObject {}
  
  public interface UsageOps<UF extends ForManagedContainer, U extends UsageOps<UF, U>> extends UsageBase<UF, U> {
    U expectedSize(long s);
    U maxSize(long s);

    U growBy(long elements);
    U growByMultiple(double times);
    U growByPercent(double percent);

    U growBy(long elements, GrowthRate rate);
    U growByMultiple(double times, GrowthRate rate);
    U growByPercent(double percent, GrowthRate rate);

    U growBy(long elements, GrowthBound bound);
    U growByMultiple(double times, GrowthBound bound);
    U growByPercent(double percent, GrowthBound bound);

    U growBy(long elements, GrowthRate rate, GrowthBound bound);
    U growByMultiple(double times, GrowthRate rate, GrowthBound bound);
    U growByPercent(double percent, GrowthRate rate, GrowthBound bound);

  }
  
  public interface Usage extends UsageOps<ForManagedContainer, Usage> {}
  
  static Usage usage() {
    // TODO
    return Stub.notImplemented();
  }
  
//Could do statics for each method of UsageOps that simply return usage().foo() as a Usage, but that would have to
//be repeated (and narrowed) at each level.  For now, let's just say "Call usage() first".  

  public long longSize();
  public void clear();
  
  default public int size() {
    long s = longSize();
    if (s > Integer.MAX_VALUE) {
      return -1;
    }
    return (int)s;
  }
  
  ManagedContainer using(Usage hint);
  ManagedContainer inherentUsage(Usage hint);
  ManagedContainer usageDuring(UsageScope scope, Usage hint);
  UsagePlan usagePlan(Usage hint);

}
