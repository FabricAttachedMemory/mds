/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
lang() ::= "c++h"  
class() ::= "pr_merge_result"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

addFieldConflict(t,k) ::= <<
void add_conflict(const managed_record_handle &r,
    	          const record_field_handle<$k$> &f) {
  // dout << "pr_merge_result add_conflict record_field $t$ called" << endl;

  static jmethodID m = get_method(env, "add$t$FieldConflict");
  indexed<managed_record_handle> rec { r };
  indexed<record_field_handle<$k$>\> fld { f };

  env->CallVoidMethod(pubResultProxyObj, m, rec.peek_index(), fld.peek_index());
}
>>

addArrayConflict(t,k) ::= <<
void add_conflict(const managed_array_handle<$k$> &a,
                  const array_index_type i) {
  static jmethodID m = get_method(env, "add$t$ArrayConflict");
  indexed<managed_array_handle<$k$>\> array { a };

  env->CallVoidMethod(pubResultProxyObj, m, array.peek_index(), i);
}
>>

addConflicts(t,k) ::= <<
$addFieldConflict(t,k)$

$addArrayConflict(t,k)$

>>

notImplementedAddConflicts(k) ::= <<
void add_conflict(const managed_record_handle &r,
    	          const record_field_handle<$k$> &f) {
  stubNotImplemented(env);
}
void add_conflict(const managed_array_handle<$k$> &a,
                  const array_index_type i) {
  stubNotImplemented(env);
}
>>

contents(prims, masked, types) ::= <<
#ifndef JNI_SRC_PR_MERGE_RESULT_H_
#define JNI_SRC_PR_MERGE_RESULT_H_

#include "mds_core_api.h"
#include "mds_jni.h"
#include "mds-debug.h"

namespace mds {
  namespace jni {
    using namespace mds::api;
    using array_index_type = mds::core::array_index_type;
    struct pr_merge_result : merge_result {

      static jclass pubResultProxyClass;
      static JavaVM* javaVM;

      // for a given instance of pr_merge_result
      jobject pubResultProxyObj;
      // The JNIEnv is thread-specific, but it will be valid for all calls to add_conflict().
      JNIEnv *env;
      bool succeeded_;


      void initialize(JNIEnv *ep, JavaVM* jvm, jclass cls, jobject obj) {
	static std::once_flag once;
	std::call_once(once, [&]() {
	    javaVM = jvm;
	    pubResultProxyClass = cls;
	  });
	pubResultProxyObj = obj;
	env = ep;
      }

        void merge_succeeded() {
	succeeded_ = true;
      }

      void merge_failed() {
	succeeded_ = false;
      }

      static jmethodID get_method(JNIEnv *env, const char *name, const char *sig = "(JJ)V") {
	return env->GetMethodID(pubResultProxyClass, name, sig);
      }

      // For each add_conflict:

      // create Change object (e.g. IntFieldProxy.Change), passing
      // appropriate parameters for the type Then add this new object
      // to the conflicts list in PubResultProxy

      // The add_conflict() methods call peek_index() rather than
      // return_index() so that the reference will get decremented at the
      // end, since the PubResultProxy object doesn't hold the objects
      // (and so release() will never be called).  If it changes to
      // finding and holding the object, this will need to change.


$masked: { type |
      $addConflicts(type.shortName, type.kind)$
}
$

      $addConflicts({Record},{kind::RECORD})$
      $addConflicts({Array},{kind::ARRAY})$
      
      void add_conflict(const namespace_handle &ns,
			const interned_string_handle &name) {
	//    	dout << "pr_merge_result add_conflict namespace name called" << endl;

        static jmethodID m = get_method(env, "addNamespaceConflict");
        indexed<namespace_handle> nsi { ns };
        indexed<interned_string_handle> namei { name};

        env->CallVoidMethod(pubResultProxyObj, m, nsi.peek_index(), namei.peek_index());
      }

      $notImplementedAddConflicts({kind::UBYTE})$
      $notImplementedAddConflicts({kind::USHORT})$
      $notImplementedAddConflicts({kind::UINT})$
      $notImplementedAddConflicts({kind::ULONG})$

      int num_conflicts() {
    	// TODO
    	return 0;
      }

    };

    template <>
    struct handle_store_traits<pr_merge_result *> {
      using storage_type = pr_merge_result *;
      static auto to_storage_type(pr_merge_result *val) {
	return val;
      }
    };

  }

}


#endif /* JNI_SRC_PR_MERGE_RESULT_H_ */
>>
