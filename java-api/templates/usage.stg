/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"

usage(class, params, directSupers, allSupers) ::= <<
import java.util.Collection;
import com.hpl.mds.usage.Operation;
import com.hpl.mds.usage.UsageMode;
import com.hpl.mds.usage.UsagePlan;
import com.hpl.mds.usage.UsageScope;
import com.hpl.mds.impl.Stub;


interface For$class$ extends $directSupers:{ s | $s$.For$s$};separator=", "$ {}
interface UsageOps<UF extends For$class$, U extends UsageOps<UF,U>\> extends $directSupers:{ s | $s$.UsageOps<UF,U>};separator=", "$ {}
interface Usage extends UsageOps<For$class$, Usage> {}

static Usage usage() {
  // TODO
  return Stub.notImplemented();
}

$class$$params$ using(Usage hint);
$class$$params$ inherentUsage(Usage hint);
$class$$params$ usageDuring(UsageScope scope, Usage hint);
UsagePlan usagePlan(Usage hint);
$allSupers: { c |
 
@Override
default $class$$params$ using($c$.Usage hint) {
  return using(hint.cast(Usage.class));
\}
@Override
default $class$$params$ inherentUsage($c$.Usage hint) {
  return inherentUsage(hint.cast(Usage.class));
\}
@Override
default $class$$params$ usageDuring(UsageScope scope, $c$.Usage hint) {
  return usageDuring(scope, hint.cast(Usage.class));
\}
@Override
default UsagePlan usagePlan($c$.Usage hint) {
  return usagePlan(hint.cast(Usage.class));
\}
}
$

static Usage during(UsageScope scope) {
  return usage().during(scope);
}  
  
static Usage optimizeFor(Operation<? super For$class$> ops) {
  return usage().optimizeFor(ops);
}  

static Usage optimizeFor(Collection<Operation<? super For$class$>\> ops) {
  return usage().optimizeFor(ops);
}
  
static Usage doNotExpect(Operation<? super For$class$> op) {
  return usage().doNotExpect(op);
}  

static Usage doNotExpect(Collection<Operation<? super For$class$>\> ops) {
  return usage().doNotExpect(ops);
}
  
static Usage useAs(UsageMode<? super For$class$> mode) {
  return usage().useAs(mode);
}  
  
static Usage useAs(Collection<UsageMode<? super For$class$>\> modes) {
  return usage().useAs(modes);
}
>>

containerUsage(class, params, directSupers, allSupers) ::= <<
import com.hpl.mds.usage.GrowthBound;
import com.hpl.mds.usage.GrowthRate;

$usage(class, params, directSupers, allSupers)$

static Usage expectedSize(long s) {
  return usage().expectedSize(s);
}

static Usage maxSize(long s) {
  return usage().maxSize(s);
}


static Usage growBy(long elements) {
  return usage().growBy(elements);
}

static Usage growByMultiple(double times) {
  return usage().growByMultiple(times);
}

static Usage growByPercent(double percent) {
  return usage().growByPercent(percent);
}


static Usage growBy(long elements, GrowthRate rate) {
  return usage().growBy(elements, rate);
}

static Usage growByMultiple(double times, GrowthRate rate) {
  return usage().growByMultiple(times, rate);
}

static Usage growByPercent(double percent, GrowthRate rate) {
  return usage().growByPercent(percent, rate);
}


static Usage growBy(long elements, GrowthBound bound) {
  return usage().growBy(elements, bound);
}

static Usage growByMultiple(double times, GrowthBound bound) {
  return usage().growByMultiple(times, bound);
}

static Usage growByPercent(double percent, GrowthBound bound) {
  return usage().growByPercent(percent, bound);
}


static Usage growBy(long elements, GrowthRate rate, GrowthBound bound)
{
  return usage().growBy(elements, rate, bound);
}

static Usage growByMultiple(double times, GrowthRate rate, GrowthBound
bound) {
  return usage().growByMultiple(times, rate, bound);
}

static Usage growByPercent(double percent, GrowthRate rate,
GrowthBound bound) {
  return usage().growByPercent(percent, rate, bound);
}

>>

mapUsage(class, params, directSupers, allSupers) ::= "$containerUsage(class, params, directSupers, allSupers)$"
collectionUsage(class, params, directSupers, allSupers) ::= "$containerUsage(class, params, directSupers, allSupers)$"
listUsage(class, params, directSupers, allSupers) ::= "$collectionUsage(class, params, directSupers, allSupers)$"
setUsage(class, params, directSupers, allSupers) ::= "$collectionUsage(class, params, directSupers, allSupers)$"
arrayUsage(class, params, directSupers, allSupers) ::= "$usage(class, params, directSupers, allSupers)$"


