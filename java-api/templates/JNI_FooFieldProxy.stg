/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
import "string.stg"
lang() ::= "c++"
class(type) ::= "$type.fieldName$Proxy"

code(type,types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$body(class(type), type, type.jniName, type.kind, type.coreType, types)$
>>                      

body(class, type, jni, kind, coreType, types) ::= <<
#include <jni.h>
#include "mds-debug.h"
#include "mds_core_api.h"                           // MDS Core API
#include "mds_jni.h"
#include "field_proxy.h"

using namespace mds;
using namespace mds::api;
using namespace mds::jni;
using namespace mds::jni::field_proxy;

extern "C" {

JNIEXPORT
void
JNICALL Java_com_hpl_mds_impl_$class$_release
  (JNIEnv *jEnv, jclass,
   jlong handleIndex)
{
  exception_handler(jEnv, release<$kind$>, handleIndex);
}

JNIEXPORT 
jlong
JNICALL 
Java_com_hpl_mds_impl_$class$_getNameHandle
  (JNIEnv *jEnv, jobject, 
   jlong hIndex)
{
  return exception_handler_wr(jEnv, get_name_handle<$kind$>, hIndex);
}

JNIEXPORT 
jlong
JNICALL 
Java_com_hpl_mds_impl_$class$_getRecTypeHandle
  (JNIEnv *jEnv, jobject, 
   jlong hIndex)
{
  return exception_handler_wr(jEnv, get_rec_type_handle<$kind$>, hIndex);
}



JNIEXPORT 
jlong
JNICALL 
Java_com_hpl_mds_impl_$type.fieldName$Proxy_createFieldIn
  (JNIEnv *jEnv, jobject, 
   jlong recTypeHIndex, 
   jlong nameHIndex)
{
  return exception_handler_wr(jEnv, create_field_in<$kind$>, recTypeHIndex, nameHIndex);
}

JNIEXPORT 
$jni$
JNICALL 
Java_com_hpl_mds_impl_$class$_getValue$whenString({Handle})$
  (JNIEnv *jEnv, jobject, 
   jlong hIndex,
   jlong ctxtHIndex,
   jlong recHIndex)
{
  return exception_handler_wr(jEnv, get_value<$kind$>, hIndex, ctxtHIndex, recHIndex);
}
  
JNIEXPORT 
$jni$
JNICALL 
Java_com_hpl_mds_impl_$class$_peekValue$whenString({Handle})$
  (JNIEnv *jEnv, jobject, 
   jlong hIndex,
   jlong ctxtHIndex,
   jlong recHIndex)
{
  return exception_handler_wr(jEnv, peek_value<$kind$>, hIndex, ctxtHIndex, recHIndex);
}
  
JNIEXPORT 
$jni$
JNICALL 
Java_com_hpl_mds_impl_$class$_setValue$whenString({Handle})$
  (JNIEnv *jEnv, jobject, 
   jlong hIndex,
   jlong ctxtHIndex,
   jlong recHIndex,
   $jni$ valArg)
{
  return exception_handler_wr(jEnv, set_value<$kind$>, hIndex, ctxtHIndex, recHIndex, valArg);
}

JNIEXPORT
void
JNICALL
Java_com_hpl_mds_impl_$class$_setToParent
  (JNIEnv *jEnv, jobject,
   jlong hIndex,
   jlong ctxtHIndex,
   jlong recHIndex)
{
  exception_handler(jEnv, set_to_parent<kind::DOUBLE>, hIndex, ctxtHIndex, recHIndex);
}


JNIEXPORT
void
JNICALL
Java_com_hpl_mds_impl_$class$_rollback
  (JNIEnv *jEnv, jobject,
   jlong hIndex,
   jlong ctxtHIndex,
   jlong recHIndex)
{
  exception_handler(jEnv, rollback<$kind$>, hIndex, ctxtHIndex, recHIndex);
}

$if(type.numeric)$
$["add","sub","mul","div"]:{ func |
JNIEXPORT 
jboolean
JNICALL 
Java_com_hpl_mds_impl_$class$_$func$Value
  (JNIEnv *jEnv, jobject, 
   jlong hIndex,
   jlong ctxtHIndex,
   jlong recHIndex,
   $jni$ valArg)
{
  return exception_handler_wr(jEnv, modify_value<$kind$, ARITH_OP::$func$>, hIndex, ctxtHIndex, recHIndex, valArg);
\}

}
$
$endif$


}

>>
