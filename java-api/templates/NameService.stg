/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

delimiters "$", "$"
package() ::= "com.hpl.mds.impl"
class() ::= "NameService"

code(types) ::= <<
/*
 *
 *  Managed Data Structures
 *  Copyright © 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

$contents(types.primTypes, types.maskedTypes, types)$
>>

lookup(templates, ret, arg) ::= <<
  static $templates$
  $ret$ lookup($arg$ type, HName name) {
    // TODO
    return Stub.notImplemented();
  }

  static $templates$
  $ret$ lookup($arg$ type, CharSequence...segments) {
    return lookup(type, HName.from(segments));
  }

  static $templates$
  $ret$ lookup($arg$ type, char sep, CharSequence...segments) {
    return lookup(type, HName.from(sep, segments));
  }


  static $templates$
  $ret$ lookup($arg$ type, List<? extends CharSequence> segments) {
    return lookup(type, HName.from(segments));
  }

  static $templates$
  $ret$ lookup($arg$ type, char sep, List<? extends CharSequence> segments) {
    return lookup(type, HName.from(sep, segments));
  }
>>
contents(prims, masked, types) ::= <<
package $package()$;

import java.util.List;

import com.hpl.mds.ManagedList;
import com.hpl.mds.ManagedMap;
import com.hpl.mds.ManagedObject;
import com.hpl.mds.ManagedRecord;
import com.hpl.mds.ManagedSet;
import com.hpl.mds.ManagedType;
import com.hpl.mds.RecordType;
import com.hpl.mds.string.ManagedMapFromString;
import com.hpl.mds.impl.Stub;
import com.hpl.mds.managed.NameServiceImpl;

$masked: { type |
import com.hpl.mds.$if(type.prim)$prim.$elseif(type.string)$string.$endif$$type.managedName$;
} 
$

$masked: { type |
import com.hpl.mds.$if(type.prim)$prim.container.list.$elseif(type.string)$string.$endif$Managed$type.shortName$List;
}
$

$masked: { type |
import com.hpl.mds.$if(type.prim)$prim.container.set.$elseif(type.string)$string.$endif$Managed$type.shortName$Set;
}
$

$masked: { type |
import com.hpl.mds.$if(type.prim)$prim.container.map.$elseif(type.string)$string.$endif$ManagedMapTo$type.shortName$;
}
$

$masked: { type |
import com.hpl.mds.$if(type.prim)$prim.container.map.$elseif(type.string)$string.$endif$ManagedStringTo$type.shortName$Map;
}
$



public interface $class()$ 
{
  interface Prior {
  }
  
  static Prior wasUnbound() {
    // TODO
    return Stub.notImplemented();
  }
  
  static Prior wasBound() {
    // TODO
    return Stub.notImplemented();
  }
  
  static Prior wasAny() {
    // TODO
    return Stub.notImplemented();
  }
  
  static Prior wasNamingLevel() {
    // TODO
    return Stub.notImplemented();
  }
  
  static Prior was(ManagedObject expected) {
    // TODO
    return Stub.notImplemented();
  }
  
  static Prior was(ManagedType<?> expectedType) {
    // TODO
    return Stub.notImplemented();
  }
  
    
  static boolean isBound(Prior prior, HName name) {
    // TODO
    return Stub.notImplemented();
  }

  static boolean isBound(Prior prior, CharSequence...segments) {
    return isBound(prior, HName.from(segments));
  }

  static boolean isBound(Prior prior, char sep, CharSequence...segments) {
    return isBound(prior, HName.from(sep, segments));
  }

  static boolean isBound(Prior prior, List<? extends CharSequence> segments) {
    return isBound(prior, HName.from(segments));
  }

  static boolean isBound(Prior prior, char sep, List<? extends CharSequence> segments) {
    return isBound(prior, HName.from(sep, segments));
  }

  static boolean isBound(HName name) {
    // TODO
    // return Stub.notImplemented();
       return NameServiceImpl.isBound(name);
    
  }

  static boolean isBound(CharSequence...segments) {
    return isBound(HName.from(segments));
  }

  static boolean isBound(char sep, CharSequence...segments) {
    return isBound(HName.from(sep, segments));
  }

  static boolean isBound(List<? extends CharSequence> segments) {
    return isBound(HName.from(segments));
  }

  static boolean isBound(char sep, List<? extends CharSequence> segments) {
    return isBound(HName.from(sep, segments));
  }

  static boolean isBoundTo(ManagedObject obj, HName name) {
    // TODO
    return Stub.notImplemented();
  }

  static boolean isBoundTo(ManagedObject obj, CharSequence...segments) {
    return isBoundTo(obj, HName.from(segments));
  }

  static boolean isBoundTo(ManagedObject obj, char sep, CharSequence...segments) {
    return isBoundTo(obj, HName.from(sep, segments));
  }

  static boolean isBoundTo(ManagedObject obj, List<? extends CharSequence> segments) {
    return isBoundTo(obj, HName.from(segments));
  }

  static boolean isBoundTo(ManagedObject obj, char sep, List<? extends CharSequence> segments) {
    return isBoundTo(obj, HName.from(sep, segments));
  }

  static boolean isBoundToType(ManagedType<?> type, HName name) {
    // TODO
    return Stub.notImplemented();
  }

  static boolean isBoundToType(ManagedType<?> type, CharSequence...segments) {
    return isBoundToType(type, HName.from(segments));
  }

  static boolean isBoundToType(ManagedType<?> type, char sep, CharSequence...segments) {
    return isBoundToType(type, HName.from(sep, segments));
  }

  static boolean isBoundToType(ManagedType<?> type, List<? extends CharSequence> segments) {
    return isBoundToType(type, HName.from(segments));
  }

  static boolean isBoundToType(ManagedType<?> type, char sep, List<? extends CharSequence> segments) {
    return isBoundToType(type, HName.from(sep, segments));
  }

  
  
  static
  <T extends ManagedObject> T bind(T obj, Prior prior, HName name) {
    // TODO
    return obj;
  }
  
 // TODO: erk: The call to the namespace proxy should be via the one that takes a prior, and the String version
 // should be captured in the one that takes CharSequences.
  static 
  <T extends ManagedObject> T bind(T obj, String name) {
	  System.out.println("NameService.bind(obj,String): name = " + name);
	  return NameServiceImpl.bind(obj, name);
  }
  static
  <T extends ManagedObject> T bind(T obj, HName name) {
    // return bind(obj, wasAny(), name);
	  System.out.println("NameService.bind(obj,HName): name = " + name);
	  return NameServiceImpl.bind(obj, name);
  }
  
  static
  <T extends ManagedObject> T bind(T obj, Prior prior, CharSequence...segments) {
      return bind(obj, prior, HName.from(segments));
  }
  
  static
  <T extends ManagedObject> T bind(T obj, CharSequence... segments) {
    System.out.println("NameService.bind(obj,CharSequence): segments = " + segments);
    return bind(obj, HName.from(segments));
  }
  
  static
  <T extends ManagedObject> T bind(T obj, Prior prior, char sep, CharSequence... segments) {
    return bind(obj, prior, HName.from(sep, segments));
  }
  
  static
  <T extends ManagedObject> T bind(T obj, char sep, CharSequence... segments) {
    return bind(obj, HName.from(sep, segments));
  }
  
  static
  <T extends ManagedObject> T bind(T obj, Prior prior, List<? extends CharSequence> segments) {
    return bind(obj, prior, HName.from(segments));
  }
  
  static
  <T extends ManagedObject> T bind(T obj, List<? extends CharSequence> segments) {
    return bind(obj, HName.from(segments));
  }
  
  static
  <T extends ManagedObject> T bind(T obj, Prior prior, char sep, List<? extends CharSequence> segments) {
    return bind(obj, prior, HName.from(sep, segments));
  }
  
  static
  <T extends ManagedObject> T bind(T obj, char sep, List<? extends CharSequence> segments) {
    return bind(obj, HName.from(sep, segments));
  }
  
  
  static
  void unbind(Prior prior, HName name) {
    // TODO
  }
  
  static
  boolean unbind(HName name) {
    // TODO
    return true;
  }
  
  static
  void unbind(Prior prior, CharSequence...segments) {
    unbind(prior, HName.from(segments));
  }
  
  static
  boolean unbind(CharSequence... segments) {
    return unbind(HName.from(segments));
  }
  
  static
  void unbind(Prior prior, char sep, CharSequence... segments) {
    unbind(prior, HName.from(sep, segments));
  }
  
  static
  boolean unbind(char sep, CharSequence... segments) {
    return unbind(HName.from(sep, segments));
  }
  
  static
  void unbind(Prior prior, List<? extends CharSequence> segments) {
    unbind(prior, HName.from(segments));
  }
  
  static
  boolean unbind(List<? extends CharSequence> segments) {
    return unbind(HName.from(segments));
  }
  
  static
  void unbind(Prior prior, char sep, List<? extends CharSequence> segments) {
    unbind(prior, HName.from(sep, segments));
  }
  
  static
  boolean unbind(char sep, List<? extends CharSequence> segments) {
    return unbind(HName.from(sep, segments));
  }
  
  static
  boolean alias(HName target, HName...aliases) {
    // TODO
    return Stub.notImplemented();
  }
  
$!  $lookup("<T extends ManagedObject>", "T", "ManagedType<T>")$ !$
// TODO: erk: I'm leaving in Susan's special case for ManagedRecord and null return for non-record objects.
// This should get changed in the switch to namespaces.

//  static <T extends ManagedRecord>
//  T lookup(ManagedType<T> type, String name) {
//    System.out.println("NameService.lookup(ManagedRecord, String) invoked with name: " + name);
//    return NameServiceImpl.lookup(type, name);
//  }
  
  static public <T extends ManagedRecord> T lookup(
    Class<T> managedRecordClass, RecordType<T> type, String name) 
  {
	  System.out.println("NameService.lookup(managedRecordClass) invoked with name " + name);
	  return NameServiceImpl.lookup(managedRecordClass, type, name);
  }

  
  // static <T extends ManagedObject>
  // T lookup(ManagedType<T> type, String name) {
  //   System.out.println("NameService.lookup(type, String) invoked with name: " + name);
  //   return NameServiceImpl.lookup(type, name);
  // }
  
    static <T extends ManagedObject>
    T lookup(ManagedType<T> type, HName name) {
      // TODO
      System.out.println("NameService.lookup(type, HName) invoked with name: " + name.asString());
      return null;
    }

    static <T extends ManagedObject>
    T lookup(ManagedType<T> type, CharSequence...segments) {
      return lookup(type, HName.from(segments));
    }

    static <T extends ManagedObject>
    T lookup(ManagedType<T> type, char sep, CharSequence...segments) {
      return lookup(type, HName.from(sep, segments));
    }


    static <T extends ManagedObject>
    T lookup(ManagedType<T> type, List<? extends CharSequence> segments) {
      return lookup(type, HName.from(segments));
    }

    static <T extends ManagedObject>
    T lookup(ManagedType<T> type, char sep, List<? extends CharSequence> segments) {
      return lookup(type, HName.from(sep, segments));
    }

// end of copy from modified generated code
  
$masked : { type |
  $lookup("", type.managedName, {$type.managedName$.Type})$
}
$  

  $lookup("<V extends ManagedObject>", "ManagedList<V>", "ManagedList.Type<V>")$

$masked : { type |
  $lookup("", {$type.managedName$List}, {$type.managedName$List.Type})$
}
$  

  $lookup("<V extends ManagedObject>", "ManagedSet<V>", "ManagedSet.Type<V>")$

$masked : { type |
  $lookup("", {$type.managedName$Set}, {$type.managedName$Set.Type})$
}
$  

  $lookup("<K extends ManagedObject, V extends ManagedObject>", "ManagedMap<K,V>", "ManagedMap.Type<K,V>")$

$masked : { type |
  $lookup("<K extends ManagedObject>", {ManagedMapTo$type.shortName$<K>}, {ManagedMapTo$type.shortName$.Type<K>})$
}
$  

  $lookup("<V extends ManagedObject>", "ManagedMapFromString<V>", "ManagedMapFromString.Type<V>")$

$masked : { type |
  $lookup("", {ManagedStringTo$type.shortName$Map}, {ManagedStringTo$type.shortName$Map.Type})$
}
$  

}
>>