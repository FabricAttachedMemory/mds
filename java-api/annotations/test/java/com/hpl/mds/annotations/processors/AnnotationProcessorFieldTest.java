/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.annotations.processors;

import java.io.IOException;

import org.junit.Before;
import org.junit.Test;

import com.github.javaparser.ParseException;
import com.hpl.mds.annotations.processors.AnnotationProcessorTest.AddMethod;

public class AnnotationProcessorFieldTest {

    private static final String PKG = "com.hpl.mds.test.field.";
    private static final String PATH = "com/hpl/mds/test/field/";

    private static final String INT_METHOD = "intField";

    private static final String MNG_LIST = "com.hpl.mds.ManagedList";
    private static final String MNG_STRING = "com.hpl.mds.string.ManagedString";
    private static final String MNG_SHORT = "com.hpl.mds.prim.ManagedShort";
    private static final String MNG_LONG = "com.hpl.mds.prim.ManagedLong";
    private static final String MNG_INT = "com.hpl.mds.prim.ManagedInt";
    private static final String MNG_FLOAT = "com.hpl.mds.prim.ManagedFloat";
    private static final String MNG_DOUBLE = "com.hpl.mds.prim.ManagedDouble";
    private static final String MNG_BYTE = "com.hpl.mds.prim.ManagedByte";
    private static final String MNG_BOOLEAN = "com.hpl.mds.prim.ManagedBoolean";
    private static final String MNG_PKG = "com.hpl.mds.prim.Managed";

    private static final String FIELD = "com.hpl.mds.Field";
    private static final String FIELD_LIST = "com.hpl.mds.ListField";
    private static final String FIELD_MAP = "com.hpl.mds.MapField";
    private static final String FIELD_SET = "com.hpl.mds.SetField";
    private static final String FIELD_INT = "com.hpl.mds.prim.field.IntField";
    private static final String FIELD_ARRAY = "com.hpl.mds.ArrayField";
    private static final String FIELD_STRING = "com.hpl.mds.string.StringField";
    private static final String FIELD_BOOLEAN = "com.hpl.mds.prim.field.BooleanField";
    private static final String FIELD_SHORT = "com.hpl.mds.prim.field.ShortField";
    private static final String FIELD_BYTE = "com.hpl.mds.prim.field.ByteField";
    private static final String FIELD_DOUBLE = "com.hpl.mds.prim.field.DoubleField";
    private static final String FIELD_FLOAT = "com.hpl.mds.prim.field.FloatField";
    private static final String FIELD_LONG = "com.hpl.mds.prim.field.LongField";
    private static final String FIELD_ARRAY_STRING = "com.hpl.mds.string.StringArrayField";
    private static final String FIELD_ARRAY_SHORT = "com.hpl.mds.prim.field.ShortArrayField";
    private static final String FIELD_ARRAY_LONG = "com.hpl.mds.prim.field.LongArrayField";
    private static final String FIELD_ARRAY_INT = "com.hpl.mds.prim.field.IntArrayField";
    private static final String FIELD_ARRAY_FLOAT = "com.hpl.mds.prim.field.FloatArrayField";
    private static final String FIELD_ARRAY_DOUBLE = "com.hpl.mds.prim.field.DoubleArrayField";
    private static final String FIELD_ARRAY_BYTE = "com.hpl.mds.prim.field.ByteArrayField";
    private static final String FIELD_ARRAY_BOOLEAN = "com.hpl.mds.prim.field.BooleanArrayField";

    private static final String OBJ_STRING = String.class.getCanonicalName();
    private static final String RECORD_SCHEMA = "com/hpl/mds/test/RecordPlainSimpleSchema.java";
    private static final String RECORD_QNAME = "com.hpl.mds.test.RecordPlainSimple";

    private ParserConfig config;
    private Util test = new Util(PATH, PKG);

    @Before
    public void beforeTest() {
        config = new ParserConfig();
        test.setConfig(config);
    }

    @Test
    public void shouldGenerateGettersWithTheGivenFormatInParadigm() throws Exception {
        test.addPublic("getParadigmManagedTestNum", MNG_INT);
        test.addPublic("frozenGetParadigmManagedTestNum", MNG_INT);
        test.addPublic("getParadigmTestNum", "int");
        test.addPublic("frozenGetParadigmTestNum", "int");
        test.addPublic("isParadigmTestBool", MNG_BOOLEAN);
        test.addPublic("frozenIsParadigmTestBool", MNG_BOOLEAN);
        test.addPublic("isParadigmPrimTestBool", "boolean");
        test.addPublic("frozenIsParadigmPrimTestBool", "boolean");
        test.testWithClasses("RecordGetterNameParadigm", "TestParadigmGetterName");
    }

    @Test
    public void shouldGenerateGettersWithTheGivenFormat() throws Exception {
        test.addPublic("getMyManagedTestNum", MNG_INT);
        test.addPublic("frozenGetMyManagedTestNum", MNG_INT);
        test.addPublic("getMyTestNum", "int");
        test.addPublic("frozenGetMyTestNum", "int");
        test.addPublic("isMyTestBool", MNG_BOOLEAN);
        test.addPublic("frozenIsMyTestBool", MNG_BOOLEAN);
        test.addPublic("isMyPrimTestBool", "boolean");
        test. addPublic("frozenIsMyPrimTestBool", "boolean");
        test.addPublic("managedTest2Num", MNG_INT);
        test.addPublic("frozenManagedTest2Num", MNG_INT);
        test.addPublic("test2Num", "int");
        test.addPublic("frozenTest2Num", "int");
        test.addPublic("managedTest2Bool", MNG_BOOLEAN);
        test.addPublic("frozenManagedTest2Bool", MNG_BOOLEAN);
        test.addPublic("test2Bool", "boolean");
        test.addPublic("frozenTest2Bool", "boolean");
        test.testSchema("RecordGetterName");
    }

    @Test
    public void shouldGenerateAccessorsWithCorrespondingVisibilityLevels() throws Exception {
        String className = "AccessorsVisibilityGlobal";
        test.addProtected("getManagedTestInt", MNG_INT);
        test.addProtected("frozenGetManagedTestInt", MNG_INT);
        test.addProtected("getTestInt", "int");
        test. addProtected("frozenGetTestInt", "int");
        test.addProtected("getManagedTestFloat", MNG_FLOAT);
        test.addProtected("frozenGetManagedTestFloat", MNG_FLOAT);
        test.addProtected("getTestFloat", "float");
        test.addProtected("frozenGetTestFloat", "float");
        test.addPublic("setTestFloat", MNG_FLOAT, MNG_FLOAT + " val");
        test.addPublic("setTestFloat", "float", "float val");
        addNumericModifiers("TestFloat", "Float", test::addPrivate);

        test.testSchema(className);
    }

    @Test
    public void shouldGenerateFieldsWithCorrespondingVisibilityLevels() throws Exception {
        String className = "FieldsVisibilityGlobal";
        config.addPrivate(addField(FIELD_INT, className, INT_METHOD, "myDefault"));
        config.addPublic(addField(FIELD_INT, className, INT_METHOD, "myPublic"));
        test.testSchema(className);
    }

    @Test
    public void shouldGenerateNumericModifiers() throws Exception {
        addNumericModifiers("TestFloat", "Float", test::addPublic);
        addNumericModifiers("TestDouble", "Double", test::addPublic);
        addNumericModifiers("TestInt", "Int", test::addPublic);
        addNumericModifiers("TestLong", "Long", test::addPublic);
        addNumericModifiers("TestShort", "Short", test::addPublic);
        test.testSchema("AccessorsNumericModifiers");
    }

    @Test
    public void shouldGenerateSettersWithDifferentVisibilityLevels() throws Exception {
        test.addProtected("setMyProtected", MNG_STRING, MNG_STRING + " val");
        test.addProtected("setMyProtected", OBJ_STRING, OBJ_STRING + " val");
        test.addPublic("setMyPublic", MNG_STRING, MNG_STRING + " val");
        test.addPublic("setMyPublic", OBJ_STRING, OBJ_STRING + " val");
        test.addPrivate("setMyPrivate", MNG_STRING, MNG_STRING + " val");
        test.addPrivate("setMyPrivate", OBJ_STRING, OBJ_STRING + " val");
        test.testSchema("AccessorsSetters");
    }

    @Test
    public void shouldGenerateGettersWithDifferentVisibilityLevels() throws Exception {
        test.addProtected("getManagedMyProtected", MNG_STRING);
        test.addProtected("frozenGetManagedMyProtected", MNG_STRING);
        test.addProtected("getMyProtected", OBJ_STRING);
        test.addProtected("frozenGetMyProtected", OBJ_STRING);
        test.addPublic("getManagedMyPublic", MNG_STRING);
        test.addPublic("frozenGetManagedMyPublic", MNG_STRING);
        test.addPublic("getMyPublic", OBJ_STRING);
        test.addPublic("frozenGetMyPublic", OBJ_STRING);
        test.addPrivate("getManagedMyPrivate", MNG_STRING);
        test.addPrivate("frozenGetManagedMyPrivate", MNG_STRING);
        test.addPrivate("getMyPrivate", OBJ_STRING);
        test.addPrivate("frozenGetMyPrivate", OBJ_STRING);
        test.testSchema("AccessorsGetters");
    }

    @Test
    public void shouldGenerateFieldsAndAccessorsWithDifferentVisibilityLevels() throws Exception {
        String className = "FieldsVisibility";

        addProtected(addField(FIELD_INT, className, INT_METHOD, "protectedTest"));
        addSettersAndGetters("ProtectedTest", "int", MNG_INT, test::addProtected);
        addNumericModifiers("ProtectedTest", "Int", test::addProtected);

        config.addPublic(addField(FIELD_INT, className, INT_METHOD, "publicTest"));
        addSettersAndGetters("PublicTest", "int", MNG_INT, test::addPublic);
        addNumericModifiers("PublicTest", "Int", test::addPublic);

        addProtected(addField(FIELD_INT, className, INT_METHOD, "publicAccesors"));
        addSettersAndGetters("PublicAccesors", "int", MNG_INT, test::addPublic);
        addNumericModifiers("PublicAccesors", "Int", test::addPublic);

        addProtected(addField(FIELD_INT, className, INT_METHOD, "publicGetters"));
        addGetters("PublicGetters", "int", MNG_INT, test::addPublic);
        addSetters("PublicGetters", "int", MNG_INT, test::addProtected);
        addNumericModifiers("PublicGetters", "Int", test::addProtected);

        addProtected(addField(FIELD_INT, className, INT_METHOD, "publicSetters"));
        addGetters("PublicSetters", "int", MNG_INT, test::addProtected);
        addSetters("PublicSetters", "int", MNG_INT, test::addPublic);
        addNumericModifiers("PublicSetters", "Int", test::addProtected);

        addProtected(addField(FIELD_INT, className, INT_METHOD, "publicModifiers"));
        addSettersAndGetters("PublicModifiers", "int", MNG_INT, test::addProtected);
        addNumericModifiers("PublicModifiers", "Int", test::addPublic);

        addProtected(addField(FIELD_INT, className, INT_METHOD, "publicInc"));
        addSettersAndGetters("PublicInc", "int", MNG_INT, test::addProtected);
        addInc("PublicInc", "Int", test::addPublic);
        addDec("PublicInc", "Int", test::addProtected);
        addMult("PublicInc", "Int", test::addProtected);
        addDiv("PublicInc", "Int", test::addProtected);

        addProtected(addField(FIELD_INT, className, INT_METHOD, "publicDec"));
        addSettersAndGetters("PublicDec", "int", MNG_INT, test::addProtected);
        addInc("PublicDec", "Int", test::addProtected);
        addDec("PublicDec", "Int", test::addPublic);
        addMult("PublicDec", "Int", test::addProtected);
        addDiv("PublicDec", "Int", test::addProtected);

        addProtected(addField(FIELD_INT, className, INT_METHOD, "publicMul"));
        addSettersAndGetters("PublicMul", "int", MNG_INT, test::addProtected);
        addInc("PublicMul", "Int", test::addProtected);
        addDec("PublicMul", "Int", test::addProtected);
        addMult("PublicMul", "Int", test::addPublic);
        addDiv("PublicMul", "Int", test::addProtected);

        addProtected(addField(FIELD_INT, className, INT_METHOD, "publicDiv"));
        addSettersAndGetters("PublicDiv", "int", MNG_INT, test::addProtected);
        addInc("PublicDiv", "Int", test::addProtected);
        addDec("PublicDiv", "Int", test::addProtected);
        addMult("PublicDiv", "Int", test::addProtected);
        addDiv("PublicDiv", "Int", test::addPublic);

        test.testSchema(className);
    }

    @Test
    public void shouldProcessRecordWithRecordField() throws Exception {
        String className = "RecordWithRecordField";
        FieldDesc fieldInfo = new FieldDesc(FIELD, "myRecordField", "field");
        fieldInfo.setMethodArgs("\"myRecord\"", RECORD_QNAME + ".TypeDef.TYPE");
        fieldInfo.setTypeParams(className, RECORD_QNAME);
        config.addField(fieldInfo);
        addProtected(fieldInfo);
        test.addPublic("getMyRecord", RECORD_QNAME);
        test.addPublic("frozenGetMyRecord", RECORD_QNAME);
        test.addPublic("setMyRecord", RECORD_QNAME, RECORD_QNAME + " val");
        test.testWithOffPkgClasses(className, RECORD_SCHEMA);
    }

    @Test
    public void shouldGenereateGettersForCollectionsOfMngPrimitiveTypes() throws Exception {
        testGettersSettersOfPrimitiveCollections("FieldsCollectionOfMngPrimitive");
    }

    @Test
    public void shouldGenereateGettersForCollectionsOfPrimitiveTypes() throws Exception {
        testGettersSettersOfPrimitiveCollections("FieldsCollectionOfPrimitive");
    }

    @Test
    public void shouldProcessCollectionsOfMngPrimitiveTypes() throws Exception {
        testCollectionOfPrimitivesField("FieldsCollectionOfMngPrimitive");
    }

    @Test
    public void shouldProcessCollectionsOfPrimitiveTypes() throws Exception {
        testCollectionOfPrimitivesField("FieldsCollectionOfPrimitive");
    }

    @Test
    public void shouldGenerateGettersWithPrimitiveMngDataTypeFields() throws Exception {
        test.addPublic("getMyInt", MNG_INT);
        test.addPublic("frozenGetMyInt", MNG_INT);
        test.addPublic("getPrimMyInt", "int");
        test.addPublic("frozenGetPrimMyInt", "int");
        test.addPublic("setMyInt", MNG_INT, MNG_INT + " val");
        test.addPublic("setMyInt", "int", "int val");
        test.addPublic("getMyLong", MNG_LONG);
        test.addPublic("frozenGetMyLong", MNG_LONG);
        test.addPublic("getPrimMyLong", "long");
        test.addPublic("frozenGetPrimMyLong", "long");
        test.addPublic("setMyLong", MNG_LONG, MNG_LONG + " val");
        test.addPublic("setMyLong", "long", "long val");
        test.addPublic("getMyFloat", MNG_FLOAT);
        test.addPublic("frozenGetMyFloat", MNG_FLOAT);
        test.addPublic("getPrimMyFloat", "float");
        test.addPublic("frozenGetPrimMyFloat", "float");
        test.addPublic("setMyFloat", MNG_FLOAT, MNG_FLOAT + " val");
        test.addPublic("setMyFloat", "float", "float val");
        test.addPublic("getMyDouble", MNG_DOUBLE);
        test.addPublic("frozenGetMyDouble", MNG_DOUBLE);
        test.addPublic("getPrimMyDouble", "double");
        test.addPublic("frozenGetPrimMyDouble", "double");
        test.addPublic("setMyDouble", MNG_DOUBLE, MNG_DOUBLE + " val");
        test.addPublic("setMyDouble", "double", "double val");
        test.addPublic("getMyByte", MNG_BYTE);
        test.addPublic("frozenGetMyByte", MNG_BYTE);
        test.addPublic("getPrimMyByte", "byte");
        test.addPublic("frozenGetPrimMyByte", "byte");
        test.addPublic("setMyByte", MNG_BYTE, MNG_BYTE + " val");
        test.addPublic("setMyByte", "byte", "byte val");
        test.addPublic("getMyShort", MNG_SHORT);
        test.addPublic("frozenGetMyShort", MNG_SHORT);
        test.addPublic("getPrimMyShort", "short");
        test.addPublic("frozenGetPrimMyShort", "short");
        test.addPublic("setMyShort", MNG_SHORT, MNG_SHORT + " val");
        test.addPublic("setMyShort", "short", "short val");
        test.addPublic("isMyBoolean", MNG_BOOLEAN);
        test.addPublic("frozenIsMyBoolean", MNG_BOOLEAN);
        test.addPublic("isPrimMyBoolean", "boolean");
        test.addPublic("frozenIsPrimMyBoolean", "boolean");
        test.addPublic("setMyBoolean", MNG_BOOLEAN, MNG_BOOLEAN + " val");
        test.addPublic("setMyBoolean", "boolean", "boolean val");
        test.addPublic("getMyString", MNG_STRING);
        test.addPublic("frozenGetMyString", MNG_STRING);
        test.addPublic("getPrimMyString", OBJ_STRING);
        test.addPublic("frozenGetPrimMyString", OBJ_STRING);
        test.addPublic("setMyString", MNG_STRING, MNG_STRING + " val");
        test.addPublic("setMyString", OBJ_STRING, OBJ_STRING + " val");
        test.testSchema("FieldsPrimitiveMngType");
    }

    @Test
    public void shouldGenerateGettersWithPrimitivePrimDataTypeFields() throws Exception {
        test.addPublic("getManagedMyInt", MNG_INT);
        test.addPublic("frozenGetManagedMyInt", MNG_INT);
        test.addPublic("getMyInt", "int");
        test.addPublic("frozenGetMyInt", "int");
        test.addPublic("setMyInt", MNG_INT, MNG_INT + " val");
        test.addPublic("setMyInt", "int", "int val");
        test.addPublic("getManagedMyLong", MNG_LONG);
        test.addPublic("frozenGetManagedMyLong", MNG_LONG);
        test.addPublic("getMyLong", "long");
        test.addPublic("frozenGetMyLong", "long");
        test.addPublic("setMyLong", MNG_LONG, MNG_LONG + " val");
        test.addPublic("setMyLong", "long", "long val");
        test.addPublic("getManagedMyFloat", MNG_FLOAT);
        test.addPublic("frozenGetManagedMyFloat", MNG_FLOAT);
        test.addPublic("getMyFloat", "float");
        test.addPublic("frozenGetMyFloat", "float");
        test.addPublic("setMyFloat", MNG_FLOAT, MNG_FLOAT + " val");
        test.addPublic("setMyFloat", "float", "float val");
        test.addPublic("getManagedMyDouble", MNG_DOUBLE);
        test.addPublic("frozenGetManagedMyDouble", MNG_DOUBLE);
        test.addPublic("getMyDouble", "double");
        test.addPublic("frozenGetMyDouble", "double");
        test.addPublic("setMyDouble", MNG_DOUBLE, MNG_DOUBLE + " val");
        test.addPublic("setMyDouble", "double", "double val");
        test.addPublic("getManagedMyByte", MNG_BYTE);
        test.addPublic("frozenGetManagedMyByte", MNG_BYTE);
        test.addPublic("getMyByte", "byte");
        test.addPublic("frozenGetMyByte", "byte");
        test.addPublic("setMyByte", MNG_BYTE, MNG_BYTE + " val");
        test.addPublic("setMyByte", "byte", "byte val");
        test.addPublic("getManagedMyShort", MNG_SHORT);
        test.addPublic("frozenGetManagedMyShort", MNG_SHORT);
        test.addPublic("getMyShort", "short");
        test.addPublic("frozenGetMyShort", "short");
        test.addPublic("setMyShort", MNG_SHORT, MNG_SHORT + " val");
        test.addPublic("setMyShort", "short", "short val");
        test.addPublic("isManagedMyBoolean", MNG_BOOLEAN);
        test.addPublic("frozenIsManagedMyBoolean", MNG_BOOLEAN);
        test.addPublic("isMyBoolean", "boolean");
        test.addPublic("frozenIsMyBoolean", "boolean");
        test.addPublic("setMyBoolean", MNG_BOOLEAN, MNG_BOOLEAN + " val");
        test.addPublic("setMyBoolean", "boolean", "boolean val");
        test.addPublic("getManagedMyString", MNG_STRING);
        test.addPublic("frozenGetManagedMyString", MNG_STRING);
        test.addPublic("getMyString", OBJ_STRING);
        test.addPublic("frozenGetMyString", OBJ_STRING);
        test.addPublic("setMyString", MNG_STRING, MNG_STRING + " val");
        test.addPublic("setMyString", OBJ_STRING, OBJ_STRING + " val");
        test.testSchema("FieldsPrimitiveType");
    }

    @Test
    public void shouldGenerateArrayFields() throws Exception {
        String className = "FieldsArrays";
        addFields(className, "myBooleanArray", FIELD_ARRAY_BOOLEAN, "booleanArrayField");
        addFields(className, "myByteArray", FIELD_ARRAY_BYTE, "byteArrayField");
        addFields(className, "myDoubleArray", FIELD_ARRAY_DOUBLE, "doubleArrayField");
        addFields(className, "myFloatArray", FIELD_ARRAY_FLOAT, "floatArrayField");
        addFields(className, "myIntArray", FIELD_ARRAY_INT, "intArrayField");
        addFields(className, "myLongArray", FIELD_ARRAY_LONG, "longArrayField");
        addFields(className, "myShortArray", FIELD_ARRAY_SHORT, "shortArrayField");
        addFields(className, "myStringArray", FIELD_ARRAY_STRING, "stringArrayField");
        addProtected(addField(FIELD_ARRAY, className, RECORD_QNAME, "myRecordArrayField", "arrayField",
                "myRecordArray"));
        test.testWithOffPkgClasses(className, RECORD_SCHEMA);
    }

    @Test
    public void shouldGenerateFieldsWithJavaCollections() throws Exception {
        testCollectionFieldTypes("FieldsCollection");
    }

    @Test
    public void shouldGenerateFieldsWithMngCollections() throws Exception {
        testCollectionFieldTypes("FieldsMngCollection");
    }

    @Test
    public void shouldProcessRecordWithPrimitiveMngDataTypeFields() throws Exception {
        testPrimitiveFieldTypes("FieldsPrimitiveMngType");
    }

    @Test
    public void shouldProcessRecordWithPrimitiveDataTypeFields() throws Exception {
        testPrimitiveFieldTypes("FieldsPrimitiveType");
    }
    
    @Test
    public void shouldGenerateAttributesWithEmptyParadigms() throws Exception {
        testGeneratedFieldsWithParadigm("RecordEmptyParadigm", "TestEmptyParadigm");
    }

    @Test
    public void shouldGenerateAttributesWithMultiParadigms() throws Exception {
        testGeneratedFieldsWithParadigm("RecordMultiParadigm", "TestEmptyParadigm", "TestParadigmWithParent",
                "TestParadigm");
    }

    @Test
    public void shouldGenerateAttributesWithParadigmsWithParent() throws Exception {
        testGeneratedFieldsWithParadigm("RecordParadigmWithParent", "TestParadigmWithParent", "TestParadigm");
    }

    @Test
    public void shouldGenerateAttributesWithParadigms() throws Exception {
        testGeneratedFieldsWithParadigm("RecordWithParadigm", "TestParadigm");
    }
    
    private void testGeneratedFieldsWithParadigm(String className, String... paradigms)
            throws Exception {
        test.addPrivate("getManagedTest", MNG_INT);
        test.addPrivate("frozenGetManagedTest", MNG_INT);
        test.addPrivate("getTest", "int");
        test.addPrivate("frozenGetTest", "int");
        test.addPublic("setTest", MNG_INT, MNG_INT + " val");
        test.addPublic("setTest", "int", "int val");
        test.testWithClasses(className, paradigms);
    }

    private void testGettersSettersOfPrimitiveCollections(String className) throws Exception {
        test.addPublic("getMyIntCollection", MNG_LIST + "<" + MNG_INT + ">");
        test.addPublic("frozenGetMyIntCollection", MNG_LIST + "<" + MNG_INT + ">");
        test.addPublic("setMyIntCollection", MNG_LIST + "<" + MNG_INT + ">", MNG_LIST + "<" + MNG_INT + "> val");
        test.addPublic("getMyLongCollection", MNG_LIST + "<" + MNG_LONG + ">");
        test.addPublic("frozenGetMyLongCollection", MNG_LIST + "<" + MNG_LONG + ">");
        test.addPublic("setMyLongCollection", MNG_LIST + "<" + MNG_LONG + ">", MNG_LIST + "<" + MNG_LONG + "> val");
        test.addPublic("getMyFloatCollection", MNG_LIST + "<" + MNG_FLOAT + ">");
        test.addPublic("frozenGetMyFloatCollection", MNG_LIST + "<" + MNG_FLOAT + ">");
        test.addPublic("setMyFloatCollection", MNG_LIST + "<" + MNG_FLOAT + ">", MNG_LIST + "<" + MNG_FLOAT + "> val");
        test.addPublic("getMyDoubleCollection", MNG_LIST + "<" + MNG_DOUBLE + ">");
        test.addPublic("frozenGetMyDoubleCollection", MNG_LIST + "<" + MNG_DOUBLE + ">");
        test.addPublic("setMyDoubleCollection", MNG_LIST + "<" + MNG_DOUBLE + ">", MNG_LIST + "<" + MNG_DOUBLE + "> val");
        test.addPublic("getMyByteCollection", MNG_LIST + "<" + MNG_BYTE + ">");
        test.addPublic("frozenGetMyByteCollection", MNG_LIST + "<" + MNG_BYTE + ">");
        test.addPublic("setMyByteCollection", MNG_LIST + "<" + MNG_BYTE + ">", MNG_LIST + "<" + MNG_BYTE + "> val");
        test.addPublic("getMyShortCollection", MNG_LIST + "<" + MNG_SHORT + ">");
        test.addPublic("frozenGetMyShortCollection", MNG_LIST + "<" + MNG_SHORT + ">");
        test.addPublic("setMyShortCollection", MNG_LIST + "<" + MNG_SHORT + ">", MNG_LIST + "<" + MNG_SHORT + "> val");
        test.addPublic("getMyBooleanCollection", MNG_LIST + "<" + MNG_BOOLEAN + ">");
        test.addPublic("frozenGetMyBooleanCollection", MNG_LIST + "<" + MNG_BOOLEAN + ">");
        test.addPublic("setMyBooleanCollection", MNG_LIST + "<" + MNG_BOOLEAN + ">", MNG_LIST + "<" + MNG_BOOLEAN + "> val");
        test.addPublic("getMyStringCollection", MNG_LIST + "<" + MNG_STRING + ">");
        test.addPublic("frozenGetMyStringCollection", MNG_LIST + "<" + MNG_STRING + ">");
        test.addPublic("setMyStringCollection", MNG_LIST + "<" + MNG_STRING + ">", MNG_LIST + "<" + MNG_STRING + "> val");
        test.testSchema(className);
    }

    private void testCollectionOfPrimitivesField(String className)
            throws ClassNotFoundException, Exception, ParseException, IOException {
        addProtected(addField(FIELD_LIST, className, MNG_INT, "myIntCollectionField", "listField", "myIntCollection"));
        addProtected(
                addField(FIELD_LIST, className, MNG_LONG, "myLongCollectionField", "listField", "myLongCollection"));
        addProtected(
                addField(FIELD_LIST, className, MNG_FLOAT, "myFloatCollectionField", "listField", "myFloatCollection"));
        addProtected(addField(FIELD_LIST, className, MNG_DOUBLE, "myDoubleCollectionField", "listField",
                "myDoubleCollection"));
        addProtected(
                addField(FIELD_LIST, className, MNG_BYTE, "myByteCollectionField", "listField", "myByteCollection"));
        addProtected(
                addField(FIELD_LIST, className, MNG_SHORT, "myShortCollectionField", "listField", "myShortCollection"));
        addProtected(addField(FIELD_LIST, className, MNG_BOOLEAN, "myBooleanCollectionField", "listField",
                "myBooleanCollection"));
        addProtected(addField(FIELD_LIST, className, MNG_STRING, "myStringCollectionField", "listField",
                "myStringCollection"));
        test.testSchema(className);
    }

    private void testCollectionFieldTypes(String className)
            throws ClassNotFoundException, Exception, ParseException, IOException {
        addProtected(addField(FIELD_LIST, className, MNG_STRING, "myListField", "listField", "myList"));
        addProtected(addField(FIELD_SET, className, MNG_STRING, "mySetField", "setField", "mySet"));
        addProtected(addField(FIELD_MAP, className, MNG_STRING, MNG_STRING, "myMapField", "mapField", "myMap"));
        test.testSchema(className);
    }

    private void testPrimitiveFieldTypes(String className)
            throws ClassNotFoundException, Exception, ParseException, IOException {
        addProtected(addField(FIELD_INT, className, INT_METHOD, "myInt"));
        addProtected(addField(FIELD_LONG, className, "longField", "myLong"));
        addProtected(addField(FIELD_FLOAT, className, "floatField", "myFloat"));
        addProtected(addField(FIELD_DOUBLE, className, "doubleField", "myDouble"));
        addProtected(addField(FIELD_BYTE, className, "byteField", "myByte"));
        addProtected(addField(FIELD_SHORT, className, "shortField", "myShort"));
        addProtected(addField(FIELD_BOOLEAN, className, "booleanField", "myBoolean"));
        addProtected(addField(FIELD_STRING, className, "stringField", "myString"));
        test.testSchema(className);
    }

    private FieldDesc addField(String type, String typeParam1, String typeParam2, String name, String createionMethod,
            String mdsType) {
        FieldDesc fieldInfo = new FieldDesc(type, name, createionMethod);
        fieldInfo.setTypeParams(typeParam1, typeParam2);
        fieldInfo.setMethodArgs("\"" + mdsType + "\"", typeParam2 + ".TYPE");
        config.addField(fieldInfo);
        return fieldInfo;
    }

    private FieldDesc addField(String type, String typeParam1, String typeParam2, String typeParam3, String name,
            String createionMethod, String mdsType) {
        FieldDesc fieldInfo = new FieldDesc(type, name, createionMethod);
        fieldInfo.setTypeParams(typeParam1, typeParam2, typeParam3);
        fieldInfo.setMethodArgs("\"" + mdsType + "\"", typeParam2 + ".TYPE", typeParam3 + ".TYPE");
        config.addField(fieldInfo);
        return fieldInfo;
    }
    
    private FieldDesc addField(String type, String typeParam, String createionMethod, String mdsType) {
        FieldDesc fieldInfo = new FieldDesc(type, typeParam, mdsType + "Field", createionMethod, "\"" + mdsType + "\"");
        config.addField(fieldInfo);
        return fieldInfo;
    }
    
    private void addFields(String className, String fieldName, String fieldType, String createionMethod) {
        addProtected(addField(fieldType, className, createionMethod, fieldName));
        addProtected(addField(fieldType, className, createionMethod, fieldName + "2"));
    }

    private void addProtected(FieldDesc addField) {
        config.addProtected(addField);
    }

    private void addSettersAndGetters(String fieldName, String primType, String mngType, AddMethod addMethod) {
        addGetters(fieldName, primType, mngType, addMethod);
        addSetters(fieldName, primType, mngType, addMethod);
    }

    private void addSetters(String fieldName, String primType, String mngType, AddMethod addMethod) {
        addMethod.add("set" + fieldName, mngType, mngType + " val");
        addMethod.add("set" + fieldName, primType, primType + " val");
    }

    private void addGetters(String fieldName, String primType, String mngType, AddMethod addMethod) {
        addMethod.add("getManaged" + fieldName, mngType);
        addMethod.add("frozenGetManaged" + fieldName, mngType);
        addMethod.add("get" + fieldName, primType);
        addMethod.add("frozenGet" + fieldName, primType);
    }

    private void addNumericModifiers(String fieldName, String type, AddMethod addMethod) {
        addInc(fieldName, type, addMethod);
        addDec(fieldName, type, addMethod);
        addMult(fieldName, type, addMethod);
        addDiv(fieldName, type, addMethod);
    }

    private void addDiv(String fieldName, String type, AddMethod addMethod) {
        addMethod.add("div" + fieldName, type.toLowerCase(), type.toLowerCase() + " val");
        addMethod.add("div" + fieldName, MNG_PKG + type, MNG_PKG + type + " val");
    }

    private void addMult(String fieldName, String type, AddMethod addMethod) {
        addMethod.add("mult" + fieldName, type.toLowerCase(), type.toLowerCase() + " val");
        addMethod.add("mult" + fieldName, MNG_PKG + type, MNG_PKG + type + " val");
    }

    private void addDec(String fieldName, String type, AddMethod addMethod) {
        addMethod.add("dec" + fieldName, type.toLowerCase());
        addMethod.add("dec" + fieldName, type.toLowerCase(), type.toLowerCase() + " val");
        addMethod.add("dec" + fieldName, MNG_PKG + type, MNG_PKG + type + " val");
    }

    private void addInc(String fieldName, String type, AddMethod addMethod) {
        addMethod.add("inc" + fieldName, type.toLowerCase());
        addMethod.add("inc" + fieldName, type.toLowerCase(), type.toLowerCase() + " val");
        addMethod.add("inc" + fieldName, MNG_PKG + type, MNG_PKG + type + " val");
    }

}
