/*
 *
 *  Managed Data Structures
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

package com.hpl.mds.annotations.processor.parser;

import javax.annotation.processing.Messager;
import javax.lang.model.element.Element;
import javax.tools.Diagnostic.Kind;

import com.hpl.mds.annotations.GetterName;
import com.hpl.mds.annotations.processor.RecordInfo.GetterFormatInfo;

/**
 * Parser for {@link GetterName} annotation, the parsed information is store in
 * a {@link GetterFormatInfo}
 * 
 * @author Abraham Alcantara
 */
public class GetterNameParser {

    private static final char GETTER_FORMAT_SEPARATOR = ':';

    /**
     * Default format for getter names
     */
    private final GetterFormatInfo defaultGetterFormat = new GetterFormatInfo("is%s", "get%s");

    /**
     * To display localized messages to the user
     */
    private final Messager messager;

    public GetterNameParser(Messager messager) {
        this.messager = messager;
    }

    /**
     * Parses {@link GetterName} annotation in the give element
     * 
     * @param element
     * @return {@link GetterFormatInfo} with the parsed information
     */
    public GetterFormatInfo parse(Element element) {
        GetterName annotation = element.getAnnotation(GetterName.class);
        if (annotation != null) {
            String value = annotation.value().trim();

            // verify valid format
            if (!value.contains("%s")) {
                messager.printMessage(Kind.ERROR, "ignoring getter name format, should contain %s", element);
                return null;
            }

            // look for separator
            int indexOfSeparator = value.indexOf(GETTER_FORMAT_SEPARATOR);
            if (indexOfSeparator == -1) {
                // same format for all types if no separator
                return new GetterFormatInfo(value, value);
            }

            // parse boolean format
            String booleanFormat = value.substring(indexOfSeparator + 1).trim();
            if (booleanFormat.isEmpty()) {
                messager.printMessage(Kind.ERROR, "ignoring getter name format, empty format for boolean type",
                        element);
                return null;
            }

            // parse non-boolean format
            String nonBooleanFormat = value.substring(0, indexOfSeparator).trim();
            if (nonBooleanFormat.isEmpty()) {
                messager.printMessage(Kind.ERROR, "ignoring getter name format, empty format for non-boolean type",
                        element);
                return null;
            }

            // result of the parsed formats
            return new GetterFormatInfo(booleanFormat, nonBooleanFormat);
        }
        return null;
    }

    public GetterFormatInfo getDefaultGetterFormat() {
        return defaultGetterFormat;
    }

}
